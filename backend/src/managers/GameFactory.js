/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö –¥–≤–∏–∂–∫–æ–≤ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–≥—Ä
 */
class GameFactory {
  constructor() {
    // –†–µ–≥–∏—Å—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä
    this.supportedGames = new Map();
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–≥—Ä—ã
    this.registerGame('chess', {
      engineClass: () => require('../gameEngines/ChessEngine'),
      promptBuilderClass: () => require('../promptBuilders/ChessPromptBuilder'),
      description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —à–∞—Ö–º–∞—Ç—ã 8x8'
    });

    this.registerGame('tictactoe', {
      engineClass: () => require('../gameEngines/TicTacToeEngine'),
      promptBuilderClass: () => require('../promptBuilders/TicTacToePromptBuilder'),
      description: '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ 3x3'
    });
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ —Ñ–∞–±—Ä–∏–∫–µ
   * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
   * @param {Object} gameConfig - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã
   */
  registerGame(gameType, gameConfig) {
    this.supportedGames.set(gameType, gameConfig);
    console.log(`üé≤ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏–≥—Ä–∞: ${gameType}`);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–≥—Ä—ã
   * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
   * @returns {GameEngine} –≠–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
   */
  createGameEngine(gameType) {
    const gameConfig = this.supportedGames.get(gameType);
    
    if (!gameConfig) {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–≥—Ä—ã: ${gameType}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${this.getSupportedGamesList()}`);
    }

    try {
      const EngineClass = gameConfig.engineClass();
      return new EngineClass();
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–≤–∏–∂–∫–∞ –¥–ª—è –∏–≥—Ä—ã ${gameType}: ${error.message}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–≥—Ä—ã
   * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
   * @returns {AIPromptBuilder} –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
   */
  createPromptBuilder(gameType) {
    const gameConfig = this.supportedGames.get(gameType);
    
    if (!gameConfig) {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–≥—Ä—ã: ${gameType}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${this.getSupportedGamesList()}`);
    }

    try {
      const PromptBuilderClass = gameConfig.promptBuilderClass();
      return new PromptBuilderClass();
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã ${gameType}: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –∏–≥—Ä—ã
   * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
   * @returns {boolean} true –µ—Å–ª–∏ –∏–≥—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
   */
  isGameSupported(gameType) {
    return this.supportedGames.has(gameType);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä
   * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ç–∏–ø–æ–≤ –∏–≥—Ä
   */
  getSupportedGames() {
    return Array.from(this.supportedGames.keys());
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
   * @returns {string} –°—Ç—Ä–æ–∫–∞ —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –∏–≥—Ä
   */
  getSupportedGamesList() {
    return this.getSupportedGames().join(', ');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–≥—Ä—ã
   * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
   * @returns {Object|null} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã –∏–ª–∏ null
   */
  getGameConfig(gameType) {
    return this.supportedGames.get(gameType) || null;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä–∞—Ö
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–∞—Ö
   */
  getGamesInfo() {
    const games = [];
    
    for (const [gameType, config] of this.supportedGames) {
      try {
        const engine = this.createGameEngine(gameType);
        const metadata = engine.getGameMetadata();
        
        games.push({
          type: gameType,
          ...metadata,
          description: config.description,
          available: true
        });
      } catch (error) {
        games.push({
          type: gameType,
          name: gameType,
          description: config.description,
          available: false,
          error: error.message
        });
      }
    }
    
    return games;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–¥–≤–∏–∂–æ–∫ + –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –ø—Ä–æ–º–ø—Ç–æ–≤)
   * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
   * @returns {Object} –û–±—ä–µ–∫—Ç —Å –¥–≤–∏–∂–∫–æ–º –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–º –ø—Ä–æ–º–ø—Ç–æ–≤
   */
  createGameContext(gameType) {
    return {
      gameType,
      engine: this.createGameEngine(gameType),
      promptBuilder: this.createPromptBuilder(gameType)
    };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
   * @param {Object} gameConfig - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã
   * @returns {boolean} true –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
   */
  validateGameConfig(gameConfig) {
    if (!gameConfig.engineClass || typeof gameConfig.engineClass !== 'function') {
      throw new Error('engineClass –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π');
    }
    
    if (!gameConfig.promptBuilderClass || typeof gameConfig.promptBuilderClass !== 'function') {
      throw new Error('promptBuilderClass –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π');
    }
    
    if (!gameConfig.description || typeof gameConfig.description !== 'string') {
      throw new Error('description –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
    }
    
    return true;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∏–≥—Ä—É –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
   * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
   * @returns {boolean} true –µ—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
   */
  unregisterGame(gameType) {
    const removed = this.supportedGames.delete(gameType);
    if (removed) {
      console.log(`üóëÔ∏è –ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: ${gameType}`);
    }
    return removed;
  }
}

module.exports = GameFactory; 