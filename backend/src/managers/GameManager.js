const GameFactory = require('./GameFactory');

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ—Ö –∏–≥—Ä
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –¥–≤–∏–∂–∫–æ–≤
 */
class GameManager {
  constructor() {
    this.activeSessions = new Map(); // gameId -> sessionData
    this.gameFactory = new GameFactory();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
   * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã ('chess', 'tictactoe', etc.)
   * @param {Object} options - –û–ø—Ü–∏–∏ –∏–≥—Ä—ã
   * @returns {Object} –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
   */
  createGameSession(gameType, options = {}) {
    const gameId = this.generateGameId();
    const gameEngine = this.gameFactory.createGameEngine(gameType);
    const promptBuilder = this.gameFactory.createPromptBuilder(gameType);

    const session = {
      gameId,
      gameType,
      gameEngine,
      promptBuilder,
      gameState: gameEngine.getInitialState(),
      players: options.players || ['human', 'ai'],
      aiConfig: options.aiConfig || {},
      createdAt: Date.now(),
      lastActivity: Date.now(),
      moveHistory: [],
      status: 'active' // active, paused, finished
    };

    this.activeSessions.set(gameId, session);
    
    console.log(`üéÆ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è: ${gameType} (ID: ${gameId})`);
    return {
      gameId,
      gameType,
      gameState: session.gameState,
      players: session.players,
      status: session.status
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ ID
   * @param {string} gameId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä—ã
   * @returns {Object|null} –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ null
   */
  getGameSession(gameId) {
    return this.activeSessions.get(gameId) || null;
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
   * @param {string} gameId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä—ã
   * @param {Object} move - –•–æ–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   * @param {string} player - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä–æ–∫–∞
   * @returns {boolean} true –µ—Å–ª–∏ —Ö–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–π
   */
  validateMove(gameId, move, player) {
    const session = this.getGameSession(gameId);
    if (!session) {
      throw new Error(`–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${gameId}`);
    }

    return session.gameEngine.validateMove(session.gameState, move, player);
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
   * @param {string} gameId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä—ã
   * @param {Object} move - –•–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   * @param {string} player - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä–æ–∫–∞
   * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–æ–¥–∞
   */
  makeMove(gameId, move, player) {
    const session = this.getGameSession(gameId);
    if (!session) {
      throw new Error(`–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${gameId}`);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ–¥–∞
    if (!session.gameEngine.validateMove(session.gameState, move, player)) {
      throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ö–æ–¥');
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞
    const newGameState = session.gameEngine.makeMove(session.gameState, move, player);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    session.gameState = newGameState;
    session.lastActivity = Date.now();
    session.moveHistory.push({
      move,
      player,
      timestamp: Date.now(),
      gameState: session.gameEngine.cloneState(newGameState)
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    const gameEnd = session.gameEngine.checkGameEnd(newGameState);
    if (gameEnd.isGameOver) {
      session.status = 'finished';
      console.log(`üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${gameId}, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: ${gameEnd.winner}`);
    }

    return {
      gameState: newGameState,
      gameEnd,
      moveHistory: session.moveHistory.map(h => ({
        move: h.move,
        player: h.player,
        timestamp: h.timestamp
      }))
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ö–æ–¥ –æ—Ç AI
   * @param {string} gameId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä—ã
   * @param {Object} aiConfig - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI
   * @returns {Promise<Object>} –•–æ–¥ AI –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   */
  async getAIMove(gameId, aiConfig) {
    const session = this.getGameSession(gameId);
    if (!session) {
      throw new Error(`–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${gameId}`);
    }

    const { gameEngine, promptBuilder, gameState } = session;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É AI
    const aiSide = aiConfig.aiSide || this.determineAISide(session);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã
    const availableMoves = gameEngine.getAvailableMoves(gameState, aiSide);
    if (availableMoves.length === 0) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è AI');
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
    const prompt = promptBuilder.buildFullPrompt({
      gameState,
      strategy: aiConfig.strategy || '–ò–≥—Ä–∞–π –ª—É—á—à–∏–π —Ö–æ–¥',
      aiSide,
      availableMoves
    });

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
    const aiService = require('../services/aiService');
    const aiResponse = await aiService.queryAI(prompt, aiConfig);
    
    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
    const parsedResponse = promptBuilder.parseAIResponse(aiResponse);
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ö–æ–¥ AI
    if (!gameEngine.validateMove(gameState, parsedResponse.move, aiSide)) {
      throw new Error(`AI –ø—Ä–µ–¥–ª–æ–∂–∏–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ö–æ–¥: ${parsedResponse.move}`);
    }

    return {
      move: parsedResponse.move,
      reasoning: parsedResponse.reasoning,
      newStrategy: parsedResponse.newStrategy,
      availableMoves: availableMoves.length,
      aiSide
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
   */
  getActiveSessions() {
    return Array.from(this.activeSessions.values()).map(session => ({
      gameId: session.gameId,
      gameType: session.gameType,
      players: session.players,
      status: session.status,
      createdAt: session.createdAt,
      lastActivity: session.lastActivity,
      moveCount: session.moveHistory.length
    }));
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
   * @param {string} gameId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä—ã
   * @returns {boolean} true –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
   */
  removeGameSession(gameId) {
    const success = this.activeSessions.delete(gameId);
    if (success) {
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∏–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è: ${gameId}`);
    }
    return success;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
   * @param {number} maxInactiveTime - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –º—Å
   */
  cleanupInactiveSessions(maxInactiveTime = 24 * 60 * 60 * 1000) { // 24 —á–∞—Å–∞
    const now = Date.now();
    const toRemove = [];

    for (const [gameId, session] of this.activeSessions) {
      if (now - session.lastActivity > maxInactiveTime) {
        toRemove.push(gameId);
      }
    }

    toRemove.forEach(gameId => this.removeGameSession(gameId));
    
    if (toRemove.length > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${toRemove.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π`);
    }

    return toRemove.length;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–≥—Ä—ã
   * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
   */
  generateGameId() {
    return `game_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–æ—Ä–æ–Ω—É AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã
   * @param {Object} session - –ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è
   * @returns {string} –°—Ç–æ—Ä–æ–Ω–∞ AI
   */
  determineAISide(session) {
    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω—ã AI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–≥—Ä—ã
    if (session.gameType === 'chess') {
      return session.players.indexOf('ai') === 0 ? 'white' : 'black';
    } else if (session.gameType === 'tictactoe') {
      return session.players.indexOf('ai') === 0 ? 'x' : 'o';
    }
    
    return 'ai'; // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
   * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
   * @returns {Object} –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
   */
  getGameMetadata(gameType) {
    try {
      const gameEngine = this.gameFactory.createGameEngine(gameType);
      return gameEngine.getGameMetadata();
    } catch (error) {
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä
   * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ç–∏–ø–æ–≤ –∏–≥—Ä
   */
  getSupportedGames() {
    return this.gameFactory.getSupportedGames();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π instance GameManager
module.exports = new GameManager(); 