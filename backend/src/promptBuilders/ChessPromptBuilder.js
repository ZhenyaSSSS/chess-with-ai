const AIPromptBuilder = require('../interfaces/AIPromptBuilder');
const { Chess } = require('chess.js');

/**
 * –ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —à–∞—Ö–º–∞—Ç–Ω–æ–π –∏–≥—Ä—ã
 * –°–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è AI —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 */
class ChessPromptBuilder extends AIPromptBuilder {
  constructor() {
    super('chess');
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
   * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã { fen: string }
   * @param {string} strategy - –°—Ç—Ä–∞—Ç–µ–≥–∏—è AI
   * @param {string} aiSide - –°—Ç–æ—Ä–æ–Ω–∞ AI ('white' –∏–ª–∏ 'black')
   * @returns {string} –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  buildAnalysisPrompt(gameState, strategy, aiSide) {
    const chess = new Chess(gameState.fen);
    const turn = chess.turn() === 'w' ? 'White' : 'Black';
    const isCheck = chess.inCheck();
    const isGameOver = chess.isGameOver();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é
    const materialBalance = this.calculateMaterialBalance(chess);
    const gamePhase = this.determineGamePhase(chess);
    const kingPosition = this.analyzeKingSafety(chess, aiSide);
    const centerControl = this.analyzeCenterControl(chess);
    const piecesAnalysis = this.analyzePiecesOnBoard(chess, aiSide);

    return `–¢—ã - –≥—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä –ø–æ —à–∞—Ö–º–∞—Ç–∞–º –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è. –¢—ã –∏–≥—Ä–∞–µ—à—å –∑–∞ ${aiSide === 'white' ? '–ë–ï–õ–´–•' : '–ß–ï–†–ù–´–•'}.

**–°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ò:**

üéØ **–ì–õ–ê–í–ù–ê–Ø –¶–ï–õ–¨:** –í—ã–∏–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å.

üìä **–¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:**
- FEN: ${gameState.fen}
- –°–µ–π—á–∞—Å —Ö–æ–¥—è—Ç: ${turn} (${(turn === 'White' && aiSide === 'white') || (turn === 'Black' && aiSide === 'black') ? '–≠–¢–û –¢–´' : '–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫'})
- –§–∞–∑–∞ –∏–≥—Ä—ã: ${gamePhase}
- –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${materialBalance}
- ${isCheck ? '‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –ö–æ—Ä–æ–ª—å –ø–æ–¥ —à–∞—Ö–æ–º!' : '‚úÖ –ö–æ—Ä–æ–ª—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'}
- ${isGameOver ? 'üîö –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!' : '‚ö° –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è'}

üè∞ **–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ö–û–†–û–õ–Ø:**
${kingPosition}

üèõÔ∏è **–ö–û–ù–¢–†–û–õ–¨ –¶–ï–ù–¢–†–ê:**
${centerControl}

üìà **–§–û–ö–£–° –ù–ê –ü–û–ó–ò–¶–ò–ò:**
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –±–µ–∑ –≤–ª–∏—è–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ö–æ–¥–æ–≤

üß† **–¢–í–û–Ø –¢–ï–ö–£–©–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:**
"${strategy}"

üîç **–ê–ù–ê–õ–ò–ó –¢–í–û–ò–• –§–ò–ì–£–†:**
${piecesAnalysis}`;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ö–æ–¥–∞
   * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   * @param {Array} availableMoves - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã
   * @param {string} strategy - –°—Ç—Ä–∞—Ç–µ–≥–∏—è AI
   * @param {string} aiSide - –°—Ç–æ—Ä–æ–Ω–∞ AI
   * @returns {string} –ü—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ö–æ–¥–∞
   */
  buildMoveSelectionPrompt(gameState, availableMoves, strategy, aiSide) {
    if (availableMoves.length === 0) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
    }

    console.log(`üìã –î–æ—Å—Ç—É–ø–Ω–æ —Ö–æ–¥–æ–≤: ${availableMoves.length} (${availableMoves.slice(0, 5).join(', ')}${availableMoves.length > 5 ? '...' : ''})`);

    return `üéØ **–î–û–°–¢–£–ü–ù–´–ï –•–û–î–´ (–í–°–ï –í–û–ó–ú–û–ñ–ù–´–ï –•–û–î–´):**
${availableMoves.join(', ')}

üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:** –¢—ã –ú–û–ñ–ï–®–¨ —Å–¥–µ–ª–∞—Ç—å –¢–û–õ–¨–ö–û –æ–¥–∏–Ω –∏–∑ —Ö–æ–¥–æ–≤ –≤—ã—à–µ. –ù–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ —Ö–æ–¥—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏!

**–ì–õ–£–ë–û–ö–ò–ô –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:**

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–∑–∏—Ü–∏—é –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏:

1Ô∏è‚É£ **–¢–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #1):**
   - –ï—Å—Ç—å –ª–∏ —É–≥—Ä–æ–∑—ã –º–∞—Ç–∞ –≤ 1-3 —Ö–æ–¥–∞?
   - –ú–æ–∂–Ω–æ –ª–∏ –≤—ã–∏–≥—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª (—Å–≤—è–∑–∫–∏, –≤–∏–ª–∫–∏, –¥–≤–æ–π–Ω—ã–µ —É–¥–∞—Ä—ã)?
   - –ï—Å—Ç—å –ª–∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–æ—Ç–∏–≤—ã (—Ä–µ–Ω—Ç–≥–µ–Ω, –∑–∞–≤–ª–µ—á–µ–Ω–∏–µ, –æ—Ç–≤–ª–µ—á–µ–Ω–∏–µ)?

2Ô∏è‚É£ **–ú–ê–¢–ï–†–ò–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê:**
   - –¢–µ–∫—É—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
   - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ–Ω–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
   - –ö–∞—á–µ—Å—Ç–≤–æ —Ñ–∏–≥—É—Ä vs –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

3Ô∏è‚É£ **–ü–û–ó–ò–¶–ò–û–ù–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï:**
   - –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∏–≥—É—Ä
   - –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π –∏ –ª–∏–Ω–∏–π
   - –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–∞–±–æ—Å—Ç–µ–π –≤ –ª–∞–≥–µ—Ä–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞

4Ô∏è‚É£ **–ü–ï–®–ï–ß–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:**
   - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–Ω—ã—Ö –ø–µ—à–µ–∫
   - –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–∞–±—ã—Ö –ø–µ—à–µ–∫
   - –ü–µ—à–µ—á–Ω—ã–µ –ø—Ä–æ—Ä—ã–≤—ã

5Ô∏è‚É£ **–î–û–õ–ì–û–°–†–û–ß–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:**
   - –ü–ª–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 3-5 —Ö–æ–¥–æ–≤
   - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–Ω–¥—à–ø–∏–ª—é
   - –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤

**–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–¢–í–ï–¢–£:**
1. –•–æ–¥ –î–û–õ–ñ–ï–ù –±—ã—Ç—å –¢–û–ß–ù–û —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ –≤—ã—à–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π!)
2. –ù–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö —Ö–æ–¥–æ–≤ –±—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç
3. –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –≤–∫–ª—é—á–∞—Ç—å:
   - –ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ö–æ–¥–∞
   - –ü–ª–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 2-3 —Ö–æ–¥–∞
   - –û—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫—É—é –∏–¥–µ—é

**–°–ü–ò–°–û–ö –î–û–°–¢–£–ü–ù–´–• –•–û–î–û–í –î–õ–Ø –°–ü–†–ê–í–ö–ò:**
${availableMoves.join(', ')}

üö®üö®üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –•–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–ß–ù–û–ô –ö–û–ü–ò–ï–ô –∏–∑ —Å–ø–∏—Å–∫–∞! –ù–µ–ª—å–∑—è –∏–∑–æ–±—Ä–µ—Ç–∞—Ç—å —Ö–æ–¥—ã! üö®üö®üö®

‚ö†Ô∏è –ù–ï –î–ï–õ–ê–ô –•–û–î–´ –§–ò–ì–£–†–ê–ú–ò, –ö–û–¢–û–†–´–• –ù–ï–¢ –ù–ê –î–û–°–ö–ï! –ü—Ä–æ–≤–µ—Ä—å –∞–Ω–∞–ª–∏–∑ —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä –≤—ã—à–µ!`;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏
   * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   * @param {string} invalidMove - –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ö–æ–¥
   * @param {string} error - –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
   * @param {Array} availableMoves - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã
   * @returns {string} –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  buildErrorRecoveryPrompt(gameState, invalidMove, error, availableMoves) {
    return `üö® **–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò:**

–¢–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ö–æ–¥ "${invalidMove}" –±—ã–ª –Ω–µ–≤–µ—Ä–Ω—ã–º. 
–û—à–∏–±–∫–∞: "${error}"

**–î–û–°–¢–£–ü–ù–´–ï –ö–û–†–†–ï–ö–¢–ù–´–ï –•–û–î–´:**
${availableMoves.join(', ')}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ—Å–∫—É –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–±–µ—Ä–∏ –î–†–£–ì–û–ô, –ö–û–†–†–ï–ö–¢–ù–´–ô —Ö–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤.

**–ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ò:**
${this.formatGameState(gameState)}

–•–æ–¥ –î–û–õ–ñ–ï–ù –±—ã—Ç—å –¢–û–ß–ù–û–ô –ö–û–ü–ò–ï–ô –æ–¥–Ω–æ–≥–æ –∏–∑ —Ö–æ–¥–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ!`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
   * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
   */
  formatGameState(gameState) {
    const chess = new Chess(gameState.fen);
    const turn = chess.turn() === 'w' ? '–ë–µ–ª—ã–µ' : '–ß–µ—Ä–Ω—ã–µ';
    const moveCount = chess.history().length;
    const isCheck = chess.inCheck();
    
    return `FEN: ${gameState.fen}
–•–æ–¥: ${turn} (—Ö–æ–¥ ${Math.floor(moveCount / 2) + 1})
${isCheck ? '–®–∞—Ö!' : '–ö–æ—Ä–æ–ª—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —à–∞—Ö–º–∞—Ç
   * @returns {string} –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —à–∞—Ö–º–∞—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
   */
  getResponseFormatInstructions() {
    return `
–í–ê–ñ–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¢–û–õ–¨–ö–û JSON –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "move": "–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø —Ö–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: Nf3, e4, O-O)",
  "strategy": "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ö–æ–¥–∞ + –ø–ª–∞–Ω –Ω–∞ 2-3 —Ö–æ–¥–∞ + –≥–ª–∞–≤–Ω–∞—è –∏–¥–µ—è (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤)"
}

–ù–∏–∫–∞–∫–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON!
–•–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —à–∞—Ö–º–∞—Ç–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏ (SAN).`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ AI
   * @returns {string} –û–±—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
   */
  getGeneralInstructions() {
    return `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —à–∞—Ö–º–∞—Ç–∏—Å—Ç –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è. 
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–∑–∏—Ü–∏—é –≥–ª—É–±–æ–∫–æ –∏ –≤—ã–±–∏—Ä–∞–π –ª—É—á—à–∏–µ —Ö–æ–¥—ã.
–£—á–∏—Ç—ã–≤–∞–π –∫–∞–∫ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ, —Ç–∞–∫ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –∏–≥—Ä—ã.
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –º–∞—Ç > –º–∞—Ç–µ—Ä–∏–∞–ª > –ø–æ–∑–∏—Ü–∏—è > —Ä–∞–∑–≤–∏—Ç–∏–µ.`;
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –ê–ù–ê–õ–ò–ó–ê =====

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–∑–∏—Ü–∏–∏
   * @param {Chess} chess - –û–±—ä–µ–∫—Ç –∏–≥—Ä—ã chess.js
   * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
   */
  calculateMaterialBalance(chess) {
    const pieceValues = { p: 1, n: 3, b: 3, r: 5, q: 9, k: 0 };
    let whiteValue = 0, blackValue = 0;
    
    const board = chess.board();
    for (let i = 0; i < 8; i++) {
      for (let j = 0; j < 8; j++) {
        const piece = board[i][j];
        if (piece) {
          const value = pieceValues[piece.type];
          if (piece.color === 'w') {
            whiteValue += value;
          } else {
            blackValue += value;
          }
        }
      }
    }
    
    const difference = whiteValue - blackValue;
    if (Math.abs(difference) <= 1) {
      return `–†–∞–≤–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª (${whiteValue}:${blackValue})`;
    } else if (difference > 0) {
      return `–ë–µ–ª—ã–µ +${difference} (${whiteValue}:${blackValue})`;
    } else {
      return `–ß–µ—Ä–Ω—ã–µ +${Math.abs(difference)} (${whiteValue}:${blackValue})`;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–∞–∑—É –∏–≥—Ä—ã
   * @param {Chess} chess - –û–±—ä–µ–∫—Ç –∏–≥—Ä—ã
   * @returns {string} –§–∞–∑–∞ –∏–≥—Ä—ã
   */
  determineGamePhase(chess) {
    const history = chess.history();
    const moveCount = history.length;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—è–∂–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã –Ω–∞ –¥–æ—Å–∫–µ
    const board = chess.board();
    let heavyPieces = 0;
    
    for (let i = 0; i < 8; i++) {
      for (let j = 0; j < 8; j++) {
        const piece = board[i][j];
        if (piece && (piece.type === 'q' || piece.type === 'r')) {
          heavyPieces++;
        }
      }
    }
    
    if (moveCount < 20 && heavyPieces >= 4) {
      return "–î–µ–±—é—Ç - —Ä–∞–∑–≤–∏—Ç–∏–µ —Ñ–∏–≥—É—Ä";
    } else if (moveCount < 40 && heavyPieces >= 2) {
      return "–ú–∏—Ç—Ç–µ–ª—å—à–ø–∏–ª—å - –±–æ—Ä—å–±–∞ –∑–∞ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ";
    } else {
      return "–≠–Ω–¥—à–ø–∏–ª—å - —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞";
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ–ª—è
   * @param {Chess} chess - –û–±—ä–µ–∫—Ç –∏–≥—Ä—ã
   * @param {string} aiSide - –°—Ç–æ—Ä–æ–Ω–∞ AI
   * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ—Ä–æ–ª—è
   */
  analyzeKingSafety(chess, aiSide) {
    const color = aiSide === 'white' ? 'w' : 'b';
    const isCheck = chess.inCheck() && chess.turn() === color;
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ä–æ–∫–∏—Ä–æ–≤–∫–∏
    const fen = chess.fen();
    const castlingRights = fen.split(' ')[2];
    
    const canCastleKingside = castlingRights.includes(color === 'w' ? 'K' : 'k');
    const canCastleQueenside = castlingRights.includes(color === 'w' ? 'Q' : 'q');
    
    if (isCheck) {
      return "‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –¢–≤–æ–π –∫–æ—Ä–æ–ª—å –ø–æ–¥ —à–∞—Ö–æ–º!";
    }
    
    const castling = [];
    if (canCastleKingside) castling.push("–∫–æ—Ä–æ—Ç–∫–∞—è");
    if (canCastleQueenside) castling.push("–¥–ª–∏–Ω–Ω–∞—è");
    
    if (castling.length > 0) {
      return `‚úÖ –¢–≤–æ–π –∫–æ—Ä–æ–ª—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –î–æ—Å—Ç—É–ø–Ω–∞ —Ä–æ–∫–∏—Ä–æ–≤–∫–∞: ${castling.join(', ')}`;
    }
    
    return "‚úÖ –¢–≤–æ–π –∫–æ—Ä–æ–ª—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –†–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞";
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–Ω—Ç—Ä–∞
   * @param {Chess} chess - –û–±—ä–µ–∫—Ç –∏–≥—Ä—ã
   * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ü–µ–Ω—Ç—Ä–∞
   */
  analyzeCenterControl(chess) {
    const centerSquares = ['d4', 'd5', 'e4', 'e5'];
    let whiteControl = 0, blackControl = 0;
    
    centerSquares.forEach(square => {
      const attacks = chess.attackers(square);
      attacks.forEach(attacker => {
        const piece = chess.get(attacker);
        if (piece.color === 'w') {
          whiteControl++;
        } else {
          blackControl++;
        }
      });
    });

    if (whiteControl > blackControl) {
      return `–ë–µ–ª—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç —Ü–µ–Ω—Ç—Ä (+${whiteControl - blackControl})`;
    } else if (blackControl > whiteControl) {
      return `–ß–µ—Ä–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç —Ü–µ–Ω—Ç—Ä (+${blackControl - whiteControl})`;
    } else {
      return "–†–∞–≤–Ω–∞—è –±–æ—Ä—å–±–∞ –∑–∞ —Ü–µ–Ω—Ç—Ä";
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–≥—É—Ä—ã –Ω–∞ –¥–æ—Å–∫–µ –¥–ª—è AI —Å—Ç–æ—Ä–æ–Ω—ã
   * @param {Chess} chess - –û–±—ä–µ–∫—Ç –∏–≥—Ä—ã
   * @param {string} aiSide - –°—Ç–æ—Ä–æ–Ω–∞ AI
   * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä
   */
  analyzePiecesOnBoard(chess, aiSide) {
    const color = aiSide === 'white' ? 'w' : 'b';
    const board = chess.board();
    
    const pieces = {};
    const positions = {};
    const pieceNames = {
      k: '–∫–æ—Ä–æ–ª—å', q: '—Ñ–µ—Ä–∑—å', r: '–ª–∞–¥—å—è', 
      b: '—Å–ª–æ–Ω', n: '–∫–æ–Ω—å', p: '–ø–µ—à–∫–∞'
    };
    
    for (let rank = 0; rank < 8; rank++) {
      for (let file = 0; file < 8; file++) {
        const piece = board[rank][file];
        if (piece && piece.color === color) {
          const square = String.fromCharCode(97 + file) + (8 - rank);
          
          if (!pieces[piece.type]) {
            pieces[piece.type] = 0;
            positions[piece.type] = [];
          }
          pieces[piece.type]++;
          positions[piece.type].push(square);
        }
      }
    }
    
    let analysis = `–¢–≤–æ–∏ —Ñ–∏–≥—É—Ä—ã –Ω–∞ –¥–æ—Å–∫–µ:\n`;
    
    // –í—Å–µ —Ñ–∏–≥—É—Ä—ã –≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const pieceOrder = ['k', 'q', 'r', 'b', 'n', 'p']; // –ü–æ—Ä—è–¥–æ–∫ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
    
    pieceOrder.forEach(type => {
      if (pieces[type]) {
        analysis += `- ${pieceNames[type].charAt(0).toUpperCase() + pieceNames[type].slice(1)} (${pieces[type]}): ${positions[type].join(', ')}\n`;
      } else {
        analysis += `- ${pieceNames[type].charAt(0).toUpperCase() + pieceNames[type].slice(1)}: –ù–ï–¢ –ù–ê –î–û–°–ö–ï\n`;
      }
    });
    
    return analysis.trim();
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç AI —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è —à–∞—Ö–º–∞—Ç
   * @param {string} response - –û—Ç–≤–µ—Ç –æ—Ç AI
   * @returns {Object} –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
   */
  parseAIResponse(response) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
      const parsed = super.parseAIResponse(response);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —à–∞—Ö–º–∞—Ç
      if (parsed.move && typeof parsed.move === 'string') {
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã
        parsed.move = parsed.move.trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —à–∞—Ö–º–∞—Ç–Ω–∞—è –Ω–æ—Ç–∞—Ü–∏—è
        if (!/^[a-hA-H]?[1-8]?[NBRQK]?[a-h][1-8]([+#])?(\=[NBRQ])?$|^O-O(-O)?([+#])?$/.test(parsed.move)) {
          console.warn(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–æ–¥–∞: ${parsed.move}`);
        }
      }
      
      // –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–æ 250 —Å–∏–º–≤–æ–ª–æ–≤
      if (parsed.newStrategy && parsed.newStrategy.length > 250) {
        parsed.newStrategy = parsed.newStrategy.substring(0, 247) + '...';
      }
      
      return parsed;
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
    }
  }
}

module.exports = ChessPromptBuilder; 