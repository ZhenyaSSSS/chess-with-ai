const AIPromptBuilder = require('../interfaces/AIPromptBuilder');

/**
 * –ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤
 * –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Å—Ç–æ–π –∏–≥—Ä—ã 3x3
 */
class TicTacToePromptBuilder extends AIPromptBuilder {
  constructor() {
    super('tictactoe');
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∑–∏—Ü–∏–∏ –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤
   * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã { board: Array, currentPlayer: string }
   * @param {string} strategy - –°—Ç—Ä–∞—Ç–µ–≥–∏—è AI
   * @param {string} aiSide - –°—Ç–æ—Ä–æ–Ω–∞ AI ('x' –∏–ª–∏ 'o')
   * @returns {string} –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  buildAnalysisPrompt(gameState, strategy, aiSide) {
    const opponentSide = aiSide === 'x' ? 'o' : 'x';
    const boardVisual = this.formatBoardVisual(gameState.board);
    const positionAnalysis = this.analyzePosition(gameState, aiSide);

    return `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—Ä–µ—Å—Ç–∏–∫–∞–º-–Ω–æ–ª–∏–∫–∞–º. –¢—ã –∏–≥—Ä–∞–µ—à—å –∑–∞ ${aiSide.toUpperCase()}.

**–ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ô –ü–û–ó–ò–¶–ò–ò:**

üéØ **–¢–í–û–ô –°–ò–ú–í–û–õ:** ${aiSide.toUpperCase()}
üé≠ **–ü–†–û–¢–ò–í–ù–ò–ö:** ${opponentSide.toUpperCase()}
üéÆ **–°–ï–ô–ß–ê–° –•–û–î–Ø–¢:** ${gameState.currentPlayer.toUpperCase()}

üìã **–î–û–°–ö–ê:**
${boardVisual}

üìä **–°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:**
${positionAnalysis}

üß† **–¢–í–û–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:**
"${strategy}"

üéØ **–ü–†–ò–û–†–ò–¢–ï–¢–´ –í –ö–†–ï–°–¢–ò–ö–ê–•-–ù–û–õ–ò–ö–ê–•:**
1. –í–´–ò–ì–†–ê–¢–¨ - –µ—Å–ª–∏ –º–æ–∂–µ—à—å –≤—ã–∏–≥—Ä–∞—Ç—å –∑–∞ 1 —Ö–æ–¥, –¥–µ–ª–∞–π —ç—Ç–æ!
2. –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–¢–¨ - –µ—Å–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –º–æ–∂–µ—Ç –≤—ã–∏–≥—Ä–∞—Ç—å –∑–∞ 1 —Ö–æ–¥, –±–ª–æ–∫–∏—Ä—É–π!
3. –ö–û–ù–¢–†–û–õ–ò–†–û–í–ê–¢–¨ –¶–ï–ù–¢–† - –∫–ª–µ—Ç–∫–∞ (1,1) —Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è
4. –ó–ê–ù–ò–ú–ê–¢–¨ –£–ì–õ–´ - —É–≥–ª—ã (0,0), (0,2), (2,0), (2,2) –¥–∞—é—Ç –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
5. –ò–ó–ë–ï–ì–ê–¢–¨ –ö–†–ê–ï–í - –∫—Ä–∞—è –º–µ–Ω–µ–µ –≤—ã–≥–æ–¥–Ω—ã`;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ö–æ–¥–∞
   * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   * @param {Array} availableMoves - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã
   * @param {string} strategy - –°—Ç—Ä–∞—Ç–µ–≥–∏—è AI
   * @param {string} aiSide - –°—Ç–æ—Ä–æ–Ω–∞ AI
   * @returns {string} –ü—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ö–æ–¥–∞
   */
  buildMoveSelectionPrompt(gameState, availableMoves, strategy, aiSide) {
    if (availableMoves.length === 0) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
    }

    const movesFormatted = this.formatMoves(availableMoves);
    const tacticalAnalysis = this.generateTacticalAnalysis(gameState, aiSide, availableMoves);

    return `üéØ **–î–û–°–¢–£–ü–ù–´–ï –•–û–î–´:**
${movesFormatted}

üîç **–¢–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:**
${tacticalAnalysis}

**–ü–û–®–ê–ì–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú –í–´–ë–û–†–ê:**

1Ô∏è‚É£ **–ü–†–û–í–ï–†–¨ –í–´–ò–ì–†–´–®:** –ú–æ–∂–µ—à—å –ª–∏ —Ç—ã –≤—ã–∏–≥—Ä–∞—Ç—å –∑–∞ 1 —Ö–æ–¥?
2Ô∏è‚É£ **–ü–†–û–í–ï–†–¨ –ó–ê–©–ò–¢–£:** –ú–æ–∂–µ—Ç –ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞—Ç—å –∑–∞ 1 —Ö–æ–¥? –ë–õ–û–ö–ò–†–£–ô!
3Ô∏è‚É£ **–°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–û–ï –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï:**
   - –ï—Å–ª–∏ —Ü–µ–Ω—Ç—Ä (1,1) —Å–≤–æ–±–æ–¥–µ–Ω –∏ —Ç—ã –µ—â–µ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—à—å –µ–≥–æ ‚Üí –∑–∞–π–º–∏ —Ü–µ–Ω—Ç—Ä
   - –ï—Å–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ ‚Üí –∑–∞–π–º–∏ —É–≥–æ–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–≤–æ–π–Ω–æ–π —É–≥—Ä–æ–∑—ã
   - –ï—Å–ª–∏ —É —Ç–µ–±—è —Ü–µ–Ω—Ç—Ä ‚Üí –∑–∞–π–º–∏ —É–≥–æ–ª –¥–ª—è —Ñ–æ—Ä–∫–æ–≤
   - –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∏ —É–≥–ª–æ–≤ ‚Üí –∑–∞–π–º–∏ –ª—é–±–æ–π —É–≥–æ–ª
   - –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ ‚Üí –∑–∞–π–º–∏ –∫—Ä–∞–π

**–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –¢–ê–ö–¢–ò–ö–ò:**
üé™ **–§–û–†–ö (–¥–≤–æ–π–Ω–∞—è —É–≥—Ä–æ–∑–∞):** –°–æ–∑–¥–∞–π —Å–∏—Ç—É–∞—Ü–∏—é, –≥–¥–µ —É —Ç–µ–±—è –¥–≤–µ –ª–∏–Ω–∏–∏ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–±–µ–¥–µ
üõ°Ô∏è **–ë–õ–û–ö–ò–†–û–í–ö–ê:** –û—Å—Ç–∞–Ω–æ–≤–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–∫–æ–≤
üéØ **–ö–û–ù–¢–†–û–õ–¨ –¶–ï–ù–¢–†–ê:** –¶–µ–Ω—Ç—Ä —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ 4 –ø–æ–±–µ–¥–Ω—ã—Ö –ª–∏–Ω–∏—è—Ö (–±–æ–ª—å—à–µ –≤—Å–µ–≥–æ)

**–í–ê–ñ–ù–û:** –•–æ–¥—ã –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ "row,col" (–Ω–∞–ø—Ä–∏–º–µ—Ä: "1,1" –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞).`;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏
   * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   * @param {string} invalidMove - –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ö–æ–¥
   * @param {string} error - –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
   * @param {Array} availableMoves - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã
   * @returns {string} –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  buildErrorRecoveryPrompt(gameState, invalidMove, error, availableMoves) {
    const boardVisual = this.formatBoardVisual(gameState.board);
    const movesFormatted = this.formatMoves(availableMoves);

    return `üö® **–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò:**

–¢–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ö–æ–¥ "${invalidMove}" –±—ã–ª –Ω–µ–≤–µ—Ä–Ω—ã–º.
–û—à–∏–±–∫–∞: "${error}"

**–¢–ï–ö–£–©–ê–Ø –î–û–°–ö–ê:**
${boardVisual}

**–î–û–°–¢–£–ü–ù–´–ï –ö–û–†–†–ï–ö–¢–ù–´–ï –•–û–î–´:**
${movesFormatted}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ö–û–†–†–ï–ö–¢–ù–´–ô —Ö–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.
–§–æ—Ä–º–∞—Ç: "row,col" (–Ω–∞–ø—Ä–∏–º–µ—Ä: "0,0" –¥–ª—è –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞).`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
   * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
   */
  formatGameState(gameState) {
    const boardVisual = this.formatBoardVisual(gameState.board);
    const moveCount = gameState.moveCount || 0;
    
    return `–•–æ–¥ #${moveCount + 1}
–°–µ–π—á–∞—Å —Ö–æ–¥—è—Ç: ${gameState.currentPlayer.toUpperCase()}

${boardVisual}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤
   * @returns {string} –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
   */
  getResponseFormatInstructions() {
    return `
–í–ê–ñ–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¢–û–õ–¨–ö–û JSON –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "move": "row,col",
  "reasoning": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ö–æ–¥–∞ –∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"
}

–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ö–æ–¥–æ–≤: "0,0", "1,1", "2,2"
–ì–¥–µ –ø–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ - —Å—Ç—Ä–æ–∫–∞ (0-2), –≤—Ç–æ—Ä–∞—è - —Å—Ç–æ–ª–±–µ—Ü (0-2).

–ù–∏–∫–∞–∫–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON!`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è AI –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤
   * @returns {string} –û–±—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
   */
  getGeneralInstructions() {
    return `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—Ä–µ—Å—Ç–∏–∫–∞–º-–Ω–æ–ª–∏–∫–∞–º —Å –∏–¥–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–æ–π.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é —Ç—â–∞—Ç–µ–ª—å–Ω–æ.
–ü–æ–º–Ω–∏: –ø–æ–±–µ–¥–∞ > –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ > —Ü–µ–Ω—Ç—Ä > —É–≥–ª—ã > –∫—Ä–∞—è.
–í—Å–µ–≥–¥–∞ –∏—â–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–∫–æ–≤ (–¥–≤–æ–π–Ω—ã—Ö —É–≥—Ä–æ–∑).`;
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–æ—Å–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç–µ
   * @param {Array} board - –î–æ—Å–∫–∞ 3x3
   * @returns {string} –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏
   */
  formatBoardVisual(board) {
    const symbols = {
      'x': 'X',
      'o': 'O',
      null: '¬∑'
    };

    let visual = '';
    visual += '  0 1 2\n';
    
    for (let row = 0; row < 3; row++) {
      visual += `${row} `;
      for (let col = 0; col < 3; col++) {
        visual += symbols[board[row][col]] + ' ';
      }
      if (row < 2) visual += '\n';
    }

    return visual;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ö–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
   * @param {Array} moves - –ú–∞—Å—Å–∏–≤ —Ö–æ–¥–æ–≤
   * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
   */
  formatMoves(moves) {
    return moves.map(move => {
      const position = this.getPositionName(move.row, move.col);
      return `"${move.row},${move.col}" - ${position}`;
    }).join('\n');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –¥–æ—Å–∫–µ
   * @param {number} row - –°—Ç—Ä–æ–∫–∞
   * @param {number} col - –°—Ç–æ–ª–±–µ—Ü
   * @returns {string} –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
   */
  getPositionName(row, col) {
    if (row === 1 && col === 1) return '–¶–ï–ù–¢–† (—Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è!)';
    
    const corners = [[0,0], [0,2], [2,0], [2,2]];
    if (corners.some(([r, c]) => r === row && c === col)) {
      const cornerNames = {
        '0,0': '–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª',
        '0,2': '–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª', 
        '2,0': '–ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª',
        '2,2': '–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª'
      };
      return `–£–ì–û–õ (${cornerNames[`${row},${col}`]})`;
    }
    
    const edgeNames = {
      '0,1': '–≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π',
      '1,0': '–ª–µ–≤—ã–π –∫—Ä–∞–π',
      '1,2': '–ø—Ä–∞–≤—ã–π –∫—Ä–∞–π',
      '2,1': '–Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π'
    };
    return `–∫—Ä–∞–π (${edgeNames[`${row},${col}`]})`;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏—é –¥–ª—è AI
   * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   * @param {string} aiSide - –°—Ç–æ—Ä–æ–Ω–∞ AI
   * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
   */
  analyzePosition(gameState, aiSide) {
    const opponentSide = aiSide === 'x' ? 'o' : 'x';
    const winningMoves = this.findWinningMoves(gameState.board, aiSide);
    const blockingMoves = this.findWinningMoves(gameState.board, opponentSide);
    const centerControl = gameState.board[1][1];
    
    let analysis = '';
    
    if (winningMoves.length > 0) {
      analysis += `üèÜ –ú–û–ñ–ï–®–¨ –í–´–ò–ì–†–ê–¢–¨! –í—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Ö–æ–¥—ã: ${winningMoves.map(m => `(${m.row},${m.col})`).join(', ')}\n`;
    }
    
    if (blockingMoves.length > 0) {
      analysis += `üõ°Ô∏è –û–ü–ê–°–ù–û–°–¢–¨! –ù—É–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å: ${blockingMoves.map(m => `(${m.row},${m.col})`).join(', ')}\n`;
    }
    
    if (centerControl === aiSide) {
      analysis += '‚úÖ –¢—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—à—å —Ü–µ–Ω—Ç—Ä - –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è!\n';
    } else if (centerControl === opponentSide) {
      analysis += '‚ö†Ô∏è –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ü–µ–Ω—Ç—Ä - –Ω—É–∂–Ω–∞ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å\n';
    } else {
      analysis += 'üéØ –¶–µ–Ω—Ç—Ä —Å–≤–æ–±–æ–¥–µ–Ω - —Å—Ç–æ–∏—Ç –µ–≥–æ –∑–∞–Ω—è—Ç—å\n';
    }
    
    return analysis.trim() || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –ø—Ä–∏–º–µ–Ω—è–π –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é';
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ö–æ–¥–∞
   * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   * @param {string} aiSide - –°—Ç–æ—Ä–æ–Ω–∞ AI
   * @param {Array} availableMoves - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã
   * @returns {string} –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
   */
  generateTacticalAnalysis(gameState, aiSide, availableMoves) {
    const opponentSide = aiSide === 'x' ? 'o' : 'x';
    const analysis = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Ö–æ–¥—ã
    const winningMoves = this.findWinningMoves(gameState.board, aiSide);
    if (winningMoves.length > 0) {
      analysis.push(`üèÜ –í–´–ò–ì–†–ê–ô –ù–ï–ú–ï–î–õ–ï–ù–ù–û: ${winningMoves.map(m => `(${m.row},${m.col})`).join(', ')}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ —Ö–æ–¥—ã
    const blockingMoves = this.findWinningMoves(gameState.board, opponentSide);
    if (blockingMoves.length > 0) {
      analysis.push(`üõ°Ô∏è –ó–ê–ë–õ–û–ö–ò–†–£–ô –£–ì–†–û–ó–£: ${blockingMoves.map(m => `(${m.row},${m.col})`).join(', ')}`);
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—Ç—Ä–∞
    if (gameState.board[1][1] === null) {
      analysis.push('üéØ –¶–ï–ù–¢–† –°–í–û–ë–û–î–ï–ù: (1,1) - –∑–∞–π–º–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è');
    }
    
    // –ê–Ω–∞–ª–∏–∑ —É–≥–ª–æ–≤
    const availableCorners = availableMoves.filter(m => 
      (m.row === 0 || m.row === 2) && (m.col === 0 || m.col === 2)
    );
    if (availableCorners.length > 0) {
      analysis.push(`üè∞ –î–û–°–¢–£–ü–ù–´–ï –£–ì–õ–´: ${availableCorners.map(m => `(${m.row},${m.col})`).join(', ')}`);
    }
    
    return analysis.join('\n') || '–í—ã–±–µ—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ö–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏';
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞
   * @param {Array} board - –î–æ—Å–∫–∞
   * @param {string} player - –ò–≥—Ä–æ–∫
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Ö–æ–¥–æ–≤
   */
  findWinningMoves(board, player) {
    const winningMoves = [];

    for (let row = 0; row < 3; row++) {
      for (let col = 0; col < 3; col++) {
        if (board[row][col] === null) {
          // –í—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º —Ö–æ–¥
          const testBoard = board.map(r => [...r]);
          testBoard[row][col] = player;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –ª–∏ —ç—Ç–æ—Ç —Ö–æ–¥
          if (this.checkWinner(testBoard) === player) {
            winningMoves.push({ row, col });
          }
        }
      }
    }

    return winningMoves;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
   * @param {Array} board - –î–æ—Å–∫–∞ 3x3
   * @returns {string|null} –°–∏–º–≤–æ–ª –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–ª–∏ null
   */
  checkWinner(board) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏
    for (let row = 0; row < 3; row++) {
      if (board[row][0] && 
          board[row][0] === board[row][1] && 
          board[row][1] === board[row][2]) {
        return board[row][0];
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±—Ü—ã
    for (let col = 0; col < 3; col++) {
      if (board[0][col] && 
          board[0][col] === board[1][col] && 
          board[1][col] === board[2][col]) {
        return board[0][col];
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    if (board[0][0] && 
        board[0][0] === board[1][1] && 
        board[1][1] === board[2][2]) {
      return board[0][0];
    }

    if (board[0][2] && 
        board[0][2] === board[1][1] && 
        board[1][1] === board[2][0]) {
      return board[0][2];
    }

    return null;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç AI –¥–ª—è –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤
   * @param {string} response - –û—Ç–≤–µ—Ç –æ—Ç AI
   * @returns {Object} –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
   */
  parseAIResponse(response) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
      const parsed = super.parseAIResponse(response);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤
      if (parsed.move && typeof parsed.move === 'string') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç "row,col"
        const moveMatch = parsed.move.match(/^(\d),(\d)$/);
        if (!moveMatch) {
          throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–æ–¥–∞: ${parsed.move}. –û–∂–∏–¥–∞–µ—Ç—Å—è "row,col"`);
        }
        
        const row = parseInt(moveMatch[1]);
        const col = parseInt(moveMatch[2]);
        
        if (row < 0 || row > 2 || col < 0 || col > 2) {
          throw new Error(`–•–æ–¥ –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü –¥–æ—Å–∫–∏: ${parsed.move}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0-2`);
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        parsed.moveObject = { row, col };
      }
      
      return parsed;
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤: ${error.message}`);
    }
  }
}

module.exports = TicTacToePromptBuilder; 