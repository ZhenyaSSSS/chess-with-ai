const { GoogleGenerativeAI } = require('@google/generative-ai');
const { Chess } = require('chess.js');

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É fetch –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Node.js
if (!globalThis.fetch) {
  globalThis.fetch = require('node-fetch');
}

class AIService {
  constructor() {
    this.maxAttempts = 3;
    this.defaultStrategy = '–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Ç–∏—é —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ñ–∏–≥—É—Ä –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–Ω—Ç—Ä–∞. –ü–ª–∞–Ω: –±—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ–ª—è, –∑–∞—Ç–µ–º —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.';
    // –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini 2.5 (–±–µ—Ç–∞ API)
    this.availableModels = {
      'gemini-2.5-pro-preview-06-05': {
        name: 'Gemini 2.5 Pro Preview',
        description: '–ù–æ–≤–µ–π—à–∞—è –∏ —Å–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å Gemini',
        maxTokens: 2048,
        temperature: 0.7
      },
      'gemini-2.5-pro-preview-05-06': {
        name: 'Gemini 2.5 Pro Preview 05-06',
        description: '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è 2.5 Pro',
        maxTokens: 2048,
        temperature: 0.7
      },
      'gemini-2.5-flash-preview-05-20': {
        name: 'Gemini 2.5 Flash Preview 05-20',
        description: '–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å Gemini 2.5',
        maxTokens: 1024,
        temperature: 0.7
      },
      'gemini-2.5-flash-preview-04-17': {
        name: 'Gemini 2.5 Flash Preview 04-17',
        description: '–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è Flash 2.5',
        maxTokens: 1024,
        temperature: 0.7
      },
      'gemini-1.5-pro': {
        name: 'Gemini 1.5 Pro (Legacy)',
        description: '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –º–æ–¥–µ–ª—å 1.5',
        maxTokens: 1024,
        temperature: 0.7
      },
      'gemini-1.5-flash': {
        name: 'Gemini 1.5 Flash (Legacy)',
        description: '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å',
        maxTokens: 1024,
        temperature: 0.7
      }
    };
  }

    /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ Google API
   * @param {string} apiKey - API –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
   */
  async getAvailableModels(apiKey) {
    try {
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ Google API...');
      
      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Google API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${apiKey}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        if (response.status === 403 || response.status === 401) {
          throw new Error('API_KEY_INVALID');
        }
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log(`üì° –ü–æ–ª—É—á–µ–Ω–æ ${data.models?.length || 0} –º–æ–¥–µ–ª–µ–π –æ—Ç Google API`);

      if (!data.models || !Array.isArray(data.models)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API Google');
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ generative –º–æ–¥–µ–ª–∏ (—Ç–µ —á—Ç–æ –º–æ–≥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç)
      const generativeModels = data.models.filter(model => 
        model.supportedGenerationMethods?.includes('generateContent') &&
        model.name.includes('gemini')
      );

      console.log(`ü§ñ –ù–∞–π–¥–µ–Ω–æ ${generativeModels.length} –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö Gemini –º–æ–¥–µ–ª–µ–π`);

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
      const testedModels = [];
      
      for (const model of generativeModels) {
        const modelId = model.name.replace('models/', '');
        
        console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: ${modelId}...`);
        
        try {
          const genAI = new GoogleGenerativeAI(apiKey);
          const testModel = genAI.getGenerativeModel({ 
            model: modelId,
            generationConfig: {
              maxOutputTokens: 5,
              temperature: 0.1
            }
          });
          
          // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
          const testResult = await Promise.race([
            testModel.generateContent('Test'),
            new Promise((_, reject) => 
              setTimeout(() => reject(new Error('Timeout')), 3000)
            )
          ]);
          
          if (testResult?.response?.text()) {
            console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${modelId} —Ä–∞–±–æ—Ç–∞–µ—Ç`);
            
            testedModels.push({
              id: modelId,
              name: this.getModelDisplayName(modelId),
              description: this.getModelDescription(modelId, model),
              available: true,
              status: 'working',
              version: this.getModelVersion(modelId),
              capabilities: model.supportedGenerationMethods || [],
              inputTokenLimit: model.inputTokenLimit || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
              outputTokenLimit: model.outputTokenLimit || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            });
          }
          
        } catch (error) {
          console.log(`‚ùå –ú–æ–¥–µ–ª—å ${modelId} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${error.message}`);
          
          let errorType = 'unknown';
          if (error.message.includes('not found') || error.message.includes('404')) {
            errorType = 'not_found';
          } else if (error.message.includes('quota') || error.message.includes('QUOTA_EXCEEDED')) {
            errorType = 'quota_exceeded';
          } else if (error.message.includes('API_KEY')) {
            errorType = 'api_key_invalid';
          } else if (error.message.includes('Timeout')) {
            errorType = 'timeout';
          }
          
          testedModels.push({
            id: modelId,
            name: this.getModelDisplayName(modelId),
            description: this.getModelDescription(modelId, model),
            available: false,
            status: errorType,
            error: this.getErrorMessage(errorType, error.message),
            version: this.getModelVersion(modelId),
            capabilities: model.supportedGenerationMethods || [],
            inputTokenLimit: model.inputTokenLimit || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            outputTokenLimit: model.outputTokenLimit || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
          });
        }
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–∏–µ, –ø–æ—Ç–æ–º –ø–æ –≤–µ—Ä—Å–∏–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
      testedModels.sort((a, b) => {
        if (a.available !== b.available) {
          return b.available - a.available; // –†–∞–±–æ—á–∏–µ —Å–≤–µ—Ä—Ö—É
        }
        return b.version.localeCompare(a.version); // –ù–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ —Å–≤–µ—Ä—Ö—É
      });
      
      console.log(`‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω–æ: ${testedModels.filter(m => m.available).length}/${testedModels.length} –º–æ–¥–µ–ª–µ–π`);
      return testedModels;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:', error);
      
      // Fallback –Ω–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π...');
      
      return [
        {
          id: 'gemini-2.5-pro-preview-05-06',
          name: 'Gemini 2.5 Pro Preview 05-06',
          description: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è 2.5 Pro',
          available: true,
          status: 'fallback',
          version: '2.5',
          capabilities: ['generateContent'],
          inputTokenLimit: '–î–æ 1M —Ç–æ–∫–µ–Ω–æ–≤',
          outputTokenLimit: '–î–æ 8K —Ç–æ–∫–µ–Ω–æ–≤'
        },
        {
          id: 'gemini-1.5-pro',
          name: 'Gemini 1.5 Pro (Legacy)',
          description: '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å',
          available: true,
          status: 'fallback',
          version: '1.5',
          capabilities: ['generateContent'],
          inputTokenLimit: '–î–æ 2M —Ç–æ–∫–µ–Ω–æ–≤',
          outputTokenLimit: '–î–æ 8K —Ç–æ–∫–µ–Ω–æ–≤'
        }
      ];
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
   */
  getModelDisplayName(modelId) {
    if (modelId.includes('gemini-2.5-pro')) {
      return `Gemini 2.5 Pro ${modelId.includes('preview') ? 'Preview' : ''}`;
    }
    if (modelId.includes('gemini-2.5-flash')) {
      return `Gemini 2.5 Flash ${modelId.includes('preview') ? 'Preview' : ''}`;
    }
    if (modelId.includes('gemini-1.5-pro')) {
      return 'Gemini 1.5 Pro';
    }
    if (modelId.includes('gemini-1.5-flash')) {
      return 'Gemini 1.5 Flash';
    }
    return modelId.replace('gemini-', 'Gemini ').replace('-', ' ');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
   */
  getModelDescription(modelId, apiModel) {
    if (modelId.includes('2.5')) {
      if (modelId.includes('pro')) {
        return '–ù–æ–≤–µ–π—à–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏';
      }
      if (modelId.includes('flash')) {
        return '–ë—ã—Å—Ç—Ä–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á';
      }
    }
    if (modelId.includes('1.5')) {
      return '–°—Ç–∞–±–∏–ª—å–Ω–∞—è legacy –º–æ–¥–µ–ª—å';
    }
    return apiModel.description || '–ú–æ–¥–µ–ª—å Google Gemini';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  getModelVersion(modelId) {
    if (modelId.includes('2.5')) return '2.5';
    if (modelId.includes('1.5')) return '1.5';
    if (modelId.includes('1.0')) return '1.0';
    return '0.0';
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  getErrorMessage(errorType, originalError) {
    switch (errorType) {
      case 'not_found':
        return '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
      case 'quota_exceeded':
        return '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤';
      case 'api_key_invalid':
        return '–ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º';
      case 'timeout':
        return '–¢–∞–π–º–∞—É—Ç (–º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ–π)';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini AI
   * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   * @param {string} previousError - –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
   * @returns {string} –ü—Ä–æ–º–ø—Ç –¥–ª—è AI
   */
  createPrompt(gameState, previousError = null) {
    const { fen, history, strategy, aiSide } = gameState;
    
    const chess = new Chess(fen);
    const possibleMoves = chess.moves({ verbose: true }).map(m => m.san);
    const turn = chess.turn() === 'w' ? 'White' : 'Black';
    const isCheck = chess.inCheck();
    const isGameOver = chess.isGameOver();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    const materialBalance = this.calculateMaterialBalance(chess);
    const gamePhase = this.determineGamePhase(chess);
    const kingPosition = this.analyzeKingSafety(chess);
    const centerControl = this.analyzeCenterControl(chess);
    
    let prompt = `–¢—ã - –≥—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä –ø–æ —à–∞—Ö–º–∞—Ç–∞–º –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è. –¢—ã –∏–≥—Ä–∞–µ—à—å –∑–∞ ${aiSide === 'white' ? '–ë–ï–õ–´–•' : '–ß–ï–†–ù–´–•'}.

**–°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ò:**

üéØ **–ì–õ–ê–í–ù–ê–Ø –¶–ï–õ–¨:** –í—ã–∏–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å.

üìä **–¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:**
- FEN: ${fen}
- –°–µ–π—á–∞—Å —Ö–æ–¥—è—Ç: ${turn} (${(turn === 'White' && aiSide === 'white') || (turn === 'Black' && aiSide === 'black') ? '–≠–¢–û –¢–´' : '–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫'})
- –§–∞–∑–∞ –∏–≥—Ä—ã: ${gamePhase}
- –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${materialBalance}
- ${isCheck ? '‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –ö–æ—Ä–æ–ª—å –ø–æ–¥ —à–∞—Ö–æ–º!' : '‚úÖ –ö–æ—Ä–æ–ª—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'}
- ${isGameOver ? 'üîö –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!' : '‚ö° –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è'}

üè∞ **–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ö–û–†–û–õ–Ø:**
${kingPosition}

üèõÔ∏è **–ö–û–ù–¢–†–û–õ–¨ –¶–ï–ù–¢–†–ê:**
${centerControl}

üìà **–ò–°–¢–û–†–ò–Ø –ü–ê–†–¢–ò–ò (PGN):**
${history || '–ü–∞—Ä—Ç–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∞—Å—å - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å —Ç–æ–Ω!'}

üß† **–¢–í–û–Ø –¢–ï–ö–£–©–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:**
"${strategy}"

üéØ **–î–û–°–¢–£–ü–ù–´–ï –•–û–î–´:**
${possibleMoves.join(', ')}

**–ì–õ–£–ë–û–ö–ò–ô –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:**

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–∑–∏—Ü–∏—é –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏:

1Ô∏è‚É£ **–¢–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #1):**
   - –ï—Å—Ç—å –ª–∏ —É–≥—Ä–æ–∑—ã –º–∞—Ç–∞ –≤ 1-3 —Ö–æ–¥–∞?
   - –ú–æ–∂–Ω–æ –ª–∏ –≤—ã–∏–≥—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª (—Å–≤—è–∑–∫–∏, –≤–∏–ª–∫–∏, –¥–≤–æ–π–Ω—ã–µ —É–¥–∞—Ä—ã)?
   - –ï—Å—Ç—å –ª–∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–æ—Ç–∏–≤—ã (—Ä–µ–Ω—Ç–≥–µ–Ω, –∑–∞–≤–ª–µ—á–µ–Ω–∏–µ, –æ—Ç–≤–ª–µ—á–µ–Ω–∏–µ)?

2Ô∏è‚É£ **–ú–ê–¢–ï–†–ò–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê:**
   - –¢–µ–∫—É—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
   - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ–Ω–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
   - –ö–∞—á–µ—Å—Ç–≤–æ —Ñ–∏–≥—É—Ä vs –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

3Ô∏è‚É£ **–ü–û–ó–ò–¶–ò–û–ù–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï:**
   - –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∏–≥—É—Ä
   - –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π –∏ –ª–∏–Ω–∏–π
   - –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–∞–±–æ—Å—Ç–µ–π –≤ –ª–∞–≥–µ—Ä–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞

4Ô∏è‚É£ **–ü–ï–®–ï–ß–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:**
   - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–Ω—ã—Ö –ø–µ—à–µ–∫
   - –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–∞–±—ã—Ö –ø–µ—à–µ–∫
   - –ü–µ—à–µ—á–Ω—ã–µ –ø—Ä–æ—Ä—ã–≤—ã

5Ô∏è‚É£ **–î–û–õ–ì–û–°–†–û–ß–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:**
   - –ü–ª–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 3-5 —Ö–æ–¥–æ–≤
   - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–Ω–¥—à–ø–∏–ª—é
   - –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤

**–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–¢–í–ï–¢–£:**
–•–æ–¥ –î–û–õ–ñ–ï–ù –±—ã—Ç—å –¢–û–ß–ù–û –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ. –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –≤–∫–ª—é—á–∞—Ç—å:
- –ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ö–æ–¥–∞
- –ü–ª–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 2-3 —Ö–æ–¥–∞
- –û—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫—É—é –∏–¥–µ—é

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ JSON:
{
  "move": "–¢–æ—á–Ω—ã–π —Ö–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö",
  "strategy": "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ö–æ–¥–∞ + –ø–ª–∞–Ω –Ω–∞ 2-3 —Ö–æ–¥–∞ + –≥–ª–∞–≤–Ω–∞—è –∏–¥–µ—è (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤)"
}

üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Ö–æ–¥ –î–û–õ–ñ–ï–ù –±—ã—Ç—å –¢–û–ß–ù–û –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤! üö®`;

    if (previousError) {
      prompt += `\n\nüö® **–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò:**
–¢–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ö–æ–¥ –±—ã–ª –Ω–µ–≤–µ—Ä–Ω—ã–º. –û—à–∏–±–∫–∞: "${previousError}"
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ—Å–∫—É –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–±–µ—Ä–∏ –î–†–£–ì–û–ô, –ö–û–†–†–ï–ö–¢–ù–´–ô —Ö–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤.`;
    }

    return prompt;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–∑–∏—Ü–∏–∏
   * @param {Chess} chess - –û–±—ä–µ–∫—Ç –∏–≥—Ä—ã
   * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
   */
  calculateMaterialBalance(chess) {
    const pieceValues = { p: 1, n: 3, b: 3, r: 5, q: 9, k: 0 };
    let whiteValue = 0, blackValue = 0;
    
    const board = chess.board();
    for (let i = 0; i < 8; i++) {
      for (let j = 0; j < 8; j++) {
        const piece = board[i][j];
        if (piece) {
          const value = pieceValues[piece.type];
          if (piece.color === 'w') {
            whiteValue += value;
          } else {
            blackValue += value;
          }
        }
      }
    }
    
    const difference = whiteValue - blackValue;
    if (Math.abs(difference) <= 1) {
      return `–†–∞–≤–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª (${whiteValue}:${blackValue})`;
    } else if (difference > 0) {
      return `–ë–µ–ª—ã–µ +${difference} (${whiteValue}:${blackValue})`;
    } else {
      return `–ß–µ—Ä–Ω—ã–µ +${Math.abs(difference)} (${whiteValue}:${blackValue})`;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–∞–∑—É –∏–≥—Ä—ã
   * @param {Chess} chess - –û–±—ä–µ–∫—Ç –∏–≥—Ä—ã
   * @returns {string} –§–∞–∑–∞ –∏–≥—Ä—ã
   */
  determineGamePhase(chess) {
    const history = chess.history();
    const moveCount = history.length;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—è–∂–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã –Ω–∞ –¥–æ—Å–∫–µ
    const board = chess.board();
    let heavyPieces = 0;
    
    for (let i = 0; i < 8; i++) {
      for (let j = 0; j < 8; j++) {
        const piece = board[i][j];
        if (piece && (piece.type === 'q' || piece.type === 'r')) {
          heavyPieces++;
        }
      }
    }
    
    if (moveCount < 20 && heavyPieces >= 4) {
      return "–î–µ–±—é—Ç - —Ä–∞–∑–≤–∏—Ç–∏–µ —Ñ–∏–≥—É—Ä";
    } else if (moveCount < 40 && heavyPieces >= 2) {
      return "–ú–∏—Ç—Ç–µ–ª—å—à–ø–∏–ª—å - –±–æ—Ä—å–±–∞ –∑–∞ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ";
    } else {
      return "–≠–Ω–¥—à–ø–∏–ª—å - —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞";
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ–ª—è
   * @param {Chess} chess - –û–±—ä–µ–∫—Ç –∏–≥—Ä—ã
   * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ—Ä–æ–ª—è
   */
  analyzeKingSafety(chess) {
    const turn = chess.turn();
    const fen = chess.fen();
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ä–æ–∫–∏—Ä–æ–≤–∫–∏
    const castlingRights = fen.split(' ')[2];
    const whiteCanCastle = castlingRights.includes('K') || castlingRights.includes('Q');
    const blackCanCastle = castlingRights.includes('k') || castlingRights.includes('q');
    
    let safety = "";
    if (turn === 'w') {
      if (whiteCanCastle) {
        safety = "–ë–µ–ª—ã–π –∫–æ—Ä–æ–ª—å –µ—â–µ –º–æ–∂–µ—Ç —Ä–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è - –Ω—É–∂–Ω–æ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å";
      } else {
        safety = "–ë–µ–ª—ã–π –∫–æ—Ä–æ–ª—å —É–∂–µ —Ä–æ–∫–∏—Ä–æ–≤–∞–ª—Å—è –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–ª –ø—Ä–∞–≤–æ - –æ—Ü–µ–Ω–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å";
      }
    } else {
      if (blackCanCastle) {
        safety = "–ß–µ—Ä–Ω—ã–π –∫–æ—Ä–æ–ª—å –µ—â–µ –º–æ–∂–µ—Ç —Ä–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è - –Ω—É–∂–Ω–æ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å";
      } else {
        safety = "–ß–µ—Ä–Ω—ã–π –∫–æ—Ä–æ–ª—å —É–∂–µ —Ä–æ–∫–∏—Ä–æ–≤–∞–ª—Å—è –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–ª –ø—Ä–∞–≤–æ - –æ—Ü–µ–Ω–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å";
      }
    }
    
    if (chess.inCheck()) {
      safety += " ‚ö†Ô∏è –ö–û–†–û–õ–¨ –ü–û–î –®–ê–•–û–ú!";
    }
    
    return safety;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–Ω—Ç—Ä–∞
   * @param {Chess} chess - –û–±—ä–µ–∫—Ç –∏–≥—Ä—ã
   * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ü–µ–Ω—Ç—Ä–∞
   */
  analyzeCenterControl(chess) {
    const centerSquares = ['d4', 'd5', 'e4', 'e5'];
    let whiteControl = 0;
    let blackControl = 0;
    
    centerSquares.forEach(square => {
      const piece = chess.get(square);
      if (piece) {
        if (piece.color === 'w') whiteControl++;
        else blackControl++;
      }
    });
    
    if (whiteControl > blackControl) {
      return `–ë–µ–ª—ã–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ (${whiteControl}:${blackControl})`;
    } else if (blackControl > whiteControl) {
      return `–ß–µ—Ä–Ω—ã–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ (${whiteControl}:${blackControl})`;
    } else {
      return `–†–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–Ω—Ç—Ä–∞ (${whiteControl}:${blackControl})`;
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI
   * @param {string} responseText - –û—Ç–≤–µ—Ç –æ—Ç AI
   * @returns {Object} Parsed JSON –æ–±—ä–µ–∫—Ç
   */
  parseAIResponse(responseText) {
    try {
      // –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∫—Ä—É–∂–µ–Ω –¥—Ä—É–≥–∏–º —Ç–µ–∫—Å—Ç–æ–º)
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ AI');
      }

      const jsonStr = jsonMatch[0];
      const parsed = JSON.parse(jsonStr);

      if (!parsed.move || typeof parsed.move !== 'string') {
        throw new Error('–ü–æ–ª–µ "move" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π');
      }

      if (!parsed.strategy || typeof parsed.strategy !== 'string') {
        throw new Error('–ü–æ–ª–µ "strategy" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π');
      }

      // –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–æ 250 —Å–∏–º–≤–æ–ª–æ–≤ –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
      let strategy = parsed.strategy.trim();
      if (strategy.length > 250) {
        strategy = strategy.substring(0, 247) + '...';
      }

      return {
        move: parsed.move.trim(),
        strategy: strategy
      };

    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ AI: ${error.message}`);
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ö–æ–¥ AI –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
   * @param {string} move - –•–æ–¥ –≤ SAN –Ω–æ—Ç–∞—Ü–∏–∏
   * @param {string} fen - –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
   * @returns {boolean} true –µ—Å–ª–∏ —Ö–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–π
   */
  validateMove(move, fen) {
    try {
      const chess = new Chess(fen);
      const result = chess.move(move);
      return result !== null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ö–æ–¥–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ö–æ–¥ –æ—Ç AI —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
   * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ö–æ–¥–æ–º –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
   */
  async getAiMove(gameState) {
    const { fen, history, strategy, apiKey, model = 'gemini-2.5-pro-preview-05-06' } = gameState;

    if (!apiKey) {
      throw new Error('API_KEY_INVALID: API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
    }

    let genAI;
    try {
      genAI = new GoogleGenerativeAI(apiKey);
    } catch (error) {
      throw new Error('API_KEY_INVALID: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞');
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ gemini-2.5-pro-preview-05-06 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ª—É—á—à–µ –ø–æ –æ—Ç–∑—ã–≤–∞–º)
    const modelConfig = this.availableModels[model] || this.availableModels['gemini-2.5-pro-preview-05-06'];
    
    const aiModel = genAI.getGenerativeModel({ 
      model: model,
      generationConfig: {
        temperature: modelConfig.temperature,
        topP: 0.8,
        topK: 40,
        maxOutputTokens: modelConfig.maxTokens,
      }
    });

    let lastError = null;
    
    for (let attempt = 1; attempt <= this.maxAttempts; attempt++) {
      try {
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.maxAttempts} –ø–æ–ª—É—á–∏—Ç—å —Ö–æ–¥ –æ—Ç AI (–º–æ–¥–µ–ª—å: ${model})`);

        const prompt = this.createPrompt(
          { fen, history, strategy: strategy || this.defaultStrategy },
          lastError
        );

        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç AI...');
        const result = await aiModel.generateContent(prompt);
        const responseText = result.response.text();
        
        console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI:', responseText.substring(0, 200) + '...');

        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        const aiResponse = this.parseAIResponse(responseText);
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ö–æ–¥
        if (!this.validateMove(aiResponse.move, fen)) {
          lastError = `–•–æ–¥ "${aiResponse.move}" –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏`;
          console.warn(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}: ${lastError}`);
          
          if (attempt < this.maxAttempts) {
            continue; // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
          } else {
            throw new Error('AI_FAILED_TO_MOVE: –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
          }
        }

        // –•–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–π!
        console.log(`‚úÖ AI —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª —Ö–æ–¥: ${aiResponse.move}`);
        
        return {
          move: aiResponse.move,
          newStrategy: aiResponse.strategy,
          attempts: attempt,
          model: model
        };

      } catch (error) {
        console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π:`, error.message);

        // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ API
        if (error.message.includes('API_KEY_INVALID') || 
            error.message.includes('API key')) {
          throw new Error('API_KEY_INVALID: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞');
        }

        if (error.message.includes('quota') || 
            error.message.includes('QUOTA_EXCEEDED')) {
          throw new Error('QUOTA_EXCEEDED: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API');
        }

        // –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥–µ–ª—å—é - –ø—Ä–æ–±—É–µ–º fallback
        if (error.message.includes('not found') || error.message.includes('404')) {
          if (model !== 'gemini-1.5-pro' && attempt === 1) {
            console.log(`–ú–æ–¥–µ–ª—å ${model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º gemini-1.5-pro...`);
            gameState.model = 'gemini-1.5-pro';
            return this.getAiMove(gameState);
          }
        }

        lastError = error.message;

        if (attempt >= this.maxAttempts) {
          throw new Error(`AI_FAILED_TO_MOVE: ${lastError}`);
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
  }
}

module.exports = new AIService(); 