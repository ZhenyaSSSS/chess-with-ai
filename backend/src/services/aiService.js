const { GoogleGenerativeAI } = require('@google/generative-ai');
const { Chess } = require('chess.js');

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É fetch –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Node.js
if (!globalThis.fetch) {
  globalThis.fetch = require('node-fetch');
}

class AIService {
  constructor() {
    this.maxAttempts = 3;
    this.defaultStrategy = 'I will play strategically to win this chess game.';
    // –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini 2.5 (–±–µ—Ç–∞ API)
    this.availableModels = {
      'gemini-2.5-pro-preview-06-05': {
        name: 'Gemini 2.5 Pro Preview',
        description: '–ù–æ–≤–µ–π—à–∞—è –∏ —Å–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å Gemini',
        maxTokens: 2048,
        temperature: 0.7
      },
      'gemini-2.5-pro-preview-05-06': {
        name: 'Gemini 2.5 Pro Preview 05-06',
        description: '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è 2.5 Pro',
        maxTokens: 2048,
        temperature: 0.7
      },
      'gemini-2.5-flash-preview-05-20': {
        name: 'Gemini 2.5 Flash Preview 05-20',
        description: '–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å Gemini 2.5',
        maxTokens: 1024,
        temperature: 0.7
      },
      'gemini-2.5-flash-preview-04-17': {
        name: 'Gemini 2.5 Flash Preview 04-17',
        description: '–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è Flash 2.5',
        maxTokens: 1024,
        temperature: 0.7
      },
      'gemini-1.5-pro': {
        name: 'Gemini 1.5 Pro (Legacy)',
        description: '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –º–æ–¥–µ–ª—å 1.5',
        maxTokens: 1024,
        temperature: 0.7
      },
      'gemini-1.5-flash': {
        name: 'Gemini 1.5 Flash (Legacy)',
        description: '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å',
        maxTokens: 1024,
        temperature: 0.7
      }
    };
  }

    /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ Google API
   * @param {string} apiKey - API –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
   */
  async getAvailableModels(apiKey) {
    try {
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ Google API...');
      
      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Google API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${apiKey}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        if (response.status === 403 || response.status === 401) {
          throw new Error('API_KEY_INVALID');
        }
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log(`üì° –ü–æ–ª—É—á–µ–Ω–æ ${data.models?.length || 0} –º–æ–¥–µ–ª–µ–π –æ—Ç Google API`);

      if (!data.models || !Array.isArray(data.models)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API Google');
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ generative –º–æ–¥–µ–ª–∏ (—Ç–µ —á—Ç–æ –º–æ–≥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç)
      const generativeModels = data.models.filter(model => 
        model.supportedGenerationMethods?.includes('generateContent') &&
        model.name.includes('gemini')
      );

      console.log(`ü§ñ –ù–∞–π–¥–µ–Ω–æ ${generativeModels.length} –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö Gemini –º–æ–¥–µ–ª–µ–π`);

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
      const testedModels = [];
      
      for (const model of generativeModels) {
        const modelId = model.name.replace('models/', '');
        
        console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: ${modelId}...`);
        
        try {
          const genAI = new GoogleGenerativeAI(apiKey);
          const testModel = genAI.getGenerativeModel({ 
            model: modelId,
            generationConfig: {
              maxOutputTokens: 5,
              temperature: 0.1
            }
          });
          
          // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
          const testResult = await Promise.race([
            testModel.generateContent('Test'),
            new Promise((_, reject) => 
              setTimeout(() => reject(new Error('Timeout')), 3000)
            )
          ]);
          
          if (testResult?.response?.text()) {
            console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${modelId} —Ä–∞–±–æ—Ç–∞–µ—Ç`);
            
            testedModels.push({
              id: modelId,
              name: this.getModelDisplayName(modelId),
              description: this.getModelDescription(modelId, model),
              available: true,
              status: 'working',
              version: this.getModelVersion(modelId),
              capabilities: model.supportedGenerationMethods || [],
              inputTokenLimit: model.inputTokenLimit || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
              outputTokenLimit: model.outputTokenLimit || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            });
          }
          
        } catch (error) {
          console.log(`‚ùå –ú–æ–¥–µ–ª—å ${modelId} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${error.message}`);
          
          let errorType = 'unknown';
          if (error.message.includes('not found') || error.message.includes('404')) {
            errorType = 'not_found';
          } else if (error.message.includes('quota') || error.message.includes('QUOTA_EXCEEDED')) {
            errorType = 'quota_exceeded';
          } else if (error.message.includes('API_KEY')) {
            errorType = 'api_key_invalid';
          } else if (error.message.includes('Timeout')) {
            errorType = 'timeout';
          }
          
          testedModels.push({
            id: modelId,
            name: this.getModelDisplayName(modelId),
            description: this.getModelDescription(modelId, model),
            available: false,
            status: errorType,
            error: this.getErrorMessage(errorType, error.message),
            version: this.getModelVersion(modelId),
            capabilities: model.supportedGenerationMethods || [],
            inputTokenLimit: model.inputTokenLimit || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            outputTokenLimit: model.outputTokenLimit || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
          });
        }
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–∏–µ, –ø–æ—Ç–æ–º –ø–æ –≤–µ—Ä—Å–∏–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
      testedModels.sort((a, b) => {
        if (a.available !== b.available) {
          return b.available - a.available; // –†–∞–±–æ—á–∏–µ —Å–≤–µ—Ä—Ö—É
        }
        return b.version.localeCompare(a.version); // –ù–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ —Å–≤–µ—Ä—Ö—É
      });
      
      console.log(`‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω–æ: ${testedModels.filter(m => m.available).length}/${testedModels.length} –º–æ–¥–µ–ª–µ–π`);
      return testedModels;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:', error);
      
      // Fallback –Ω–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π...');
      
      return [
        {
          id: 'gemini-2.5-pro-preview-05-06',
          name: 'Gemini 2.5 Pro Preview 05-06',
          description: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è 2.5 Pro',
          available: true,
          status: 'fallback',
          version: '2.5',
          capabilities: ['generateContent'],
          inputTokenLimit: '–î–æ 1M —Ç–æ–∫–µ–Ω–æ–≤',
          outputTokenLimit: '–î–æ 8K —Ç–æ–∫–µ–Ω–æ–≤'
        },
        {
          id: 'gemini-1.5-pro',
          name: 'Gemini 1.5 Pro (Legacy)',
          description: '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å',
          available: true,
          status: 'fallback',
          version: '1.5',
          capabilities: ['generateContent'],
          inputTokenLimit: '–î–æ 2M —Ç–æ–∫–µ–Ω–æ–≤',
          outputTokenLimit: '–î–æ 8K —Ç–æ–∫–µ–Ω–æ–≤'
        }
      ];
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
   */
  getModelDisplayName(modelId) {
    if (modelId.includes('gemini-2.5-pro')) {
      return `Gemini 2.5 Pro ${modelId.includes('preview') ? 'Preview' : ''}`;
    }
    if (modelId.includes('gemini-2.5-flash')) {
      return `Gemini 2.5 Flash ${modelId.includes('preview') ? 'Preview' : ''}`;
    }
    if (modelId.includes('gemini-1.5-pro')) {
      return 'Gemini 1.5 Pro';
    }
    if (modelId.includes('gemini-1.5-flash')) {
      return 'Gemini 1.5 Flash';
    }
    return modelId.replace('gemini-', 'Gemini ').replace('-', ' ');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
   */
  getModelDescription(modelId, apiModel) {
    if (modelId.includes('2.5')) {
      if (modelId.includes('pro')) {
        return '–ù–æ–≤–µ–π—à–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏';
      }
      if (modelId.includes('flash')) {
        return '–ë—ã—Å—Ç—Ä–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á';
      }
    }
    if (modelId.includes('1.5')) {
      return '–°—Ç–∞–±–∏–ª—å–Ω–∞—è legacy –º–æ–¥–µ–ª—å';
    }
    return apiModel.description || '–ú–æ–¥–µ–ª—å Google Gemini';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  getModelVersion(modelId) {
    if (modelId.includes('2.5')) return '2.5';
    if (modelId.includes('1.5')) return '1.5';
    if (modelId.includes('1.0')) return '1.0';
    return '0.0';
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  getErrorMessage(errorType, originalError) {
    switch (errorType) {
      case 'not_found':
        return '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
      case 'quota_exceeded':
        return '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤';
      case 'api_key_invalid':
        return '–ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º';
      case 'timeout':
        return '–¢–∞–π–º–∞—É—Ç (–º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ–π)';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini AI
   * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   * @param {string} previousError - –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
   * @returns {string} –ü—Ä–æ–º–ø—Ç –¥–ª—è AI
   */
  createPrompt(gameState, previousError = null) {
    const { fen, history, strategy } = gameState;
    
    const chess = new Chess(fen);
    const possibleMoves = chess.moves({ verbose: true }).map(m => m.san);
    const turn = chess.turn() === 'w' ? 'White' : 'Black';
    const isCheck = chess.inCheck();
    const isGameOver = chess.isGameOver();
    
    let prompt = `–¢—ã - –≥—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä –ø–æ —à–∞—Ö–º–∞—Ç–∞–º –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è, –∏–≥—Ä–∞—é—â–∏–π –ø–∞—Ä—Ç–∏—é.

**–¢–í–û–Ø –¶–ï–õ–¨:** –í—ã–∏–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é, –∏–≥—Ä–∞—è –Ω–∞–∏–ª—É—á—à–∏–µ —Ö–æ–¥—ã.

**–¢–ï–ö–£–©–ê–Ø –ü–û–ó–ò–¶–ò–Ø:**
- FEN: ${fen}
- –•–æ–¥ –¥–µ–ª–∞—é—Ç: ${turn} (—ç—Ç–æ —Ç—ã)
- ${isCheck ? '‚ö†Ô∏è –®–ê–•! –ö–æ—Ä–æ–ª—å –ø–æ–¥ –∞—Ç–∞–∫–æ–π!' : ''}
- ${isGameOver ? 'üîö –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!' : ''}
- –ò—Å—Ç–æ—Ä–∏—è –ø–∞—Ä—Ç–∏–∏ (PGN): ${history || '–ü–∞—Ä—Ç–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∞—Å—å'}

**–¢–í–û–Ø –î–û–õ–ì–û–°–†–û–ß–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:**
"${strategy}"

**–î–û–°–¢–£–ü–ù–´–ï –•–û–î–´:**
${possibleMoves.join(', ')}

**–ò–ù–°–¢–†–£–ö–¶–ò–Ø:**
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–∑–∏—Ü–∏—é –ø–æ—à–∞–≥–æ–≤–æ:
1. –û—Ü–µ–Ω–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
2. –ü—Ä–æ–≤–µ—Ä—å —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–≥—Ä–æ–∑—ã (—à–∞—Ö, –º–∞—Ç, —Å–≤—è–∑–∫–∏, –≤–∏–ª–∫–∏)
3. –û—Ü–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã (—Ü–µ–Ω—Ç—Ä, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ–ª—è, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—à–µ–∫)
4. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤—ã–±–µ—Ä–∏ —Ö–æ–¥ –¢–û–õ–¨–ö–û –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ –≤—ã—à–µ

**–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:**
- –•–æ–¥ –î–û–õ–ñ–ï–ù –±—ã—Ç—å –¢–û–ß–ù–û —Ç–∞–∫–∏–º, –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–Ω—É—é SAN –Ω–æ—Ç–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
- –ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è –≤ —Ö–æ–¥–µ, –≤—ã–±–µ—Ä–∏ —Å–∞–º—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö

–¢–≤–æ–π –æ—Ç–≤–µ—Ç –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º —Å –¥–≤—É–º—è –∫–ª—é—á–∞–º–∏:
{
  "move": "–•–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ (–¢–û–ß–ù–û –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ —Å–ø–∏—Å–∫–µ)",
  "strategy": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –º—ã—Å–ª—å –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ö–æ–¥–æ–≤ (–∫—Ä–∞—Ç–∫–æ, –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)"
}

üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Ö–æ–¥ –î–û–õ–ñ–ï–ù –±—ã—Ç—å –¢–û–ß–ù–û –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ –≤—ã—à–µ! üö®`;

    if (previousError) {
      prompt += `\n\nüö® **–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò:**
–¢–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ö–æ–¥ –±—ã–ª –Ω–µ–≤–µ—Ä–Ω—ã–º. –û—à–∏–±–∫–∞: "${previousError}"
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ—Å–∫—É –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–±–µ—Ä–∏ –î–†–£–ì–û–ô, –ö–û–†–†–ï–ö–¢–ù–´–ô —Ö–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤.`;
    }

    return prompt;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI
   * @param {string} responseText - –û—Ç–≤–µ—Ç –æ—Ç AI
   * @returns {Object} Parsed JSON –æ–±—ä–µ–∫—Ç
   */
  parseAIResponse(responseText) {
    try {
      // –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∫—Ä—É–∂–µ–Ω –¥—Ä—É–≥–∏–º —Ç–µ–∫—Å—Ç–æ–º)
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ AI');
      }

      const jsonStr = jsonMatch[0];
      const parsed = JSON.parse(jsonStr);

      if (!parsed.move || typeof parsed.move !== 'string') {
        throw new Error('–ü–æ–ª–µ "move" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π');
      }

      if (!parsed.strategy || typeof parsed.strategy !== 'string') {
        throw new Error('–ü–æ–ª–µ "strategy" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π');
      }

      return {
        move: parsed.move.trim(),
        strategy: parsed.strategy.trim()
      };

    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ AI: ${error.message}`);
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ö–æ–¥ AI –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
   * @param {string} move - –•–æ–¥ –≤ SAN –Ω–æ—Ç–∞—Ü–∏–∏
   * @param {string} fen - –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
   * @returns {boolean} true –µ—Å–ª–∏ —Ö–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–π
   */
  validateMove(move, fen) {
    try {
      const chess = new Chess(fen);
      const result = chess.move(move);
      return result !== null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ö–æ–¥–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ö–æ–¥ –æ—Ç AI —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
   * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ö–æ–¥–æ–º –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
   */
  async getAiMove(gameState) {
    const { fen, history, strategy, apiKey, model = 'gemini-2.5-pro-preview-05-06' } = gameState;

    if (!apiKey) {
      throw new Error('API_KEY_INVALID: API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
    }

    let genAI;
    try {
      genAI = new GoogleGenerativeAI(apiKey);
    } catch (error) {
      throw new Error('API_KEY_INVALID: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞');
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ gemini-2.5-pro-preview-05-06 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ª—É—á—à–µ –ø–æ –æ—Ç–∑—ã–≤–∞–º)
    const modelConfig = this.availableModels[model] || this.availableModels['gemini-2.5-pro-preview-05-06'];
    
    const aiModel = genAI.getGenerativeModel({ 
      model: model,
      generationConfig: {
        temperature: modelConfig.temperature,
        topP: 0.8,
        topK: 40,
        maxOutputTokens: modelConfig.maxTokens,
      }
    });

    let lastError = null;
    
    for (let attempt = 1; attempt <= this.maxAttempts; attempt++) {
      try {
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.maxAttempts} –ø–æ–ª—É—á–∏—Ç—å —Ö–æ–¥ –æ—Ç AI (–º–æ–¥–µ–ª—å: ${model})`);

        const prompt = this.createPrompt(
          { fen, history, strategy: strategy || this.defaultStrategy },
          lastError
        );

        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç AI...');
        const result = await aiModel.generateContent(prompt);
        const responseText = result.response.text();
        
        console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI:', responseText.substring(0, 200) + '...');

        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        const aiResponse = this.parseAIResponse(responseText);
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ö–æ–¥
        if (!this.validateMove(aiResponse.move, fen)) {
          lastError = `–•–æ–¥ "${aiResponse.move}" –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏`;
          console.warn(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}: ${lastError}`);
          
          if (attempt < this.maxAttempts) {
            continue; // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
          } else {
            throw new Error('AI_FAILED_TO_MOVE: –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
          }
        }

        // –•–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–π!
        console.log(`‚úÖ AI —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª —Ö–æ–¥: ${aiResponse.move}`);
        
        return {
          move: aiResponse.move,
          newStrategy: aiResponse.strategy,
          attempts: attempt,
          model: model
        };

      } catch (error) {
        console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π:`, error.message);

        // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ API
        if (error.message.includes('API_KEY_INVALID') || 
            error.message.includes('API key')) {
          throw new Error('API_KEY_INVALID: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞');
        }

        if (error.message.includes('quota') || 
            error.message.includes('QUOTA_EXCEEDED')) {
          throw new Error('QUOTA_EXCEEDED: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API');
        }

        // –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥–µ–ª—å—é - –ø—Ä–æ–±—É–µ–º fallback
        if (error.message.includes('not found') || error.message.includes('404')) {
          if (model !== 'gemini-1.5-pro' && attempt === 1) {
            console.log(`–ú–æ–¥–µ–ª—å ${model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º gemini-1.5-pro...`);
            gameState.model = 'gemini-1.5-pro';
            return this.getAiMove(gameState);
          }
        }

        lastError = error.message;

        if (attempt >= this.maxAttempts) {
          throw new Error(`AI_FAILED_TO_MOVE: ${lastError}`);
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
  }
}

module.exports = new AIService(); 