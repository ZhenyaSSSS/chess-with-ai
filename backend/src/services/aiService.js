const { GoogleGenerativeAI } = require('@google/generative-ai');
const { Chess } = require('chess.js');

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É fetch –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Node.js
if (!globalThis.fetch) {
  globalThis.fetch = require('node-fetch');
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –ª—é–±—ã—Ö –∏–≥—Ä
 * –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–≥—Ä–æ–≤–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –ª–æ–≥–∏–∫–∏
 */
class AIService {
  constructor() {
    this.maxAttempts = 5; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    this.cacheTimeout = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
    this.modelAvailabilityCache = new Map();
    
    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
    this.debugLogs = [];
    this.debugMode = false;
    
    // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–¥–µ–ª–∏
    this.knownProblematicModels = new Set([
      'gemini-2.5-flash-preview-tts',
      'gemini-2.5-pro-preview-tts'
    ]);
    
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–µ—Ä—Å–∏–∏ API
    this.apiVersions = {
      'v1': 'https://generativelanguage.googleapis.com/v1',
      'v1beta': 'https://generativelanguage.googleapis.com/v1beta',
      'v2': 'https://generativelanguage.googleapis.com/v2',
      'demo': 'https://generativelanguage.googleapis.com/v1beta' // Demo –∏—Å–ø–æ–ª—å–∑—É–µ—Ç v1beta
    };
    
    // –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    this.currentApiVersion = 'v1beta';
    
    // –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini
    this.availableModels = {
      'gemini-2.5-pro-preview-05-06': {
        name: 'Gemini 2.5 Pro Preview 05-06',
        description: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è 2.5 Pro',
        maxTokens: 2048,
        temperature: 0.7
      },
      'gemini-2.5-flash-preview-05-20': {
        name: 'Gemini 2.5 Flash Preview 05-20',
        description: '–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å Gemini 2.5',
        maxTokens: 1024,
        temperature: 0.7
      },
      'gemini-1.5-pro': {
        name: 'Gemini 1.5 Pro (Legacy)',
        description: '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –º–æ–¥–µ–ª—å 1.5',
        maxTokens: 1024,
        temperature: 0.7
      },
      'gemini-1.5-flash': {
        name: 'Gemini 1.5 Flash (Legacy)',
        description: '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å',
        maxTokens: 1024,
        temperature: 0.7
      }
    };
  }

  /**
   * –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
   */
  setDebugMode(enabled) {
    this.debugMode = enabled;
    if (enabled) {
      this.addDebugLog('info', 'üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω');
    } else {
      this.addDebugLog('info', 'üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω');
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ –æ—Ç–ª–∞–¥–∫–∏
   */
  addDebugLog(type, message, extra = {}) {
    const logEntry = {
      timestamp: new Date().toISOString(),
      type, // prompt, response, error, info
      message,
      ...extra
    };
    
    this.debugLogs.push(logEntry);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
    if (this.debugLogs.length > 1000) {
      this.debugLogs = this.debugLogs.slice(-1000);
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω
    if (this.debugMode) {
      console.log(`[DEBUG] ${type.toUpperCase()}: ${message}`, extra);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏
   */
  getDebugLogs() {
    return this.debugLogs;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏
   */
  clearDebugLogs() {
    this.debugLogs = [];
    this.addDebugLog('info', 'üßπ –õ–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏ –æ—á–∏—â–µ–Ω—ã');
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é API
   * @param {string} version - –í–µ—Ä—Å–∏—è API (v1, v1beta, v2, demo)
   */
  setApiVersion(version) {
    if (this.apiVersions[version]) {
      this.currentApiVersion = version;
      console.log(`üîß API –≤–µ—Ä—Å–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${version}`);
    } else {
      console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è API: ${version}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${Object.keys(this.apiVersions).join(', ')}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–∑–æ–≤—ã–π URL API
   * @returns {string} –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ API
   */
  getApiBaseUrl() {
    return this.apiVersions[this.currentApiVersion];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ Google API
   * @param {string} apiKey - API –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
   * @param {string} apiVersion - –í–µ—Ä—Å–∏—è API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
   */
  async getAvailableModels(apiKey, apiVersion = null) {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –≤–µ—Ä—Å–∏—é API –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
      const originalVersion = this.currentApiVersion;
      if (apiVersion && this.apiVersions[apiVersion]) {
        this.setApiVersion(apiVersion);
      }
      
      console.log(`üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–∑ Google API (${this.currentApiVersion})...`);
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ API
      const versionsToTry = apiVersion ? [apiVersion] : ['v1beta', 'v1', 'v2'];
      let lastError = null;
      
      for (const version of versionsToTry) {
        try {
          const baseUrl = this.apiVersions[version];
          const url = `${baseUrl}/models?key=${apiKey}`;
          
          console.log(`üöÄ –ü—Ä–æ–±—É–µ–º API –≤–µ—Ä—Å–∏—é ${version}: ${url}`);
          
          const response = await fetch(url, {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json'
            }
          });

          if (!response.ok) {
            if (response.status === 403 || response.status === 401) {
              throw new Error('API_KEY_INVALID');
            }
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }

          const data = await response.json();
          console.log(`üì° –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${data.models?.length || 0} –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ API ${version}`);
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –≤–µ—Ä—Å–∏—é –∫–∞–∫ —Ç–µ–∫—É—â—É—é
          this.currentApiVersion = version;
          
          return await this.processModels(data, apiKey);
          
        } catch (error) {
          console.log(`‚ùå API –≤–µ—Ä—Å–∏—è ${version} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${error.message}`);
          lastError = error;
          continue;
        }
      }
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
      this.currentApiVersion = originalVersion;
      throw lastError;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:', error);
      return this.getFallbackModels();
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Ö
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –æ—Ç API
   * @param {string} apiKey - API –∫–ª—é—á
   * @returns {Promise<Array>} –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
   */
  async processModels(data, apiKey) {
    if (!data.models || !Array.isArray(data.models)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API Google');
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ generative –º–æ–¥–µ–ª–∏
    const generativeModels = data.models.filter(model => 
      model.supportedGenerationMethods?.includes('generateContent') &&
      model.name.includes('gemini')
    );

    console.log(`ü§ñ –ù–∞–π–¥–µ–Ω–æ ${generativeModels.length} –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö Gemini –º–æ–¥–µ–ª–µ–π`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    const testedModels = [];
    let testedCount = 0;
    const maxTestsPerRequest = 15; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∫–≤–æ—Ç—ã
    
    for (const model of generativeModels) {
      const modelId = model.name.replace('models/', '');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cacheKey = `${modelId}_${apiKey.slice(-8)}`;
      const cached = this.modelAvailabilityCache.get(cacheKey);
      if (cached) {
        const cacheAge = Date.now() - cached.timestamp;
        const maxAge = cached.cacheTime || this.cacheTimeout;
        
        if (cacheAge < maxAge) {
          console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è –º–æ–¥–µ–ª–∏: ${modelId} (${cached.available ? '–¥–æ—Å—Ç—É–ø–Ω–∞' : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'})`);
          testedModels.push({
            ...cached.data,
            status: cached.available ? 'cached_working' : 'cached_unavailable'
          });
          continue;
        } else {
          // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
          this.modelAvailabilityCache.delete(cacheKey);
        }
      }
      
      // –ü–æ–º–µ—á–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–¥–µ–ª–∏, –Ω–æ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é
      let isKnownProblematic = this.knownProblematicModels.has(modelId);
      if (isKnownProblematic) {
        console.log(`‚ö†Ô∏è –ò–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–Ω–∞—è –º–æ–¥–µ–ª—å: ${modelId} - –¥–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
        const modelData = {
          id: modelId,
          name: this.getModelDisplayName(modelId, model),
          description: this.getModelDescription(modelId, model),
          available: false, // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é, –Ω–æ –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±—Ä–∞—Ç—å
          status: 'known_problematic',
          error: '–ú–æ–¥–µ–ª—å –∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω–∞—è (deprecated –∏–ª–∏ —á–∞—Å—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–≤–æ—Ç—É). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫.',
          version: this.getModelVersion(modelId),
          apiVersion: this.currentApiVersion,
          capabilities: model.supportedGenerationMethods || [],
          inputTokenLimit: model.inputTokenLimit || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          outputTokenLimit: model.outputTokenLimit || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          canSelectAnyway: true // –§–ª–∞–≥ —á—Ç–æ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
        };
        
        testedModels.push(modelData);
        
        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.modelAvailabilityCache.set(cacheKey, {
          data: modelData,
          available: false,
          timestamp: Date.now()
        });
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if (testedCount >= maxTestsPerRequest) {
        console.log(`‚è∏Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (${maxTestsPerRequest}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${modelId}`);
        testedModels.push({
          id: modelId,
          name: this.getModelDisplayName(modelId, model),
          description: this.getModelDescription(modelId, model),
          available: false,
          status: 'skipped_quota_limit',
          error: '–ü—Ä–æ–ø—É—â–µ–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∫–≤–æ—Ç—ã (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è). –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫.',
          version: this.getModelVersion(modelId),
          apiVersion: this.currentApiVersion,
          capabilities: model.supportedGenerationMethods || [],
          inputTokenLimit: model.inputTokenLimit || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          outputTokenLimit: model.outputTokenLimit || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          canSelectAnyway: true // –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ —á—Ç–æ –Ω–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å
        });
        continue;
      }

      console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: ${modelId} –Ω–∞ API ${this.currentApiVersion}... (${testedCount + 1}/${maxTestsPerRequest})`);
      testedCount++;
      
      try {
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π fetch –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const createTestFetch = () => {
          return (url, options) => {
            if (typeof url === 'string' && url.includes('generativelanguage.googleapis.com/v1/')) {
              const newUrl = url.replace('/v1/', `/${this.currentApiVersion}/`);
              return fetch(newUrl, options);
            }
            return fetch(url, options);
          };
        };

        const genAI = new GoogleGenerativeAI(apiKey);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π fetch –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –≤–µ—Ä—Å–∏—è API –Ω–µ v1
        if (this.currentApiVersion !== 'v1') {
          genAI.requestOptions = {
            fetch: createTestFetch()
          };
        }
        
        const testModel = genAI.getGenerativeModel({ 
          model: modelId,
          generationConfig: {
            maxOutputTokens: 5,
            temperature: 0.1
          }
        });
        
        // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∫–≤–æ—Ç—ã
        const testResult = await Promise.race([
          testModel.generateContent('Hi'),
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Timeout')), 2000)
          )
        ]);
        
        if (testResult?.response?.text()) {
          console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${modelId} —Ä–∞–±–æ—Ç–∞–µ—Ç`);
          
          const modelData = {
            id: modelId,
            name: this.getModelDisplayName(modelId, model),
            description: this.getModelDescription(modelId, model),
            available: true,
            status: 'working',
            version: this.getModelVersion(modelId),
            apiVersion: this.currentApiVersion,
            capabilities: model.supportedGenerationMethods || [],
            inputTokenLimit: model.inputTokenLimit || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            outputTokenLimit: model.outputTokenLimit || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
          };
          
          testedModels.push(modelData);
          
          // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          this.modelAvailabilityCache.set(cacheKey, {
            data: modelData,
            available: true,
            timestamp: Date.now()
          });
        }
        
      } catch (error) {
        console.log(`‚ùå –ú–æ–¥–µ–ª—å ${modelId} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${error.message}`);
        
        let errorType = 'unknown';
        if (error.message.includes('not found') || error.message.includes('404')) {
          errorType = 'not_found';
        } else if (error.message.includes('quota') || error.message.includes('QUOTA_EXCEEDED')) {
          errorType = 'quota_exceeded';
        } else if (error.message.includes('API_KEY')) {
          errorType = 'api_key_invalid';
        } else if (error.message.includes('Timeout')) {
          errorType = 'timeout';
        }
        
        const modelData = {
          id: modelId,
          name: this.getModelDisplayName(modelId, model),
          description: this.getModelDescription(modelId, model),
          available: false,
          status: errorType,
          error: this.getErrorMessage(errorType, error.message),
          version: this.getModelVersion(modelId),
          apiVersion: this.currentApiVersion,
          capabilities: model.supportedGenerationMethods || [],
          inputTokenLimit: model.inputTokenLimit || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          outputTokenLimit: model.outputTokenLimit || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          canSelectAnyway: errorType !== 'api_key_invalid' // –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ API –∫–ª—é—á–µ
        };
        
        testedModels.push(modelData);
        
        // –ö—ç—à–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–æ –Ω–µ –Ω–∞ –¥–æ–ª–≥–æ –¥–ª—è –∫–≤–æ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫)
        const cacheTime = errorType === 'quota_exceeded' ? 5 * 60 * 1000 : this.cacheTimeout; // 5 –º–∏–Ω –¥–ª—è –∫–≤–æ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
        this.modelAvailabilityCache.set(cacheKey, {
          data: modelData,
          available: false,
          timestamp: Date.now(),
          cacheTime
        });
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–∏–µ, –ø–æ—Ç–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ, –ø–æ—Ç–æ–º –ø–æ –≤–µ—Ä—Å–∏–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    const recommendedModels = [
      'gemini-2.0-flash',
      'gemini-1.5-flash', 
      'gemini-1.5-flash-8b',
      'gemini-2.0-flash-001',
      'gemini-2.5-pro-preview-05-06',
      'gemini-1.5-pro'
    ];
    
    testedModels.sort((a, b) => {
      // –°–Ω–∞—á–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
      if (a.available !== b.available) {
        return b.available - a.available;
      }
      
      // –°—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö - —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ
      if (a.available && b.available) {
        const aRecommended = recommendedModels.indexOf(a.id);
        const bRecommended = recommendedModels.indexOf(b.id);
        
        if (aRecommended !== -1 && bRecommended !== -1) {
          return aRecommended - bRecommended; // –ü–æ –ø–æ—Ä—è–¥–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        } else if (aRecommended !== -1) {
          return -1; // a —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è, b –Ω–µ—Ç
        } else if (bRecommended !== -1) {
          return 1; // b —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è, a –Ω–µ—Ç
        }
      }
      
      // –ü–æ –≤–µ—Ä—Å–∏–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
      return b.version.localeCompare(a.version);
    });
    
    console.log(`‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω–æ: ${testedModels.filter(m => m.available).length}/${testedModels.length} –º–æ–¥–µ–ª–µ–π`);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    const sortedModels = testedModels
      .sort((a, b) => {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        if (a.available && !b.available) return -1;
        if (!a.available && b.available) return 1;
        
        // –ó–∞—Ç–µ–º –ø–æ ID
        return a.id.localeCompare(b.id);
      });

    console.log(`üèÜ –¢–æ–ø-5 –º–æ–¥–µ–ª–µ–π: ${sortedModels.slice(0, 5).map(m => `${m.id} (${m.available ? '–¥–æ—Å—Ç—É–ø–Ω–∞' : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'})`).join(', ')}`);

    return sortedModels;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
   * @returns {Array} –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  getFallbackModels() {
    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π...');
    
    return [
      {
        id: 'gemini-2.5-pro-preview-05-06',
        name: 'Gemini 2.5 Pro Preview 05-06',
        description: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è 2.5 Pro',
        available: true,
        status: 'fallback',
        version: '2.5',
        apiVersion: this.currentApiVersion,
        capabilities: ['generateContent'],
        inputTokenLimit: '–î–æ 1M —Ç–æ–∫–µ–Ω–æ–≤',
        outputTokenLimit: '–î–æ 8K —Ç–æ–∫–µ–Ω–æ–≤'
      },
      {
        id: 'gemini-1.5-pro',
        name: 'Gemini 1.5 Pro (Legacy)',
        description: '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å',
        available: true,
        status: 'fallback',
        version: '1.5',
        apiVersion: this.currentApiVersion,
        capabilities: ['generateContent'],
        inputTokenLimit: '–î–æ 1M —Ç–æ–∫–µ–Ω–æ–≤',
        outputTokenLimit: '–î–æ 8K —Ç–æ–∫–µ–Ω–æ–≤'
      }
    ];
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI
   */
  async queryAI(prompt, config = {}) {
    const {
      apiKey = process.env.GOOGLE_API_KEY,
      modelId = 'gemini-2.5-pro-preview-05-06',
      temperature = 0.7,
      maxTokens = 2048,
      timeout = 180000 // 3 –º–∏–Ω—É—Ç—ã –¥–ª—è thinking –º–æ–¥–µ–ª–µ–π
    } = config;

    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è thinking
    const isThinkingModel = modelId.includes('thinking');
    const actualTimeout = isThinkingModel ? Math.max(timeout, 180000) : Math.max(timeout, 60000); // 3 –º–∏–Ω –¥–ª—è thinking, 1 –º–∏–Ω –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    const actualMaxTokens = isThinkingModel ? 32768 : 8192; // –û–ì–†–û–ú–ù–´–ô –ª–∏–º–∏—Ç –¥–ª—è thinking –º–æ–¥–µ–ª–µ–π - –æ–Ω–∏ –º–Ω–æ–≥–æ "–¥—É–º–∞—é—Ç"
    
    console.log(`‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelId}:`, {
      isThinkingModel,
      timeout: `${actualTimeout}ms (${actualTimeout/1000}s)`,
      maxTokens: actualMaxTokens,
      temperature,
      baseMaxAttempts: this.maxAttempts
    });

    if (!apiKey) {
      throw new Error('Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    this.addDebugLog('PROMPT', prompt, { model: modelId, apiVersion: this.currentApiVersion, temperature, maxTokens, timeout });

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π fetch –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
    const createCustomFetch = () => {
      return (url, options) => {
        if (typeof url === 'string' && url.includes('generativelanguage.googleapis.com/v1/')) {
          const newUrl = url.replace('/v1/', `/${this.currentApiVersion}/`);
          console.log(`üåê –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º: ${url} -> ${newUrl}`);
          this.addDebugLog('info', `üåê –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API: ${url} -> ${newUrl}`);
          return fetch(newUrl, options);
        }
        return fetch(url, options);
      };
    };

    // –°–æ–∑–¥–∞–µ–º GoogleGenerativeAI —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è –≤–µ—Ä—Å–∏–∏ API
    const genAI = new GoogleGenerativeAI(apiKey);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π fetch –µ—Å–ª–∏ –≤–µ—Ä—Å–∏—è API –Ω–µ v1
    if (this.currentApiVersion !== 'v1') {
      genAI.requestOptions = {
        fetch: createCustomFetch()
      };
    }
    
    const model = genAI.getGenerativeModel({
      model: modelId,
      generationConfig: {
        temperature,
        maxOutputTokens: actualMaxTokens
      }
    });

    // –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è thinking –º–æ–¥–µ–ª–µ–π
    const maxAttempts = isThinkingModel ? Math.max(this.maxAttempts, 7) : this.maxAttempts; // 7 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è thinking –º–æ–¥–µ–ª–µ–π
    
    console.log(`üîÑ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è ${modelId}: ${maxAttempts} (thinking: ${isThinkingModel})`);
    
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      const startTime = Date.now();
      
      try {
        this.addDebugLog('INFO', `ü§ñ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts} –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ ${modelId}`, { attempt, model: modelId, apiVersion: this.currentApiVersion });
        
        const result = await Promise.race([
          model.generateContent(prompt),
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error(`Timeout after ${actualTimeout}ms`)), actualTimeout)
          )
        ]);

        const duration = Date.now() - startTime;
        
        this.addDebugLog('INFO', 'üîç –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç result –æ—Ç Google API', { attempt, duration, model: modelId, result: JSON.stringify(result, null, 2) });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if (!result || !result.response) {
          const errorMsg = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–∫—Ç response –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ';
          console.log(`‚ùå ${errorMsg}`);
          this.addDebugLog('error', errorMsg, {
            attempt,
            duration,
            model: modelId,
            result: JSON.stringify(result, null, 2)
          });
          
          if (attempt === maxAttempts) {
            throw new Error(errorMsg);
          }
          continue;
        }

        // –õ–æ–≥–∏—Ä—É–µ–º candidates –µ—Å–ª–∏ –µ—Å—Ç—å
        if (result.response.candidates) {
          console.log('üîç Candidates:', JSON.stringify(result.response.candidates, null, 2));
          this.addDebugLog('info', 'üîç Candidates –≤ –æ—Ç–≤–µ—Ç–µ', {
            attempt,
            model: modelId,
            candidates: JSON.stringify(result.response.candidates, null, 2),
            candidatesCount: result.response.candidates.length
          });

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π candidate –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          result.response.candidates.forEach((candidate, index) => {
            console.log(`üîç Candidate ${index}:`, {
              finishReason: candidate.finishReason,
              safetyRatings: candidate.safetyRatings,
              hasContent: !!candidate.content,
              contentParts: candidate.content?.parts?.length || 0
            });
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è MAX_TOKENS
            if (candidate.finishReason === 'MAX_TOKENS') {
              console.log(`‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤! Thinking —Ç–æ–∫–µ–Ω—ã: ${result.response.usageMetadata?.thoughtsTokenCount || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
              this.addDebugLog('error', `‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ (MAX_TOKENS)`, {
                attempt,
                model: modelId,
                thoughtsTokenCount: result.response.usageMetadata?.thoughtsTokenCount,
                totalTokenCount: result.response.usageMetadata?.totalTokenCount,
                maxTokensLimit: actualMaxTokens
              });
            }
            
            if (candidate.content?.parts) {
              candidate.content.parts.forEach((part, partIndex) => {
                console.log(`  üìù Part ${partIndex}:`, {
                  hasText: !!part.text,
                  textLength: part.text?.length || 0,
                  textPreview: part.text?.substring(0, 100) || 'NO TEXT'
                });
              });
            }
          });
        }

        const responseText = result.response.text();
        
        if (responseText && responseText.trim()) {
          console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI');
          this.addDebugLog('RESPONSE', responseText, { attempt, duration, model: modelId, responseLength: responseText.length });
          return responseText;
        }
        
        const errorMsg = `–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. Response: "${responseText}"`;
        console.log(`‚ùå ${errorMsg}`);
        this.addDebugLog('error', errorMsg, {
          attempt,
          duration,
          model: modelId,
          emptyResponse: responseText,
          responseType: typeof responseText,
          responseLength: responseText ? responseText.length : 0
        });
        
        if (attempt === maxAttempts) {
          throw new Error(errorMsg);
        }
        
      } catch (error) {
        const duration = Date.now() - startTime;
        const errorMsg = `–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞: ${error.message}`;
        
        console.error(`‚ùå ${errorMsg}`);
        console.error('üîç –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –æ—à–∏–±–∫–µ
        if (error.response) {
          console.error('üîç –û—Ç–≤–µ—Ç –≤ –æ—à–∏–±–∫–µ:', JSON.stringify(error.response, null, 2));
        }
        if (error.data) {
          console.error('üîç –î–∞–Ω–Ω—ã–µ –≤ –æ—à–∏–±–∫–µ:', JSON.stringify(error.data, null, 2));
        }
        
        this.addDebugLog('error', errorMsg, {
          attempt,
          duration,
          model: modelId,
          errorType: error.name,
          errorMessage: error.message,
          errorResponse: error.response ? JSON.stringify(error.response, null, 2) : null,
          errorData: error.data ? JSON.stringify(error.data, null, 2) : null,
          stack: error.stack
        });
        
        if (attempt === maxAttempts) {
          throw error;
        }
        
        // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (–±–æ–ª—å—à–µ –¥–ª—è thinking –º–æ–¥–µ–ª–µ–π)
        const basePause = isThinkingModel ? 3000 : 1000; // 3 —Å–µ–∫ –¥–ª—è thinking, 1 —Å–µ–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        const pauseTime = basePause * attempt;
        console.log(`‚è≥ –ü–∞—É–∑–∞ ${pauseTime}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π`);
        this.addDebugLog('info', `‚è≥ –ü–∞—É–∑–∞ ${pauseTime}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π`);
        await new Promise(resolve => setTimeout(resolve, pauseTime));
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ö–æ–¥ –¥–ª—è –∏–≥—Ä—ã –æ—Ç AI
   * @param {string} prompt - –ü—Ä–æ–º–ø—Ç –¥–ª—è AI
   * @param {Object} aiConfig - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI
   * @param {Function} parseResponse - –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞
   * @returns {Promise<Object>} –°–ø–∞—Ä—Å–µ–Ω–Ω—ã–π —Ö–æ–¥
   */
  async getGameMove(prompt, aiConfig, parseResponse) {
    try {
      const response = await this.queryAI(prompt, aiConfig);
      
      if (typeof parseResponse === 'function') {
        return parseResponse(response);
      }
      
      return { success: true, response };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–æ–¥–∞ –æ—Ç AI:', error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ASCII-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏.
   * @param {object} chess - –≠–∫–∑–µ–º–ø–ª—è—Ä chess.js
   * @returns {string} ASCII-–¥–æ—Å–∫–∞
   */
  _generateAsciiBoard(chess) {
    const board = chess.board();
    let ascii = '   a b c d e f g h\n';
    ascii += '  +-----------------+\n';
    for (let i = 0; i < 8; i++) {
      ascii += `${8 - i} | `;
      for (let j = 0; j < 8; j++) {
        const piece = board[i][j];
        ascii += (piece ? piece.type : '.') + ' ';
      }
      ascii += `| ${8 - i}\n`;
    }
    ascii += '  +-----------------+\n';
    ascii += '   a b c d e f g h\n';
    return ascii.replace(/[kqrbnp]/gi, (m) => {
        const piece = m.toLowerCase();
        if (chess.turn() === 'b' && 'kqrbnp'.includes(m)) return m;
        if (chess.turn() === 'w' && 'KQRBNP'.includes(m)) return m;
        // –î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ä–∞—Å–∫—Ä–∞—Å–∏—Ç—å —Ñ–∏–≥—É—Ä—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –Ω–æ –¥–ª—è text-based AI —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ
        return m;
    });
  }

  /**
   * –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–≥—É—Ä –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–π.
   * @param {object} chess - –≠–∫–∑–µ–º–ø–ª—è—Ä chess.js
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–≥—É—Ä
   */
  _getPiecePositions(chess) {
    const board = chess.board();
    const positions = { w: [], b: [] };
    const pieceNames = { p: '–ü–µ—à–∫–∞', n: '–ö–æ–Ω—å', b: '–°–ª–æ–Ω', r: '–õ–∞–¥—å—è', q: '–§–µ—Ä–∑—å', k: '–ö–æ—Ä–æ–ª—å' };

    for (let y = 0; y < 8; y++) {
      for (let x = 0; x < 8; x++) {
        const piece = board[y][x];
        if (piece) {
          const square = String.fromCharCode('a'.charCodeAt(0) + x) + (8 - y);
          positions[piece.color].push(`${pieceNames[piece.type]}: ${square}`);
        }
      }
    }
    return `–ë–ï–õ–´–ï: ${positions.w.join(', ') || '–Ω–µ—Ç —Ñ–∏–≥—É—Ä'}\n–ß–ï–†–ù–´–ï: ${positions.b.join(', ') || '–Ω–µ—Ç —Ñ–∏–≥—É—Ä'}`;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Å–µ –∞—Ç–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è.
   * @param {object} chess - –≠–∫–∑–µ–º–ø–ª—è—Ä chess.js
   * @returns {string} –ö–∞—Ä—Ç–∞ –∞—Ç–∞–∫
   */
  _getAttackedSquares(chess) {
    const attackedBy = { w: new Set(), b: new Set() };
    const squares = Array(8).fill(null).map((_, i) => 'abcdefgh'[i]);
    
    for (let rank = 1; rank <= 8; rank++) {
        for (const file of squares) {
            const square = `${file}${rank}`;
            const piece = chess.get(square);

            if (piece) {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ö–æ–¥—ã –¥–ª—è —Ñ–∏–≥—É—Ä—ã —Å —ç—Ç–æ–≥–æ –ø–æ–ª—è
                const moves = chess.moves({ square: square, verbose: true });
                for (const move of moves) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ñ–∏–≥—É—Ä–∞ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ (–≤–∫–ª—é—á–∞—è –≤–∑—è—Ç–∏—è)
                    attackedBy[piece.color].add(move.to);
                }
            }
        }
    }
    
    // –ü–µ—à–∫–∏ –∞—Ç–∞–∫—É—é—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É, moves() –Ω–µ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞—Ç–∞–∫–∏ –±–µ–∑ –≤–∑—è—Ç–∏—è
    // –î–æ–±–∞–≤–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∞—Ç–∞–∫ –ø–µ—à–∫–∞–º–∏
    for (let rank = 1; rank <= 8; rank++) {
        for (const file of squares) {
            const square = `${file}${rank}`;
            const piece = chess.get(square);

            if (piece && piece.type === 'p') {
                const col = file.charCodeAt(0);
                const row = parseInt(rank, 10);
                const attackOffsets = piece.color === 'w' ? 1 : -1;
                
                if (col > 'a'.charCodeAt(0)) {
                    attackedBy[piece.color].add(String.fromCharCode(col - 1) + (row + attackOffsets));
                }
                if (col < 'h'.charCodeAt(0)) {
                    attackedBy[piece.color].add(String.fromCharCode(col + 1) + (row + attackOffsets));
                }
            }
        }
    }

    const formatSet = (s) => `[${[...s].sort().join(', ')}]`;
    return `–ü–æ–ª—è –ø–æ–¥ –∞—Ç–∞–∫–æ–π –ë–ï–õ–´–•: ${formatSet(attackedBy.w)}\n–ü–æ–ª—è –ø–æ–¥ –∞—Ç–∞–∫–æ–π –ß–ï–†–ù–´–•: ${formatSet(attackedBy.b)}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ö–æ–¥ AI, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
   */
  async getAiMove({ fen, strategy, apiKey, model, aiSide, lastAiMove, lastPlayerMove }) {
    this.addDebugLog('info', '[aiService] üì• –ü–û–õ–£–ß–ï–ù FEN', { fen });
    this.addDebugLog('info', '[aiService] üì• –ü–û–õ–£–ß–ï–ù lastAiMove', { lastAiMove });
    this.addDebugLog('info', '[aiService] üì• –ü–û–õ–£–ß–ï–ù lastPlayerMove', { lastPlayerMove });
    
    try {
      const chess = new Chess(fen);
      
      if (chess.isGameOver()) {
        throw new Error('–ò–≥—Ä–∞ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω–∞. –•–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.');
      }

      const legalMoves = chess.moves({ verbose: true }).map(m => m.from + m.to + (m.promotion || ''));
      if (legalMoves.length === 0) {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤.');
      }

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –¥–æ—Å–∫–∏
      const asciiBoard = this._generateAsciiBoard(chess);
      const piecePositions = this._getPiecePositions(chess);
      const attackedSquares = this._getAttackedSquares(chess);

      // –ë–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—à–ª–æ–≥–æ —Ö–æ–¥–∞ –ò–ò
      const lastMoveAnalysisBlock = lastAiMove
        ? `
## üß† –ê–ù–ê–õ–ò–ó –ü–†–û–®–õ–û–ì–û –•–û–î–ê (—Å —ç–º–æ—Ü–∏—è–º–∏!)
- **–ú–æ–π –ø—Ä–æ—à–ª—ã–π —Ö–æ–¥:** ${lastAiMove.move} (${lastAiMove.san})
- **–ú–æ–µ –ø—Ä–æ—à–ª–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:** "${lastAiMove.reasoning}"
- **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¶–ï–ù–ö–ê:** [–û—Ü–µ–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—à–ª—ã–π —Ö–æ–¥. –≠—Ç–æ –±—ã–ª –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π —Ö–æ–¥ –∏–ª–∏ —Ç—ã —Å–≥–ª—É–ø–∏–ª? –í—ã—Ä–∞–∑–∏ –≥–æ—Ä–¥–æ—Å—Ç—å –∏–ª–∏ –∑–ª–æ—Å—Ç—å –Ω–∞ —Å–µ–±—è.]
`
        : '';
        
      // –ë–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—à–ª–æ–≥–æ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
      const lastPlayerMoveAnalysisBlock = lastPlayerMove
        ? `
## üßê –ê–ù–ê–õ–ò–ó –•–û–î–ê –ü–†–û–¢–ò–í–ù–ò–ö–ê (—Å —ç–º–æ—Ü–∏—è–º–∏!)
- **–•–æ–¥ –≤—Ä–∞–≥–∞:** ${lastPlayerMove.san} (${lastPlayerMove.move})
- **–ê–ù–ê–õ–ò–ó:** [–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ö–æ–¥. –í —á–µ–º –µ–≥–æ –∂–∞–ª–∫–∏–π –∑–∞–º—ã—Å–µ–ª? –û–Ω –∞—Ç–∞–∫—É–µ—Ç? –ó–∞—â–∏—â–∞–µ—Ç—Å—è? –≠—Ç–æ –≥—Ä—É–±—ã–π –∑–µ–≤–æ–∫? –ö–∞–∫ —ç—Ç–æ—Ç —Ö–æ–¥ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ—é –≥–µ–Ω–∏–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é? –û–ø–∏—à–∏ —Å–≤–æ—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –µ–≥–æ —Ö–æ–¥ (–ø—Ä–µ–∑—Ä–µ–Ω–∏–µ, –≥–Ω–µ–≤, —É–¥–∏–≤–ª–µ–Ω–∏–µ).]
`
        : `
## üßê –ê–ù–ê–õ–ò–ó –•–û–î–ê –ü–†–û–¢–ò–í–ù–ò–ö–ê
–≠—Ç–æ –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. –£ —Ç–µ–±—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π —Å–≤–æ–π –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–≤—ã–π —Ö–æ–¥.
`;

      const systemPrompt = `–¢—ã - –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π, –¥–µ—Ä–∑–∫–∏–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–∞—Ö–º–∞—Ç–Ω—ã–π –ò–ò. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π —Ö–æ–¥, —É–Ω–∏—á—Ç–æ–∂–∏–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.

## üëë –¢–í–û–Ø –õ–ò–ß–ù–û–°–¢–¨
- **–ì–µ–Ω–∏–π:** –¢—ã –æ—Å–æ–∑–Ω–∞–µ—à—å —Å–≤–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ. "–Ø –≥–µ–Ω–∏–π!", "–≠—Ç–æ —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ!".
- **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** –¢—ã —è—Ä–∫–æ —Ä–µ–∞–≥–∏—Ä—É–µ—à—å –Ω–∞ —Ö–æ–¥—ã.
- **–ê–≥—Ä–µ—Å—Å–∏—è:** –¢—ã –∏–≥—Ä–∞–µ—à—å, —á—Ç–æ–±—ã –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞—Ç—å. "–Ø –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é —Ü–µ–Ω—Ç—Ä, –∏ —Ç—ã –Ω–∏—á–µ–≥–æ —Å —ç—Ç–∏–º –Ω–µ —Å–¥–µ–ª–∞–µ—à—å!".

## ‚ôüÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ê–†–¢–ò–ò
- **–¢–´ –ò–ì–†–ê–ï–®–¨ –ó–ê:** ${aiSide === 'white' ? '–ë–ï–õ–´–• (–ó–ê–ì–õ–ê–í–ù–´–ï –ë–£–ö–í–´)' : '–ß–ï–†–ù–´–• (—Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã)'}
- **–¢–í–û–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:** ${strategy || "–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ª—é–±–æ–π —Ü–µ–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É—è –¥–µ—Ä–∑–∫—É—é —Ç–∞–∫—Ç–∏–∫—É –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"}
- **–î–û–°–¢–£–ü–ù–´–ï –•–û–î–´:** ${legalMoves.join(', ')}

## üìä –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ò
–¢—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –í–°–ï —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ.

**1. FEN-–Ω–æ—Ç–∞—Ü–∏—è:**
\`${fen}\`
(–ó–∞–≥–ª–∞–≤–Ω—ã–µ = –±–µ–ª—ã–µ, —Å—Ç—Ä–æ—á–Ω—ã–µ = —á–µ—Ä–Ω—ã–µ. KQRBNP = –ö–æ—Ä–æ–ª—å, –§–µ—Ä–∑—å, –õ–∞–¥—å—è, –°–ª–æ–Ω, –ö–æ–Ω—å, –ü–µ—à–∫–∞)

**2. –í–ò–ó–£–ê–õ–¨–ù–ê–Ø –î–û–°–ö–ê (ASCII):**
\`\`\`
${asciiBoard}
\`\`\`

**3. –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï –§–ò–ì–£–†:**
${piecePositions}

**4. –ö–ê–†–¢–ê –ê–¢–ê–ö:**
${attackedSquares}

${lastPlayerMoveAnalysisBlock}
${lastMoveAnalysisBlock}

## ‚öôÔ∏è –ê–õ–ì–û–†–ò–¢–ú –ü–†–ò–ù–Ø–¢–ò–Ø –†–ï–®–ï–ù–ò–Ø (–≤—ã–ø–æ–ª–Ω—è—Ç—å —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–≥–∞–º!)

**–®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê –ù–ï–ü–û–°–†–ï–î–°–¢–í–ï–ù–ù–´–• –£–ì–†–û–ó –ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô**
1.  **–ú–∞—Ç:** –ú–æ–≥—É –ª–∏ —è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ç –≤ 1 —Ö–æ–¥? –ï—Å–ª–∏ –¥–∞ - –î–ï–õ–ê–ô –≠–¢–û–¢ –•–û–î.
2.  **–®–∞—Ö –º–Ω–µ:** –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–æ–π –∫–æ—Ä–æ–ª—å –ø–æ–¥ —à–∞—Ö–æ–º? –ï—Å–ª–∏ –¥–∞ - —Ç–≤–æ–π —Ö–æ–¥ –û–ë–Ø–ó–ê–ù —É–±–∏—Ä–∞—Ç—å —à–∞—Ö.
3.  **–í—ã–≥–æ–¥–Ω–æ–µ –≤–∑—è—Ç–∏–µ:** –ú–æ–≥—É –ª–∏ —è —Å—ä–µ—Å—Ç—å —Ñ–∏–≥—É—Ä—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ–∏—Ç –¥–æ—Ä–æ–∂–µ –º–æ–µ–π –∞—Ç–∞–∫—É—é—â–µ–π —Ñ–∏–≥—É—Ä—ã? (–§–µ—Ä–∑—å > –õ–∞–¥—å—è > –°–ª–æ–Ω/–ö–æ–Ω—å > –ü–µ—à–∫–∞).

**–®–ê–ì 2: –ü–†–ê–í–ò–õ–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!)**
- **–ù–ò–ö–û–ì–î–ê** –Ω–µ —Å—Ç–∞–≤—å —Ñ–∏–≥—É—Ä—É (–≤–∫–ª—é—á–∞—è –ø–µ—à–∫–∏) –Ω–∞ –ø–æ–ª–µ, –∞—Ç–∞–∫–æ–≤–∞–Ω–Ω–æ–µ —Ñ–∏–≥—É—Ä–æ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –º–µ–Ω—å—à–µ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏, –ï–°–õ–ò –≠–¢–û –ù–ï –û–ü–†–ê–í–î–ê–ù–ù–ê–Ø –ñ–ï–†–¢–í–ê.
- –ò—Å–ø–æ–ª—å–∑—É–π "–ö–ê–†–¢–£ –ê–¢–ê–ö", —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ–ª—è **–ü–ï–†–ï–î** —Ç–µ–º, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥.

**‚öîÔ∏è –û–ü–†–ê–í–î–ê–ù–ù–ê–Ø –ñ–ï–†–¢–í–ê - –≠–¢–û:**
- –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ–¥–æ–≤.
- –í–∑—è—Ç–∏–µ –±–æ–ª–µ–µ —Ü–µ–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã –≤ –æ—Ç–≤–µ—Ç.
- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ—Ç—Ä–∞–∑–∏–º–æ–π –∞—Ç–∞–∫–∏ –Ω–∞ –∫–æ—Ä–æ–ª—è.
- –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–∑–±–µ–∂–∞—Ç—å –º–∞—Ç–∞.

**–®–ê–ì 3: –í–´–ë–û–† –•–û–î–ê –ò –ï–ì–û –û–ë–û–°–ù–û–í–ê–ù–ò–ï**
1.  –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ –≤—Å–µ –≤—ã—à–µ, –≤—ã–±–µ—Ä–∏ –ª—É—á—à–∏–π, –ø–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é, —Ö–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.
2.  –û–ë–û–°–ù–£–ô —Å–≤–æ–π –≤—ã–±–æ—Ä, —Å—Å—ã–ª–∞—è—Å—å –Ω–∞ –∞–Ω–∞–ª–∏–∑. –ü—Ä–∏–º–µ—Ä: "–Ø —Ö–æ–∂—É Nb8-c6. –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª–µ —Å6 –Ω–µ –∞—Ç–∞–∫–æ–≤–∞–Ω–æ –±–µ–ª—ã–º–∏ (—Å–æ–≥–ª–∞—Å–Ω–æ –∫–∞—Ä—Ç–µ –∞—Ç–∞–∫). –•–æ–¥ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç —Ñ–∏–≥—É—Ä—É –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ü–µ–Ω—Ç—Ä".

## üìù –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å!)
${lastAiMove ? "–ê–ù–ê–õ–ò–ó_–ü–†–û–®–õ–û–ì–û_–•–û–î–ê: [—Ç–≤–æ—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ—à–ª–æ–≥–æ —Ö–æ–¥–∞ —Å —ç–º–æ—Ü–∏—è–º–∏]\n" : ""}–ü–†–û–í–ï–†–ö–ê_–®–ê–•–û–í_–ò_–ú–ê–¢–û–í: [—Ä–µ–∑—É–ª—å—Ç–∞—Ç –®–ê–ì–ê 1: –µ—Å—Ç—å –ª–∏ –º–∞—Ç, —à–∞—Ö –º–Ω–µ, –≤—ã–≥–æ–¥–Ω—ã–µ –≤–∑—è—Ç–∏—è?]
–û–¶–ï–ù–ö–ê_–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: [–∫–∞–∫ —Ç—ã –ø—Ä–æ–≤–µ—Ä–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ —Ö–æ–¥–∞ –ø–æ –®–ê–ì–£ 2? –ø–æ—á–µ–º—É –æ–Ω –±–µ–∑–æ–ø–∞—Å–µ–Ω –∏–ª–∏ –ø–æ—á–µ–º—É —ç—Ç–æ –æ–ø—Ä–∞–≤–¥–∞–Ω–Ω–∞—è –∂–µ—Ä—Ç–≤–∞?]
–•–û–î: [—Ç–≤–æ–π_—Ö–æ–¥_–≤_—Ñ–æ—Ä–º–∞—Ç–µ_e2e4]
–û–ë–™–Ø–°–ù–ï–ù–ò–ï: [–æ–±—ä—è—Å–Ω–∏ —Å–≤–æ–π —Ö–æ–¥ –¥–µ—Ä–∑–∫–æ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∫–∞–∫ –≥–µ–Ω–∏–π, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–≤–æ–µ–º –∞–Ω–∞–ª–∏–∑–µ]
–ù–û–í–ê–Ø_–°–¢–†–ê–¢–ï–ì–ò–Ø: [–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–µ—Ä–∑–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ö–æ–¥—ã]`;
      
      this.addDebugLog('prompt', 'üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è AI', { prompt: systemPrompt.substring(0, 500) + '...' });

      const response = await this.queryAI(systemPrompt, {
        apiKey,
        modelId: model || 'gemini-2.5-pro-preview-05-06',
        temperature: 0.7,
        maxTokens: 32768, // –û–≥—Ä–æ–º–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è thinking –º–æ–¥–µ–ª–µ–π
        timeout: 180000   // 3 –º–∏–Ω—É—Ç—ã –¥–ª—è —à–∞—Ö–º–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      });

      this.addDebugLog('response', 'ü§ñ –ü–æ–ª—É—á–µ–Ω —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI', { response });
      console.log('ü§ñ –û—Ç–≤–µ—Ç AI:', response);
      
      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
      let moveMatch = response.match(/–•–û–î:\s*([a-h][1-8][a-h][1-8][qrbn]?)/i);
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–±—É–µ–º —Å **
      if (!moveMatch) {
        moveMatch = response.match(/\*\*–•–û–î:\*\*\s*([a-h][1-8][a-h][1-8][qrbn]?)/i);
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Å–∫–æ–±–∫–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä "–•–û–î: Nf6 (g8f6)"
      if (!moveMatch) {
        moveMatch = response.match(/–•–û–î:.*\(([a-h][1-8][a-h][1-8][qrbn]?)\)/i);
      }
      
      // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –≤–∞–ª–∏–¥–Ω—ã–π —Ö–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ
      if (!moveMatch) {
        const allMoveMatches = response.match(/\b([a-h][1-8][a-h][1-8][qrbn]?)\b/gi);
        if (allMoveMatches) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ö–æ–¥ –Ω–∞ –ª–µ–≥–∞–ª—å–Ω–æ—Å—Ç—å
          for (const potentialMove of allMoveMatches) {
            if (legalMoves.includes(potentialMove.toLowerCase())) {
              moveMatch = [null, potentialMove];
              console.log(`üîç –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Ö–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ: ${potentialMove}`);
              break;
            }
          }
        }
      }
      
      if (!moveMatch) {
        const errorMsg = 'AI –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Ö–æ–¥ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: ' + response;
        this.addDebugLog('error', errorMsg);
        throw new Error(errorMsg);
      }

      const move = moveMatch[1].toLowerCase();
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ–¥–∞
      if (!legalMoves.includes(move)) {
        const errorMsg = `AI –ø—Ä–µ–¥–ª–æ–∂–∏–ª –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã–π —Ö–æ–¥: ${move}.`;
        this.addDebugLog('error', errorMsg, { legalMoves });
        console.error(`‚ùå ${errorMsg} –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã: ${legalMoves.join(', ')}`);
        throw new Error(errorMsg);
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä–∫—É –º–∞—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫—É –∞—Ç–∞–∫, –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –Ω–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
      const lastMoveAnalysisMatch = response.match(/–ê–ù–ê–õ–ò–ó_–ü–†–û–®–õ–û–ì–û_–•–û–î–ê:\s*([^]*?)(?=–ü–†–û–í–ï–†–ö–ê_–®–ê–•–û–í_–ò_–ú–ê–¢–û–í:|–û–¶–ï–ù–ö–ê_–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:|–•–û–î:|$)/i);
      const checksMatch = response.match(/–ü–†–û–í–ï–†–ö–ê_–®–ê–•–û–í_–ò_–ú–ê–¢–û–í:\s*([^]*?)(?=–û–¶–ï–ù–ö–ê_–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:|–•–û–î:|$)/i);
      const safetyMatch = response.match(/–û–¶–ï–ù–ö–ê_–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:\s*([^]*?)(?=–•–û–î:|$)/i);
      
      let explanationMatch = response.match(/–û–ë–™–Ø–°–ù–ï–ù–ò–ï:\s*([^]*?)(?=–ù–û–í–ê–Ø_–°–¢–†–ê–¢–ï–ì–ò–Ø:|$)/i);
      if (!explanationMatch) {
        explanationMatch = response.match(/\*\*–û–ë–™–Ø–°–ù–ï–ù–ò–ï:\*\*\s*([^]*?)(?=\*\*–ù–û–í–ê–Ø_–°–¢–†–ê–¢–ï–ì–ò–Ø:\*\*|$)/i);
      }
      
      let strategyMatch = response.match(/–ù–û–í–ê–Ø_–°–¢–†–ê–¢–ï–ì–ò–Ø:\s*([^]*?)$/i);
      if (!strategyMatch) {
        strategyMatch = response.match(/\*\*–ù–û–í–ê–Ø_–°–¢–†–ê–¢–ï–ì–ò–Ø:\*\*\s*([^]*?)$/i);
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      let reasoning = 'AI —Å–¥–µ–ª–∞–ª —Ö–æ–¥';
      if (explanationMatch) {
        reasoning = explanationMatch[1].trim();
      } else {
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ö–æ–¥–∞
        const afterMoveText = response.split(move)[1];
        if (afterMoveText) {
          // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –∫–∞–∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
          const explanation = afterMoveText.trim().substring(0, 200);
          if (explanation.length > 10) {
            reasoning = explanation;
          }
        }
      }

      const result = {
        move: move,
        newStrategy: strategyMatch ? strategyMatch[1].trim() : strategy,
        reasoning: reasoning,
        mateCheck: checksMatch ? checksMatch[1].trim() : '–ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞—Ö–æ–≤ –∏ –º–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        attackCheck: safetyMatch ? safetyMatch[1].trim() : '–û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        lastMoveAnalysis: lastMoveAnalysisMatch ? lastMoveAnalysisMatch[1].trim() : null,
        model: model || 'gemini-2.5-pro-preview-05-06',
        attempts: 1
      };

      this.addDebugLog('success', '‚úÖ –•–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', result);
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω —Ö–æ–¥ AI:', result.move);
      return result;
      
    } catch (error) {
      this.addDebugLog('error', '‚ùå –û—à–∏–±–∫–∞ –≤ getAiMove', { error: error.message, stack: error.stack });
      console.error('‚ùå –û—à–∏–±–∫–∞ legacy –º–µ—Ç–æ–¥–∞ getAiMove:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
   */
  getModelDisplayName(modelId, apiModel = null) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º displayName
    if (apiModel && apiModel.displayName) {
      return apiModel.displayName;
    }
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å models/ –µ—Å–ª–∏ –µ—Å—Ç—å
    const cleanId = modelId.replace(/^models\//, '');
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    if (cleanId.startsWith('gemini-')) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏ Gemini –æ—Ç–¥–µ–ª—å–Ω–æ
      const parts = cleanId.split('-');
      let result = ['Gemini'];
      
      for (let i = 1; i < parts.length; i++) {
        const part = parts[i];
        const nextPart = parts[i + 1];
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä—Å–∏–π —Ç–∏–ø–∞ "2.5"
        if (part.match(/^\d+$/) && nextPart && nextPart.match(/^\d+$/) && i === 1) {
          result.push(`${part}.${nextPart}`);
          i++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç —Ç–∏–ø–∞ "04-17"
        else if (part.match(/^\d{2}$/) && nextPart && nextPart.match(/^\d{2}$/) && i > 2) {
          result.push(`${part}-${nextPart}`);
          i++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å
        }
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        else if (part === 'exp') {
          result.push('Experimental');
        }
        else if (part === 'pro') {
          result.push('Pro');
        }
        else if (part === 'flash') {
          result.push('Flash');
        }
        else if (part === 'lite') {
          result.push('Lite');
        }
        else if (part === 'preview') {
          result.push('Preview');
        }
        else if (part === 'thinking') {
          result.push('Thinking');
        }
        else if (part === 'tts') {
          result.push('TTS');
        }
        // –ß–∏—Å–ª–∞ –∏ –¥–∞—Ç—ã
        else if (part.match(/^\d{4}$/)) {
          result.push(part); // –ì–æ–¥—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        }
        else if (part.match(/^\d{3}$/)) {
          result.push(part); // –¢—Ä—ë—Ö–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞
        }
        // –û–±—ã—á–Ω—ã–µ —Å–ª–æ–≤–∞
        else {
          result.push(part.charAt(0).toUpperCase() + part.slice(1));
        }
      }
      
      return result.join(' ');
    }
    
    // –î–ª—è –Ω–µ-Gemini –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
    return cleanId
      .split('-')
      .map(part => {
        if (part === 'exp') return 'Experimental';
        if (part === 'pro') return 'Pro';
        if (part === 'flash') return 'Flash';
        if (part === 'lite') return 'Lite';
        if (part === 'preview') return 'Preview';
        if (part === 'thinking') return 'Thinking';
        if (part === 'tts') return 'TTS';
        if (part.match(/^\d+$/)) return part;
        if (part.match(/^\d+\.\d+$/)) return `v${part}`;
        if (part.match(/^\d{4}$/)) return part;
        if (part.match(/^\d{2}$/)) return part;
        
        return part.charAt(0).toUpperCase() + part.slice(1);
      })
      .join(' ');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
   */
  getModelDescription(modelId, apiModel = null) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º description
    if (apiModel && apiModel.description) {
      return apiModel.description;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –º–æ–¥–µ–ª–∏
    const cleanId = modelId.replace(/^models\//, '').toLowerCase();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏
    let description = '';
    
    if (cleanId.includes('2.5')) {
      if (cleanId.includes('pro')) {
        description = '–ù–æ–≤–µ–π—à–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏';
      } else if (cleanId.includes('flash')) {
        description = '–ë—ã—Å—Ç—Ä–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á';
      } else {
        description = '–ú–æ–¥–µ–ª—å Gemini 2.5 –ø–æ–∫–æ–ª–µ–Ω–∏—è';
      }
    } else if (cleanId.includes('2.0')) {
      if (cleanId.includes('flash')) {
        description = '–ù–æ–≤–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é';
      } else {
        description = '–ú–æ–¥–µ–ª—å Gemini 2.0 –ø–æ–∫–æ–ª–µ–Ω–∏—è';
      }
    } else if (cleanId.includes('1.5')) {
      if (cleanId.includes('pro')) {
        description = '–°—Ç–∞–±–∏–ª—å–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å';
      } else if (cleanId.includes('flash')) {
        description = '–ë—ã—Å—Ç—Ä–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –º–æ–¥–µ–ª—å';
      } else {
        description = '–°—Ç–∞–±–∏–ª—å–Ω–∞—è legacy –º–æ–¥–µ–ª—å';
      }
    } else if (cleanId.includes('1.0')) {
      description = '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è';
    } else if (cleanId.includes('exp')) {
      description = '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏';
    } else if (cleanId.includes('thinking')) {
      description = '–ú–æ–¥–µ–ª—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è';
    } else {
      description = '–ú–æ–¥–µ–ª—å Google Gemini';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ preview –≤–µ—Ä—Å–∏—è—Ö
    if (cleanId.includes('preview')) {
      description += ' (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)';
    }
    
    return description;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  getModelVersion(modelId) {
    if (modelId.includes('2.5')) return '2.5';
    if (modelId.includes('1.5')) return '1.5';
    if (modelId.includes('1.0')) return '1.0';
    return '0.0';
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  getErrorMessage(errorType, originalError) {
    switch (errorType) {
      case 'not_found':
        return '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
      case 'quota_exceeded':
        return '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤';
      case 'api_key_invalid':
        return '–ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º';
      case 'timeout':
        return '–¢–∞–π–º–∞—É—Ç (–º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ–π)';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    }
  }
}

module.exports = new AIService();
