import { useState, useMemo, useCallback, useEffect } from 'react'
import { Chess } from 'chess.js'
import ChessboardComponent from './components/ChessboardComponent'
import GameInfoPanel from './components/GameInfoPanel'
import ApiKeyModal from './components/ApiKeyModal'
import { getAiMove } from './services/apiService'

function App() {
  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞—Ö–º–∞—Ç–Ω–æ–π –ø–∞—Ä—Ç–∏–∏
  const game = useMemo(() => new Chess(), []);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è React –¥–ª—è UI
  const [fen, setFen] = useState(game.fen());
  const [apiKey, setApiKey] = useState(null);
  const [aiStrategy, setAiStrategy] = useState('–ò–≥—Ä–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é.');
  const [gameStatus, setGameStatus] = useState('–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
  const [isAiThinking, setIsAiThinking] = useState(false);
  const [error, setError] = useState(null);
  const [moveHistory, setMoveHistory] = useState([]);
  const [selectedSquare, setSelectedSquare] = useState(null);
  const [possibleMoves, setPossibleMoves] = useState([]);
  const [lastMove, setLastMove] = useState(null);
  const [selectedModel, setSelectedModel] = useState('gemini-2.5-pro-preview-05-06');

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
  useEffect(() => {
    if (!apiKey) {
      setGameStatus('–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
      return;
    }

    if (game.isGameOver()) {
      if (game.isCheckmate()) {
        const winner = game.turn() === 'w' ? '–ß–µ—Ä–Ω—ã–µ' : '–ë–µ–ª—ã–µ';
        setGameStatus(`–ú–∞—Ç! ${winner} –≤—ã–∏–≥—Ä–∞–ª–∏!`);
      } else if (game.isDraw()) {
        setGameStatus('–ù–∏—á—å—è!');
      } else if (game.isStalemate()) {
        setGameStatus('–ü–∞—Ç! –ù–∏—á—å—è.');
      }
      return;
    }

    if (isAiThinking) {
      setGameStatus('AI –¥—É–º–∞–µ—Ç...');
      return;
    }

    const turn = game.turn() === 'w' ? '–ë–µ–ª—ã–µ' : '–ß–µ—Ä–Ω—ã–µ';
    const isCheck = game.inCheck();
    
    if (isCheck) {
      setGameStatus(`${turn} —Ö–æ–¥—è—Ç - –®–ê–•!`);
    } else {
      setGameStatus(`${turn} —Ö–æ–¥—è—Ç`);
    }
  }, [fen, apiKey, isAiThinking, game]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–æ–¥–∞ –æ—Ç AI
  const makeAiMove = useCallback(async () => {
    if (!apiKey || game.isGameOver() || isAiThinking) return;

    setIsAiThinking(true);
    setError(null);

    try {
      console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ö–æ–¥ –æ—Ç AI...');
      
      const response = await getAiMove({
        fen: game.fen(),
        history: game.pgn(),
        strategy: aiStrategy,
        model: selectedModel,
        apiKey: apiKey
      });

      console.log('AI –æ—Ç–≤–µ—Ç–∏–ª:', response);

      // –î–µ–ª–∞–µ–º —Ö–æ–¥ AI
      const move = game.move(response.move);
      
      if (move) {
        setFen(game.fen());
        setMoveHistory(prev => [...prev, {
          move: response.move,
          san: move.san,
          player: 'AI',
          timestamp: Date.now()
        }]);
        setLastMove({ from: move.from, to: move.to });
        setAiStrategy(response.newStrategy || aiStrategy);
        console.log('‚úÖ AI —Å–¥–µ–ª–∞–ª —Ö–æ–¥:', response.move);
      } else {
        throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ö–æ–¥ –æ—Ç AI: ' + response.move);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö–æ–¥–∞ AI:', error);
      setError(`–û—à–∏–±–∫–∞ AI: ${error.message}`);
    } finally {
      setIsAiThinking(false);
    }
  }, [apiKey, aiStrategy, game, isAiThinking]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
  const onPieceDrop = useCallback((sourceSquare, targetSquare, piece) => {
    if (isAiThinking || !apiKey || game.isGameOver()) {
      return false;
    }

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—à–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ñ–µ—Ä–∑—å)
      const promotion = piece[1].toLowerCase() === 'p' && 
                      (targetSquare[1] === '8' || targetSquare[1] === '1') ? 'q' : undefined;

      const move = game.move({
        from: sourceSquare,
        to: targetSquare,
        promotion: promotion
      });

      if (move === null) {
        // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ö–æ–¥
        return false;
      }

      // –•–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–π - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setFen(game.fen());
      setMoveHistory(prev => [...prev, {
        move: `${sourceSquare}${targetSquare}`,
        san: move.san,
        player: '–ß–µ–ª–æ–≤–µ–∫',
        timestamp: Date.now()
      }]);
      setLastMove({ from: sourceSquare, to: targetSquare });
      setSelectedSquare(null);
      setPossibleMoves([]);
      setError(null);

      console.log('‚úÖ –ò–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª —Ö–æ–¥:', move.san);

      // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ö–æ–¥ AI
      if (!game.isGameOver()) {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        setTimeout(() => {
          makeAiMove();
        }, 300);
      }

      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–æ–¥–µ –∏–≥—Ä–æ–∫–∞:', error);
      return false;
    }
  }, [game, isAiThinking, apiKey, makeAiMove]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ
  const onSquareClick = useCallback((square) => {
    if (isAiThinking || !apiKey || game.isGameOver()) {
      return;
    }

    // –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–ª–µ—Ç–∫–∞ –∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –¥—Ä—É–≥—É—é - –ø—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
    if (selectedSquare && selectedSquare !== square) {
      const moveAttempted = onPieceDrop(selectedSquare, square, 
        game.get(selectedSquare)?.type + game.get(selectedSquare)?.color || 'p'
      );
      
      if (moveAttempted) {
        return; // –•–æ–¥ —Å–¥–µ–ª–∞–Ω
      }
    }

    // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –∫–ª–µ—Ç–∫—É –∏–ª–∏ —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    if (square === selectedSquare) {
      setSelectedSquare(null);
      setPossibleMoves([]);
    } else {
      const piece = game.get(square);
      if (piece && piece.color === game.turn()) {
        setSelectedSquare(square);
        const moves = game.moves({ square, verbose: true });
        setPossibleMoves(moves.map(move => move.to));
      } else {
        setSelectedSquare(null);
        setPossibleMoves([]);
      }
    }
  }, [selectedSquare, onPieceDrop, game, isAiThinking, apiKey]);

  // –§—É–Ω–∫—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  const startNewGame = useCallback(() => {
    game.reset();
    setFen(game.fen());
    setMoveHistory([]);
    setSelectedSquare(null);
    setPossibleMoves([]);
    setLastMove(null);
    setError(null);
    setIsAiThinking(false);
    setAiStrategy('–ò–≥—Ä–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é.');
  }, [game]);

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã —Ö–æ–¥–∞
  const undoMove = useCallback(() => {
    if (isAiThinking || moveHistory.length < 2) return;
    
    // –û—Ç–º–µ–Ω—è–µ–º 2 —Ö–æ–¥–∞ (–∏–≥—Ä–æ–∫–∞ –∏ AI)
    game.undo(); // AI —Ö–æ–¥
    game.undo(); // –•–æ–¥ –∏–≥—Ä–æ–∫–∞
    
    setFen(game.fen());
    setMoveHistory(prev => prev.slice(0, -2));
    setSelectedSquare(null);
    setPossibleMoves([]);
    setLastMove(null);
    setError(null);
  }, [game, isAiThinking, moveHistory.length]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-600 to-purple-700 p-4">
      <div className="max-w-7xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <header className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-bold text-white mb-2">
            üéØ –®–∞—Ö–º–∞—Ç—ã —Å AI
          </h1>
          <p className="text-blue-100 text-lg">
            –°—Ä–∞–∑–∏—Ç–µ—Å—å —Å —É–º–Ω—ã–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º –Ω–∞ –±–∞–∑–µ Google Gemini
          </p>
        </header>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* –®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞ */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-2xl shadow-2xl p-6">
              <ChessboardComponent
                fen={fen}
                onPieceDrop={onPieceDrop}
                onSquareClick={onSquareClick}
                selectedSquare={selectedSquare}
                possibleMoves={possibleMoves}
                lastMove={lastMove}
                isDisabled={isAiThinking || !apiKey || game.isGameOver()}
              />
              
              {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
              <div className="flex flex-wrap gap-3 mt-6">
                <button
                  onClick={startNewGame}
                  className="flex-1 bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors"
                >
                  üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞
                </button>
                <button
                  onClick={undoMove}
                  disabled={isAiThinking || moveHistory.length < 2}
                  className="flex-1 bg-yellow-600 hover:bg-yellow-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-semibold py-3 px-6 rounded-lg transition-colors"
                >
                  ‚Ü∂ –û—Ç–º–µ–Ω–∏—Ç—å —Ö–æ–¥
                </button>
                <button
                  onClick={() => setApiKey(null)}
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors"
                >
                  üîë –°–º–µ–Ω–∏—Ç—å –∫–ª—é—á
                </button>
              </div>
            </div>
          </div>

          {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ */}
          <div className="lg:col-span-1">
            <GameInfoPanel
              gameStatus={gameStatus}
              isAiThinking={isAiThinking}
              aiStrategy={aiStrategy}
              moveHistory={moveHistory}
              error={error}
              onClearError={() => setError(null)}
            />
          </div>
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞ */}
        <ApiKeyModal
          isOpen={!apiKey}
          onApiKeySubmit={(key, model) => {
            setApiKey(key);
            if (model) setSelectedModel(model);
            console.log('–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å:', model);
          }}
        />
      </div>
    </div>
  );
}

export default App; 