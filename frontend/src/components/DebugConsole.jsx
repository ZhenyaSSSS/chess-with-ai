import React, { useState, useEffect, useRef } from 'react';
import { Terminal, X, Copy, Trash2, Download, RefreshCw } from 'lucide-react';

/**
 * –ö–æ–Ω—Å–æ–ª—å –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AI
 */
function DebugConsole({ isOpen, onClose, debugLogs = [], onRefresh, onClear }) {
  const [filter, setFilter] = useState('all'); // all, prompts, responses, errors
  const consoleRef = useRef(null);
  const [autoScroll, setAutoScroll] = useState(true);

  // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–∏ –Ω–æ–≤—ã—Ö –ª–æ–≥–∞—Ö
  useEffect(() => {
    if (autoScroll && consoleRef.current) {
      consoleRef.current.scrollTop = consoleRef.current.scrollHeight;
    }
  }, [debugLogs, autoScroll]);

  if (!isOpen) return null;

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤
  const filteredLogs = debugLogs.filter(log => {
    if (filter === 'all') return true;
    return log.type === filter;
  });

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  const copyLogs = () => {
    const text = filteredLogs.map(log => 
      `[${log.timestamp}] ${log.type.toUpperCase()}: ${log.message}`
    ).join('\n');
    navigator.clipboard.writeText(text);
  };

  // –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
  const exportLogs = () => {
    const text = filteredLogs.map(log => 
      `[${log.timestamp}] ${log.type.toUpperCase()}: ${log.message}`
    ).join('\n');
    const blob = new Blob([text], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ai-debug-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatMessage = (log) => {
    if (log.type === 'prompt') {
      return (
        <div className="bg-blue-900/20 border-l-4 border-blue-400 p-3 rounded">
          <div className="text-blue-300 font-semibold mb-1">üì§ –ü–†–û–ú–ü–¢ ‚Üí AI</div>
          <pre className="text-blue-100 text-sm whitespace-pre-wrap font-mono">
            {log.message}
          </pre>
          {log.model && (
            <div className="text-blue-400 text-xs mt-2">
              –ú–æ–¥–µ–ª—å: {log.model} | API: {log.apiVersion}
            </div>
          )}
        </div>
      );
    }

    if (log.type === 'response') {
      return (
        <div className="bg-green-900/20 border-l-4 border-green-400 p-3 rounded">
          <div className="text-green-300 font-semibold mb-1">üì• –û–¢–í–ï–¢ ‚Üê AI</div>
          <pre className="text-green-100 text-sm whitespace-pre-wrap font-mono">
            {log.message || '(–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)'}
          </pre>
          {log.attempt && (
            <div className="text-green-400 text-xs mt-2">
              –ü–æ–ø—ã—Ç–∫–∞: {log.attempt} | –í—Ä–µ–º—è: {log.duration}ms
            </div>
          )}
        </div>
      );
    }

    if (log.type === 'error') {
      return (
        <div className="bg-red-900/20 border-l-4 border-red-400 p-3 rounded">
          <div className="text-red-300 font-semibold mb-1">‚ùå –û–®–ò–ë–ö–ê</div>
          <pre className="text-red-100 text-sm whitespace-pre-wrap font-mono">
            {log.message}
          </pre>
          {log.attempt && (
            <div className="text-red-400 text-xs mt-2">
              –ü–æ–ø—ã—Ç–∫–∞: {log.attempt}
            </div>
          )}
        </div>
      );
    }

    // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return (
      <div className="bg-gray-800/20 border-l-4 border-gray-400 p-3 rounded">
        <div className="text-gray-300 font-semibold mb-1">‚ÑπÔ∏è –ò–ù–§–û</div>
        <pre className="text-gray-100 text-sm whitespace-pre-wrap font-mono">
          {log.message}
        </pre>
      </div>
    );
  };

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-gray-900 rounded-2xl shadow-2xl w-full max-w-6xl h-[80vh] flex flex-col">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between p-4 border-b border-gray-700">
          <div className="flex items-center gap-3">
            <Terminal className="w-6 h-6 text-green-400" />
            <h2 className="text-xl font-bold text-white">üêõ –ö–æ–Ω—Å–æ–ª—å –æ—Ç–ª–∞–¥–∫–∏ AI</h2>
            <span className="bg-blue-600 text-white text-xs px-2 py-1 rounded">
              {filteredLogs.length} –∑–∞–ø–∏—Å–µ–π
            </span>
          </div>
          
          <div className="flex items-center gap-2">
            {/* –§–∏–ª—å—Ç—Ä—ã */}
            <select
              value={filter}
              onChange={(e) => setFilter(e.target.value)}
              className="bg-gray-800 text-white border border-gray-600 rounded px-3 py-1 text-sm"
            >
              <option value="all">–í—Å–µ –∑–∞–ø–∏—Å–∏</option>
              <option value="prompt">–¢–æ–ª—å–∫–æ –ø—Ä–æ–º–ø—Ç—ã</option>
              <option value="response">–¢–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã</option>
              <option value="error">–¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏</option>
            </select>

            {/* –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ */}
            <label className="flex items-center gap-2 text-white text-sm">
              <input
                type="checkbox"
                checked={autoScroll}
                onChange={(e) => setAutoScroll(e.target.checked)}
                className="rounded"
              />
              –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
            </label>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <button
              onClick={copyLogs}
              className="p-2 text-gray-400 hover:text-white transition-colors"
              title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏"
            >
              <Copy className="w-4 h-4" />
            </button>
            
            <button
              onClick={exportLogs}
              className="p-2 text-gray-400 hover:text-white transition-colors"
              title="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏"
            >
              <Download className="w-4 h-4" />
            </button>
            
            <button
              onClick={onRefresh}
              className="p-2 rounded-md hover:bg-gray-700 transition-colors"
              title="–û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏"
            >
              <RefreshCw className="w-4 h-4" />
            </button>
            
            <button
              onClick={onClear}
              className="p-2 rounded-md hover:bg-gray-700 transition-colors"
              title="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"
            >
              <Trash2 className="w-4 h-4" />
            </button>
            
            <button
              onClick={onClose}
              className="p-2 text-gray-400 hover:text-white transition-colors"
              title="–ó–∞–∫—Ä—ã—Ç—å"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Å–æ–ª–∏ */}
        <div 
          ref={consoleRef}
          className="flex-1 overflow-y-auto p-4 space-y-3 bg-gray-950/50"
        >
          {filteredLogs.length === 0 ? (
            <div className="text-center text-gray-400 py-8">
              <Terminal className="w-12 h-12 mx-auto mb-4 opacity-50" />
              <p>–õ–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞ –ø—É—Å—Ç—ã</p>
              <p className="text-sm">–°–¥–µ–ª–∞–π—Ç–µ —Ö–æ–¥ AI —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—â–µ–Ω–∏—è</p>
            </div>
          ) : (
            filteredLogs.map((log, index) => (
              <div key={index} className="animate-fade-in">
                <div className="text-xs text-gray-500 mb-1">
                  {new Date(log.timestamp).toLocaleTimeString()}
                </div>
                {formatMessage(log)}
              </div>
            ))
          )}
        </div>

        {/* –ü–æ–¥–≤–∞–ª */}
        <div className="p-4 border-t border-gray-700 bg-gray-800/50">
          <div className="flex items-center justify-between text-sm text-gray-400">
            <div>
              –ü—Ä–æ–º–ø—Ç—ã: {debugLogs.filter(l => l.type === 'prompt').length} | 
              –û—Ç–≤–µ—Ç—ã: {debugLogs.filter(l => l.type === 'response').length} | 
              –û—à–∏–±–∫–∏: {debugLogs.filter(l => l.type === 'error').length}
            </div>
            <div>
              –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default DebugConsole; 