import { Clock, Brain, History, AlertCircle, X, ChevronDown, ChevronUp, MessageSquare } from 'lucide-react'
import { useState } from 'react'

function GameInfoPanel({ 
  gameStatus, 
  isAiThinking, 
  aiStrategy, 
  moveHistory, 
  error, 
  onClearError,
  playerSide = 'white',
  aiSide = 'black'
}) {
  const [showStrategy, setShowStrategy] = useState(false);
  const [expandedMoves, setExpandedMoves] = useState(new Set());

  // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  console.log('üéØ GameInfoPanel –ø–æ–ª—É—á–∏–ª moveHistory:', moveHistory);
  console.log('üéØ AI —Ö–æ–¥—ã —Å reasoning:', moveHistory.filter(m => m.player === 'AI' && m.reasoning));
  
  // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ AI
  const lastAiMove = moveHistory.filter(m => m.player === 'AI').slice(-1)[0];
  if (lastAiMove) {
    console.log('üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥ AI:', {
      san: lastAiMove.san,
      hasReasoning: !!lastAiMove.reasoning,
      reasoning: lastAiMove.reasoning,
      reasoningLength: lastAiMove.reasoning ? lastAiMove.reasoning.length : 0
    });
  }
  const getStatusIcon = () => {
    if (isAiThinking) return 'ü§ñ';
    if (gameStatus.includes('–ú–∞—Ç')) return 'üèÜ';
    if (gameStatus.includes('–ù–∏—á—å—è') || gameStatus.includes('–ü–∞—Ç')) return 'ü§ù';
    if (gameStatus.includes('–®–ê–•')) return '‚öîÔ∏è';
    return '‚ôüÔ∏è';
  };

  const getStatusClass = () => {
    if (isAiThinking) return 'status-thinking';
    if (gameStatus.includes('–ú–∞—Ç')) return 'status-game-over';
    if (gameStatus.includes('–®–ê–•')) return 'status-check';
    return 'status-your-turn';
  };

  const formatTime = (timestamp) => {
    return new Date(timestamp).toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  };

  const toggleMoveExpansion = (index) => {
    const newExpanded = new Set(expandedMoves);
    if (newExpanded.has(index)) {
      newExpanded.delete(index);
    } else {
      newExpanded.add(index);
    }
    setExpandedMoves(newExpanded);
  };

  return (
    <div className="bg-white rounded-2xl shadow-2xl p-6 space-y-6">
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ—Ä–æ–Ω–∞—Ö */}
      <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-4">
        <h3 className="font-semibold text-gray-900 mb-3 text-center">‚öîÔ∏è –°—Ç–æ—Ä–æ–Ω—ã</h3>
        <div className="grid grid-cols-2 gap-3">
          <div className="text-center">
            <div className="text-2xl mb-1">üë§</div>
            <div className="font-medium text-green-700">–í—ã</div>
            <div className="text-sm text-gray-600 capitalize">
              {playerSide === 'white' ? '‚ôî –ë–µ–ª—ã–µ' : '‚ôö –ß–µ—Ä–Ω—ã–µ'}
            </div>
          </div>
          <div className="text-center">
            <div className="text-2xl mb-1">ü§ñ</div>
            <div className="font-medium text-purple-700">AI</div>
            <div className="text-sm text-gray-600 capitalize">
              {aiSide === 'white' ? '‚ôî –ë–µ–ª—ã–µ' : '‚ôö –ß–µ—Ä–Ω—ã–µ'}
            </div>
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã */}
      <div className="text-center">
        <div className={`game-status-indicator ${getStatusClass()} text-lg`}>
          <span className="mr-2">{getStatusIcon()}</span>
          {gameStatus}
        </div>
      </div>

      {/* –û—à–∏–±–∫–∏ */}
      {error && (
        <div className="bg-red-50 border-l-4 border-red-400 p-4 rounded-lg animate-slide-in">
          <div className="flex items-start">
            <AlertCircle className="h-5 w-5 text-red-400 mt-0.5 mr-3 flex-shrink-0" />
            <div className="flex-1">
              <p className="text-sm text-red-700">{error}</p>
            </div>
            <button
              onClick={onClearError}
              className="ml-2 text-red-400 hover:text-red-600"
            >
              <X className="h-4 w-4" />
            </button>
          </div>
        </div>
      )}

      {/* –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ AI */}
      {(() => {
        const lastAiMove = moveHistory.filter(m => m.player === 'AI' && m.reasoning).slice(-1)[0];
        return lastAiMove && (
          <div className="bg-purple-50 rounded-xl p-4">
            <div className="flex items-center mb-3">
              <MessageSquare className="h-5 w-5 text-purple-600 mr-2" />
              <h3 className="font-semibold text-purple-900">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ AI</h3>
              <span className="ml-2 text-xs text-purple-600 bg-purple-200 px-2 py-1 rounded-full">
                {lastAiMove.san}
              </span>
            </div>
            <p className="text-purple-800 text-sm leading-relaxed">
              {lastAiMove.reasoning}
            </p>
          </div>
        );
      })()}

      {/* –°—Ç—Ä–∞—Ç–µ–≥–∏—è AI */}
      <div className="bg-blue-50 rounded-xl p-4">
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center">
            <Brain className="h-5 w-5 text-blue-600 mr-2" />
            <h3 className="font-semibold text-blue-900">–°—Ç—Ä–∞—Ç–µ–≥–∏—è AI</h3>
          </div>
          <button
            onClick={() => setShowStrategy(!showStrategy)}
            className="text-blue-600 hover:text-blue-800 transition-colors"
          >
            {showStrategy ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
          </button>
        </div>
        {showStrategy && (
          <p className="text-blue-800 text-sm leading-relaxed">
            {isAiThinking ? (
              <span className="animate-pulse">ü§î –†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ö–æ–¥–æ–º...</span>
            ) : (
              aiStrategy
            )}
          </p>
        )}
      </div>

      {/* –ò—Å—Ç–æ—Ä–∏—è —Ö–æ–¥–æ–≤ */}
      <div className="bg-gray-50 rounded-xl p-4">
        <div className="flex items-center mb-3">
          <History className="h-5 w-5 text-gray-600 mr-2" />
          <h3 className="font-semibold text-gray-900">–ò—Å—Ç–æ—Ä–∏—è —Ö–æ–¥–æ–≤</h3>
          <span className="ml-auto bg-gray-200 text-gray-700 text-xs px-2 py-1 rounded-full">
            {moveHistory.length}
          </span>
        </div>
        
        <div className="max-h-64 overflow-y-auto space-y-2">
          {moveHistory.length === 0 ? (
            <p className="text-gray-500 text-sm text-center py-4">
              –ü–∞—Ä—Ç–∏—è –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å
            </p>
          ) : (
            moveHistory.map((move, index) => (
              <div key={index} className="bg-white rounded-lg text-sm">
                <div className="flex items-center justify-between p-2">
                  <div className="flex items-center">
                    <span className="font-mono bg-gray-100 text-gray-800 px-2 py-1 rounded text-xs mr-3">
                      {Math.floor(index / 2) + 1}{index % 2 === 0 ? '.' : '...'}
                    </span>
                    <span className="font-medium">
                      {move.san}
                    </span>
                  </div>
                  <div className="flex items-center text-xs text-gray-500">
                    <span className={`px-2 py-1 rounded-full mr-2 ${
                      move.player === 'AI' 
                        ? 'bg-purple-100 text-purple-700' 
                        : 'bg-green-100 text-green-700'
                    }`}>
                      {move.player === 'AI' ? 'ü§ñ' : 'üë§'}
                    </span>
                    {move.player === 'AI' && move.reasoning && (
                      <button
                        onClick={() => toggleMoveExpansion(index)}
                        className="text-blue-500 hover:text-blue-700 mr-2"
                        title="–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
                      >
                        <MessageSquare className="h-3 w-3" />
                      </button>
                    )}
                    <Clock className="h-3 w-3 mr-1" />
                    {formatTime(move.timestamp)}
                  </div>
                </div>
                
                {/* –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ AI */}
                {move.player === 'AI' && move.reasoning && expandedMoves.has(index) && (
                  <div className="px-2 pb-2">
                    <div className="bg-purple-50 border-l-4 border-purple-200 p-3 rounded-r-lg">
                      <div className="flex items-start">
                        <MessageSquare className="h-4 w-4 text-purple-600 mr-2 mt-0.5 flex-shrink-0" />
                        <div className="text-xs text-purple-800">
                          <div className="font-medium mb-1">üí≠ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ AI:</div>
                          <div className="leading-relaxed">{move.reasoning}</div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            ))
          )}
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-2 gap-4">
        <div className="bg-green-50 rounded-lg p-3 text-center">
          <div className="text-2xl font-bold text-green-700">
            {moveHistory.filter(m => m.player === '–ß–µ–ª–æ–≤–µ–∫').length}
          </div>
          <div className="text-sm text-green-600">–í–∞—à–∏ —Ö–æ–¥—ã</div>
        </div>
        <div className="bg-purple-50 rounded-lg p-3 text-center">
          <div className="text-2xl font-bold text-purple-700">
            {moveHistory.filter(m => m.player === 'AI').length}
          </div>
          <div className="text-sm text-purple-600">–•–æ–¥—ã AI</div>
        </div>
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
        <h4 className="font-medium text-yellow-800 mb-2">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏</h4>
        <ul className="text-sm text-yellow-700 space-y-1">
          <li>‚Ä¢ –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Ñ–∏–≥—É—Ä—É, –∑–∞—Ç–µ–º –Ω–∞ –∫–ª–µ—Ç–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</li>
          <li>‚Ä¢ –ò–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∏–≥—É—Ä—É –Ω–∞ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ</li>
          <li>‚Ä¢ –ó–µ–ª–µ–Ω—ã–µ —Ç–æ—á–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã</li>
          <li>‚Ä¢ –ñ–µ–ª—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥</li>
        </ul>
      </div>
    </div>
  );
}

export default GameInfoPanel; 