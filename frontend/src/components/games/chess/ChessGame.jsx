import React, { useState } from 'react';
import { useSettings } from '../../../context/SettingsContext';
import { useNewChessGame } from '../../../hooks/useNewChessGame';
import ChessboardComponent from '../../ChessboardComponent';
import GameInfoPanel from '../../GameInfoPanel';
import ApiKeyModal from '../../ApiKeyModal';
import PromotionModal from './PromotionModal';
import DebugConsole from '../../DebugConsole';
import gameService from '../../../services/gameService';

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —à–∞—Ö–º–∞—Ç–Ω–æ–π –∏–≥—Ä—ã
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –∏ UI –¥–ª—è –∏–≥—Ä—ã –≤ —à–∞—Ö–º–∞—Ç—ã —Å AI
 */
function ChessGame() {
  const { 
    apiKey, 
    selectedModel, 
    setApiKey, 
    setSelectedModel 
  } = useSettings();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ª–∞–¥–∫–∏
  const [showDebugConsole, setShowDebugConsole] = useState(false);
  const [debugLogs, setDebugLogs] = useState([]);
  const [debugMode, setDebugMode] = useState(false);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è —à–∞—Ö–º–∞—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏
  const {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    fen,
    gameStatus,
    isAiThinking,
    error,
    moveHistory,
    aiStrategy,
    
    // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    selectedSquare,
    possibleMoves,
    lastMove,
    
    // –°—Ç–æ—Ä–æ–Ω—ã
    playerSide,
    aiSide,
    
    // –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—à–∫–∏
    showPromotionModal,
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    onPieceDrop,
    onSquareClick,
    
    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
    startNewGame,
    undoMove,
    switchSides,
    clearError,
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
    handlePromotionSelect,
    handlePromotionCancel,
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    isGameOver,
    canUndo,
    canSwitchSides
  } = useNewChessGame(apiKey, selectedModel);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–ª–∞–¥–∫–∏
  const handleToggleDebug = async () => {
    try {
      const newMode = !debugMode;
      await gameService.toggleDebugMode(newMode);
      setDebugMode(newMode);
      
      if (newMode) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–∏
        const logs = await gameService.getDebugLogs();
        setDebugLogs(logs);
        setShowDebugConsole(true);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
    }
  };

  const handleShowDebugConsole = async () => {
    try {
      const logs = await gameService.getDebugLogs();
      setDebugLogs(logs);
      setShowDebugConsole(true);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤ –æ—Ç–ª–∞–¥–∫–∏:', error);
    }
  };

  const handleClearDebugLogs = async () => {
    try {
      await gameService.clearDebugLogs();
      setDebugLogs([]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:', error);
    }
  };

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∫–æ–≥–¥–∞ –∫–æ–Ω—Å–æ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞
  React.useEffect(() => {
    if (showDebugConsole && debugMode) {
      const interval = setInterval(async () => {
        try {
          const logs = await gameService.getDebugLogs();
          setDebugLogs(logs);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error);
        }
      }, 1000);
      
      return () => clearInterval(interval);
    }
  }, [showDebugConsole, debugMode]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-600 to-purple-700 p-4">
      <div className="max-w-7xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <header className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-bold text-white mb-2">
            üéØ –®–∞—Ö–º–∞—Ç—ã —Å AI
          </h1>
          <p className="text-blue-100 text-lg">
            –°—Ä–∞–∑–∏—Ç–µ—Å—å —Å —É–º–Ω—ã–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º –Ω–∞ –±–∞–∑–µ Google Gemini
          </p>
        </header>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* –®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞ */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-2xl shadow-2xl p-6">
              <ChessboardComponent
                fen={fen}
                onPieceDrop={onPieceDrop}
                onSquareClick={onSquareClick}
                selectedSquare={selectedSquare}
                possibleMoves={possibleMoves}
                lastMove={lastMove}
                isDisabled={isAiThinking || !apiKey || isGameOver}
                boardOrientation={playerSide}
              />
              
              {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
              <div className="flex flex-wrap gap-3 mt-6">
                <button
                  onClick={startNewGame}
                  className="flex-1 bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors"
                >
                  üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞
                </button>
                <button
                  onClick={undoMove}
                  disabled={!canUndo}
                  className="flex-1 bg-yellow-600 hover:bg-yellow-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-semibold py-3 px-6 rounded-lg transition-colors"
                >
                  ‚Ü∂ –û—Ç–º–µ–Ω–∏—Ç—å —Ö–æ–¥
                </button>
                <button
                  onClick={switchSides}
                  disabled={!canSwitchSides}
                  className="flex-1 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-semibold py-3 px-6 rounded-lg transition-colors"
                >
                  üîÑ –ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–æ—Ä–æ–Ω—ã
                </button>
                <button
                  onClick={() => setApiKey(null)}
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors"
                >
                  üîë –°–º–µ–Ω–∏—Ç—å –∫–ª—é—á
                </button>
              </div>

              {/* –ö–Ω–æ–ø–∫–∏ –æ—Ç–ª–∞–¥–∫–∏ */}
              <div className="flex flex-wrap gap-3 mt-4">
                <button
                  onClick={handleToggleDebug}
                  className={`flex-1 font-semibold py-2 px-4 rounded-lg transition-colors ${
                    debugMode 
                      ? 'bg-red-600 hover:bg-red-700 text-white' 
                      : 'bg-gray-600 hover:bg-gray-700 text-white'
                  }`}
                >
                  üêõ {debugMode ? '–í—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É' : '–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É'}
                </button>
                <button
                  onClick={handleShowDebugConsole}
                  disabled={!apiKey}
                  className="flex-1 bg-indigo-600 hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-semibold py-2 px-4 rounded-lg transition-colors"
                >
                  üìã –ö–æ–Ω—Å–æ–ª—å –æ—Ç–ª–∞–¥–∫–∏
                </button>
                {debugLogs.length > 0 && (
                  <button
                    onClick={handleClearDebugLogs}
                    className="flex-1 bg-orange-600 hover:bg-orange-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors"
                  >
                    üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ ({debugLogs.length})
                  </button>
                )}
              </div>
            </div>
          </div>

          {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ */}
          <div className="lg:col-span-1">
            <GameInfoPanel
              gameStatus={gameStatus}
              isAiThinking={isAiThinking}
              aiStrategy={aiStrategy}
              moveHistory={moveHistory}
              error={error}
              onClearError={clearError}
              playerSide={playerSide}
              aiSide={aiSide}
            />
          </div>
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞ */}
        <ApiKeyModal
          isOpen={!apiKey}
          onApiKeySubmit={(key, model) => {
            setApiKey(key);
            if (model) setSelectedModel(model);
            console.log('–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å:', model);
          }}
        />

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—à–∫–∏ */}
        <PromotionModal
          isOpen={showPromotionModal}
          onSelect={handlePromotionSelect}
          onCancel={handlePromotionCancel}
          isWhite={playerSide === 'white'}
        />

        {/* –ö–æ–Ω—Å–æ–ª—å –æ—Ç–ª–∞–¥–∫–∏ */}
        <DebugConsole
          isOpen={showDebugConsole}
          onClose={() => setShowDebugConsole(false)}
          debugLogs={debugLogs}
        />
      </div>
    </div>
  );
}

export default ChessGame; 