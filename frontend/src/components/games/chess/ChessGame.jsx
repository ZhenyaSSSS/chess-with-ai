import React, { useState } from 'react';
import { useSettings } from '../../../context/SettingsContext';
import useChessGame from '../../../hooks/useChessGame';
import ChessboardComponent from '../../ChessboardComponent';
import GameInfoPanel from '../../GameInfoPanel';
import ApiKeyModal from '../../ApiKeyModal';
import PromotionModal from './PromotionModal';
import DebugConsole from '../../DebugConsole';

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —à–∞—Ö–º–∞—Ç–Ω–æ–π –∏–≥—Ä—ã
 */
function ChessGame() {
  const { 
    apiKey, 
    selectedModel, 
    setApiKey, 
    setSelectedModel 
  } = useSettings();

  const [showDebugConsole, setShowDebugConsole] = useState(false);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ö—É–∫ –¥–ª—è —à–∞—Ö–º–∞—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏
  const {
    fen,
    gameStatus,
    isAiThinking,
    error,
    moveHistory,
    aiStrategy,
    selectedSquare,
    possibleMoves,
    lastMove,
    playerSide,
    aiSide,
    showPromotionModal,
    onPieceDrop,
    onSquareClick,
    startNewGame,
    undoMove,
    switchSides,
    clearError,
    handlePromotionSelect,
    handlePromotionCancel,
    isGameOver,
    canUndo,
    canSwitchSides
  } = useChessGame(apiKey, selectedModel);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-600 to-purple-700 p-4">
      <div className="max-w-7xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <header className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-bold text-white mb-2">
            üéØ –®–∞—Ö–º–∞—Ç—ã —Å AI
          </h1>
          <p className="text-blue-100 text-lg">
            –°—Ä–∞–∑–∏—Ç–µ—Å—å —Å —É–º–Ω—ã–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º –Ω–∞ –±–∞–∑–µ Google Gemini
          </p>
        </header>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* –®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞ */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-2xl shadow-2xl p-6">
              <ChessboardComponent
                fen={fen}
                onPieceDrop={onPieceDrop}
                onSquareClick={onSquareClick}
                selectedSquare={selectedSquare}
                possibleMoves={possibleMoves}
                lastMove={lastMove}
                isDisabled={isAiThinking || !apiKey || isGameOver}
                boardOrientation={playerSide}
              />
              
              {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
              <div className="flex flex-wrap gap-3 mt-6">
                <button
                  onClick={startNewGame}
                  className="flex-1 bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors"
                >
                  üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞
                </button>
                <button
                  onClick={undoMove}
                  disabled={!canUndo}
                  className="flex-1 bg-yellow-600 hover:bg-yellow-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-semibold py-3 px-6 rounded-lg transition-colors"
                >
                  ‚Ü∂ –û—Ç–º–µ–Ω–∏—Ç—å —Ö–æ–¥
                </button>
                <button
                  onClick={switchSides}
                  disabled={!canSwitchSides}
                  className="flex-1 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-semibold py-3 px-6 rounded-lg transition-colors"
                >
                  üîÑ –ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–æ—Ä–æ–Ω—ã
                </button>
                <button
                  onClick={() => setApiKey(null)}
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors"
                >
                  üîë –°–º–µ–Ω–∏—Ç—å –∫–ª—é—á
                </button>
              </div>
              <div className="flex flex-wrap gap-3 mt-4">
                <button
                  onClick={() => setShowDebugConsole(true)}
                  disabled={!apiKey}
                  className="flex-1 bg-indigo-600 hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-semibold py-2 px-4 rounded-lg transition-colors"
                >
                  üêõ –ö–æ–Ω—Å–æ–ª—å –û—Ç–ª–∞–¥–∫–∏
                </button>
              </div>
            </div>
          </div>

          {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ */}
          <div className="lg:col-span-1">
            <GameInfoPanel
              gameStatus={gameStatus}
              isAiThinking={isAiThinking}
              aiStrategy={aiStrategy}
              moveHistory={moveHistory}
              error={error}
              onClearError={clearError}
              playerSide={playerSide}
              aiSide={aiSide}
            />
          </div>
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞ */}
        <ApiKeyModal
          isOpen={!apiKey}
          onApiKeySubmit={(key, model) => {
            setApiKey(key);
            if (model) setSelectedModel(model);
            console.log('–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å:', model);
          }}
        />

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—à–∫–∏ */}
        <PromotionModal
          isOpen={showPromotionModal}
          onSelect={handlePromotionSelect}
          onCancel={handlePromotionCancel}
          isWhite={playerSide === 'white'}
        />

        {/* –ö–æ–Ω—Å–æ–ª—å –æ—Ç–ª–∞–¥–∫–∏ */}
        <DebugConsole
          isVisible={showDebugConsole}
          onClose={() => setShowDebugConsole(false)}
        />
      </div>
    </div>
  );
}

export default ChessGame; 