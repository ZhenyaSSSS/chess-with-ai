import { createContext, useContext, useReducer, useCallback, useEffect } from 'react';

// –ö–ª—é—á–∏ –¥–ª—è localStorage
const STORAGE_KEYS = {
  API_KEY: 'chess_ai_api_key',
  SELECTED_MODEL: 'chess_ai_selected_model',
  USER_PREFERENCES: 'chess_ai_user_preferences',
  GAME_SETTINGS: 'chess_ai_game_settings'
};

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
const initialState = {
  // API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  apiKey: null,
  selectedModel: 'gemini-2.5-pro-preview-05-06',
  availableModels: [],
  
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
  userPreferences: {
    theme: 'light', // light, dark, auto
    language: 'ru', // ru, en
    soundEnabled: true,
    animationsEnabled: true,
    boardOrientation: 'white', // white, black, auto
    showCoordinates: true,
    showLastMove: true,
    showPossibleMoves: true
  },
  
  // –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  defaultGameSettings: {
    chess: {
      timeControl: null, // null –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–π –∏–≥—Ä—ã
      playerSide: 'white',
      aiDifficulty: 'medium',
      enableHints: false
    },
    tictactoe: {
      playerSide: 'X',
      aiDifficulty: 'medium',
      boardSize: 3
    }
  },
  
  // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  isFirstLaunch: true,
  settingsLoaded: false
};

// –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
const ACTIONS = {
  // API
  SET_API_KEY: 'SET_API_KEY',
  SET_SELECTED_MODEL: 'SET_SELECTED_MODEL',
  SET_AVAILABLE_MODELS: 'SET_AVAILABLE_MODELS',
  
  // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
  UPDATE_USER_PREFERENCES: 'UPDATE_USER_PREFERENCES',
  RESET_USER_PREFERENCES: 'RESET_USER_PREFERENCES',
  
  // –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  UPDATE_GAME_SETTINGS: 'UPDATE_GAME_SETTINGS',
  RESET_GAME_SETTINGS: 'RESET_GAME_SETTINGS',
  
  // –°–∏—Å—Ç–µ–º–Ω—ã–µ
  SET_FIRST_LAUNCH: 'SET_FIRST_LAUNCH',
  SET_SETTINGS_LOADED: 'SET_SETTINGS_LOADED',
  RESET_ALL_SETTINGS: 'RESET_ALL_SETTINGS'
};

// Reducer –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
function settingsReducer(state, action) {
  switch (action.type) {
    case ACTIONS.SET_API_KEY:
      return {
        ...state,
        apiKey: action.payload
      };
      
    case ACTIONS.SET_SELECTED_MODEL:
      return {
        ...state,
        selectedModel: action.payload
      };
      
    case ACTIONS.SET_AVAILABLE_MODELS:
      return {
        ...state,
        availableModels: action.payload
      };
      
    case ACTIONS.UPDATE_USER_PREFERENCES:
      return {
        ...state,
        userPreferences: {
          ...state.userPreferences,
          ...action.payload
        }
      };
      
    case ACTIONS.RESET_USER_PREFERENCES:
      return {
        ...state,
        userPreferences: initialState.userPreferences
      };
      
    case ACTIONS.UPDATE_GAME_SETTINGS:
      const { gameType, settings } = action.payload;
      return {
        ...state,
        defaultGameSettings: {
          ...state.defaultGameSettings,
          [gameType]: {
            ...state.defaultGameSettings[gameType],
            ...settings
          }
        }
      };
      
    case ACTIONS.RESET_GAME_SETTINGS:
      return {
        ...state,
        defaultGameSettings: initialState.defaultGameSettings
      };
      
    case ACTIONS.SET_FIRST_LAUNCH:
      return {
        ...state,
        isFirstLaunch: action.payload
      };
      
    case ACTIONS.SET_SETTINGS_LOADED:
      return {
        ...state,
        settingsLoaded: action.payload
      };
      
    case ACTIONS.RESET_ALL_SETTINGS:
      return {
        ...initialState,
        settingsLoaded: true
      };
      
    default:
      return state;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
const storage = {
  get: (key, defaultValue = null) => {
    try {
      const item = localStorage.getItem(key);
      return item ? JSON.parse(item) : defaultValue;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ localStorage (${key}):`, error);
      return defaultValue;
    }
  },
  
  set: (key, value) => {
    try {
      localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ localStorage (${key}):`, error);
    }
  },
  
  remove: (key) => {
    try {
      localStorage.removeItem(key);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ localStorage (${key}):`, error);
    }
  }
};

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const SettingsContext = createContext();

/**
 * Provider –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
export function SettingsProvider({ children }) {
  const [state, dispatch] = useReducer(settingsReducer, initialState);

  // ================ –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö –ò–ó LOCALSTORAGE ================
  
  const loadSettings = useCallback(() => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const apiKey = storage.get(STORAGE_KEYS.API_KEY);
      const selectedModel = storage.get(STORAGE_KEYS.SELECTED_MODEL, initialState.selectedModel);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
      const userPreferences = storage.get(STORAGE_KEYS.USER_PREFERENCES, initialState.userPreferences);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const gameSettings = storage.get(STORAGE_KEYS.GAME_SETTINGS, initialState.defaultGameSettings);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
      const isFirstLaunch = !localStorage.getItem(STORAGE_KEYS.USER_PREFERENCES);

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (apiKey) {
        dispatch({ type: ACTIONS.SET_API_KEY, payload: apiKey });
      }
      
      dispatch({ type: ACTIONS.SET_SELECTED_MODEL, payload: selectedModel });
      dispatch({ type: ACTIONS.UPDATE_USER_PREFERENCES, payload: userPreferences });
      dispatch({ type: ACTIONS.RESET_GAME_SETTINGS });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      Object.entries(gameSettings).forEach(([gameType, settings]) => {
        dispatch({ 
          type: ACTIONS.UPDATE_GAME_SETTINGS, 
          payload: { gameType, settings } 
        });
      });
      
      dispatch({ type: ACTIONS.SET_FIRST_LAUNCH, payload: isFirstLaunch });
      dispatch({ type: ACTIONS.SET_SETTINGS_LOADED, payload: true });
      
      console.log('üìö –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      dispatch({ type: ACTIONS.SET_SETTINGS_LOADED, payload: true });
    }
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadSettings();
  }, [loadSettings]);

  // ================ –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö ================
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á
  useEffect(() => {
    if (state.settingsLoaded) {
      if (state.apiKey) {
        storage.set(STORAGE_KEYS.API_KEY, state.apiKey);
      } else {
        storage.remove(STORAGE_KEYS.API_KEY);
      }
    }
  }, [state.apiKey, state.settingsLoaded]);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
  useEffect(() => {
    if (state.settingsLoaded) {
      storage.set(STORAGE_KEYS.SELECTED_MODEL, state.selectedModel);
    }
  }, [state.selectedModel, state.settingsLoaded]);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
  useEffect(() => {
    if (state.settingsLoaded) {
      storage.set(STORAGE_KEYS.USER_PREFERENCES, state.userPreferences);
    }
  }, [state.userPreferences, state.settingsLoaded]);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  useEffect(() => {
    if (state.settingsLoaded) {
      storage.set(STORAGE_KEYS.GAME_SETTINGS, state.defaultGameSettings);
    }
  }, [state.defaultGameSettings, state.settingsLoaded]);

  // ================ API –ú–ï–¢–û–î–´ ================

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á
   */
  const setApiKey = useCallback((apiKey) => {
    dispatch({ type: ACTIONS.SET_API_KEY, payload: apiKey });
  }, []);

  /**
   * –£–¥–∞–ª–∏—Ç—å API –∫–ª—é—á
   */
  const clearApiKey = useCallback(() => {
    dispatch({ type: ACTIONS.SET_API_KEY, payload: null });
  }, []);

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
   */
  const setSelectedModel = useCallback((model) => {
    dispatch({ type: ACTIONS.SET_SELECTED_MODEL, payload: model });
  }, []);

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
   */
  const setAvailableModels = useCallback((models) => {
    dispatch({ type: ACTIONS.SET_AVAILABLE_MODELS, payload: models });
  }, []);

  // ================ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø ================

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
   */
  const updateUserPreferences = useCallback((updates) => {
    dispatch({ type: ACTIONS.UPDATE_USER_PREFERENCES, payload: updates });
  }, []);

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
   */
  const resetUserPreferences = useCallback(() => {
    dispatch({ type: ACTIONS.RESET_USER_PREFERENCES });
  }, []);

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É
   */
  const toggleTheme = useCallback(() => {
    const newTheme = state.userPreferences.theme === 'light' ? 'dark' : 'light';
    updateUserPreferences({ theme: newTheme });
  }, [state.userPreferences.theme, updateUserPreferences]);

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–∏
   */
  const toggleSounds = useCallback(() => {
    updateUserPreferences({ soundEnabled: !state.userPreferences.soundEnabled });
  }, [state.userPreferences.soundEnabled, updateUserPreferences]);

  // ================ –ò–ì–†–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ================

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
   */
  const updateGameSettings = useCallback((gameType, settings) => {
    dispatch({ 
      type: ACTIONS.UPDATE_GAME_SETTINGS, 
      payload: { gameType, settings } 
    });
  }, []);

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
   */
  const getGameSettings = useCallback((gameType) => {
    return state.defaultGameSettings[gameType] || {};
  }, [state.defaultGameSettings]);

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  const resetGameSettings = useCallback(() => {
    dispatch({ type: ACTIONS.RESET_GAME_SETTINGS });
  }, []);

  // ================ –°–ò–°–¢–ï–ú–ù–´–ï –ú–ï–¢–û–î–´ ================

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
   */
  const completeFirstLaunch = useCallback(() => {
    dispatch({ type: ACTIONS.SET_FIRST_LAUNCH, payload: false });
  }, []);

  /**
   * –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  const resetAllSettings = useCallback(() => {
    // –û—á–∏—â–∞–µ–º localStorage
    Object.values(STORAGE_KEYS).forEach(key => {
      storage.remove(key);
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    dispatch({ type: ACTIONS.RESET_ALL_SETTINGS });
    
    console.log('üîÑ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
  }, []);

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  const exportSettings = useCallback(() => {
    const exportData = {
      userPreferences: state.userPreferences,
      defaultGameSettings: state.defaultGameSettings,
      selectedModel: state.selectedModel,
      exportedAt: new Date().toISOString(),
      version: '1.0'
    };
    
    return JSON.stringify(exportData, null, 2);
  }, [state.userPreferences, state.defaultGameSettings, state.selectedModel]);

  /**
   * –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  const importSettings = useCallback((settingsJson) => {
    try {
      const importData = JSON.parse(settingsJson);
      
      if (importData.userPreferences) {
        dispatch({ type: ACTIONS.UPDATE_USER_PREFERENCES, payload: importData.userPreferences });
      }
      
      if (importData.defaultGameSettings) {
        Object.entries(importData.defaultGameSettings).forEach(([gameType, settings]) => {
          dispatch({ 
            type: ACTIONS.UPDATE_GAME_SETTINGS, 
            payload: { gameType, settings } 
          });
        });
      }
      
      if (importData.selectedModel) {
        dispatch({ type: ACTIONS.SET_SELECTED_MODEL, payload: importData.selectedModel });
      }
      
      console.log('üì• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      return true;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      return false;
    }
  }, []);

  // –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const contextValue = {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    ...state,
    
    // API –º–µ—Ç–æ–¥—ã
    setApiKey,
    clearApiKey,
    setSelectedModel,
    setAvailableModels,
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    updateUserPreferences,
    resetUserPreferences,
    toggleTheme,
    toggleSounds,
    
    // –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    updateGameSettings,
    getGameSettings,
    resetGameSettings,
    
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ
    completeFirstLaunch,
    resetAllSettings,
    exportSettings,
    importSettings,
    loadSettings
  };

  return (
    <SettingsContext.Provider value={contextValue}>
      {children}
    </SettingsContext.Provider>
  );
}

/**
 * –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
export function useSettings() {
  const context = useContext(SettingsContext);
  if (!context) {
    throw new Error('useSettings –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ SettingsProvider');
  }
  return context;
}

export default SettingsContext; 