import { useState, useMemo, useCallback, useEffect } from 'react';
import { Chess } from 'chess.js';
import { getAiMove } from '../services/apiService'; // Legacy API
import { validateApiKey } from '../utils/gameUtils';

/**
 * –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞—Ö–º–∞—Ç–Ω–æ–π –∏–≥—Ä–æ–π
 * @param {string} apiKey - API –∫–ª—é—á –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AI
 * @param {string} selectedModel - –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å AI
 * @returns {Object} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –º–µ—Ç–æ–¥—ã –∏–≥—Ä—ã
 */
export function useChessGame(apiKey, selectedModel = 'gemini-2.5-pro-preview-05-06') {
  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã Chess.js
  const game = useMemo(() => new Chess(), []);

  // ================ –°–û–°–¢–û–Ø–ù–ò–Ø ================
  const [fen, setFen] = useState(game.fen());
  const [aiStrategy, setAiStrategy] = useState(
    '–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Ç–∏—é —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ñ–∏–≥—É—Ä –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–Ω—Ç—Ä–∞. –ü–ª–∞–Ω: –±—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ–ª—è, –∑–∞—Ç–µ–º —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.'
  );
  const [gameStatus, setGameStatus] = useState('–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
  const [isAiThinking, setIsAiThinking] = useState(false);
  const [error, setError] = useState(null);
  const [moveHistory, setMoveHistory] = useState([]);
  
  // UI —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [selectedSquare, setSelectedSquare] = useState(null);
  const [possibleMoves, setPossibleMoves] = useState([]);
  const [lastMove, setLastMove] = useState(null);
  
  // –°—Ç–æ—Ä–æ–Ω—ã –∏–≥—Ä–æ–∫–æ–≤
  const [playerSide, setPlayerSide] = useState('white'); // 'white' –∏–ª–∏ 'black'
  const [aiSide, setAiSide] = useState('black'); // –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—à–∫–∏
  const [pendingPromotion, setPendingPromotion] = useState(null);
  const [showPromotionModal, setShowPromotionModal] = useState(false);

  // ================ –í–´–ß–ò–°–õ–Ø–ï–ú–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø ================
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥
  const isPlayerTurn = useCallback(() => {
    const currentTurn = game.turn(); // 'w' –∏–ª–∏ 'b'
    const playerColor = playerSide === 'white' ? 'w' : 'b';
    return currentTurn === playerColor;
  }, [game, playerSide]);

  const isAiTurn = useCallback(() => {
    const currentTurn = game.turn(); // 'w' –∏–ª–∏ 'b' 
    const aiColor = aiSide === 'white' ? 'w' : 'b';
    return currentTurn === aiColor;
  }, [game, aiSide]);

  // ================ –≠–§–§–ï–ö–¢–´ ================

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
  useEffect(() => {
    if (!apiKey) {
      setGameStatus('–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
      return;
    }

    if (game.isGameOver()) {
      if (game.isCheckmate()) {
        const winner = game.turn() === 'w' ? '–ß–µ—Ä–Ω—ã–µ' : '–ë–µ–ª—ã–µ';
        setGameStatus(`–ú–∞—Ç! ${winner} –≤—ã–∏–≥—Ä–∞–ª–∏!`);
      } else if (game.isDraw()) {
        setGameStatus('–ù–∏—á—å—è!');
      } else if (game.isStalemate()) {
        setGameStatus('–ü–∞—Ç! –ù–∏—á—å—è.');
      }
      return;
    }

    if (isAiThinking) {
      setGameStatus('AI –¥—É–º–∞–µ—Ç...');
      return;
    }

    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç–æ—Ä–æ–Ω
    const turn = game.turn() === 'w' ? '–ë–µ–ª—ã–µ' : '–ß–µ—Ä–Ω—ã–µ';
    const isCheck = game.inCheck();
    const isPlayersTurn = isPlayerTurn();
    
    if (isCheck) {
      if (isPlayersTurn) {
        setGameStatus(`${turn} —Ö–æ–¥—è—Ç (–í–´) - –®–ê–•!`);
      } else {
        setGameStatus(`${turn} —Ö–æ–¥—è—Ç (AI) - –®–ê–•!`);
      }
    } else {
      if (isPlayersTurn) {
        setGameStatus(`${turn} —Ö–æ–¥—è—Ç (–í–´)`);
      } else {
        setGameStatus(`${turn} —Ö–æ–¥—è—Ç (AI)`);
      }
    }
  }, [fen, apiKey, isAiThinking, game, isPlayerTurn]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ö–æ–¥–∞ AI –∫–æ–≥–¥–∞ –µ–≥–æ –æ—á–µ—Ä–µ–¥—å
  useEffect(() => {
    if (apiKey && !game.isGameOver() && !isAiThinking && isAiTurn()) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
      const timer = setTimeout(() => {
        makeAiMove();
      }, 300);
      return () => clearTimeout(timer);
    }
  }, [fen, apiKey, isAiThinking, isAiTurn]); // –£–±–∏—Ä–∞–µ–º makeAiMove –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∞

  // ================ –ú–ï–¢–û–î–´ ================

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–æ–¥–∞ –æ—Ç AI
  const makeAiMove = useCallback(async () => {
    if (!apiKey || game.isGameOver() || isAiThinking || !isAiTurn()) return;

    setIsAiThinking(true);
    setError(null);

    try {
      console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ö–æ–¥ –æ—Ç AI...');
      
      const response = await getAiMove({
        fen: game.fen(),
        strategy: aiStrategy,
        model: selectedModel,
        apiKey: apiKey,
        aiSide: aiSide
      });

      console.log('AI –æ—Ç–≤–µ—Ç–∏–ª:', response);
      console.log('üîç Reasoning –æ—Ç AI:', response.reasoning);
      console.log('üîç NewStrategy –æ—Ç AI:', response.newStrategy);

      // –î–µ–ª–∞–µ–º —Ö–æ–¥ AI
      const move = game.move(response.move);
      
      if (move) {
        const moveData = {
          move: response.move,
          san: move.san,
          player: 'AI',
          side: aiSide,
          timestamp: Date.now(),
          reasoning: response.reasoning || null, // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞
          newStrategy: response.newStrategy || null // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        };
        
        console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ö–æ–¥–æ–≤:', moveData);
        
        setFen(game.fen());
        setMoveHistory(prev => [...prev, moveData]);
        setLastMove({ from: move.from, to: move.to });
        setAiStrategy(response.newStrategy || aiStrategy);
        console.log('‚úÖ AI —Å–¥–µ–ª–∞–ª —Ö–æ–¥:', response.move);
      } else {
        throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ö–æ–¥ –æ—Ç AI: ' + response.move);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö–æ–¥–∞ AI:', error);
      setError(`–û—à–∏–±–∫–∞ AI: ${error.message}`);
    } finally {
      setIsAiThinking(false);
    }
  }, [apiKey, aiStrategy, game, isAiThinking, isAiTurn, aiSide, selectedModel]);

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–æ–¥–∞
  const executeMove = useCallback((sourceSquare, targetSquare, promotion = null) => {
    try {
      const move = game.move({
        from: sourceSquare,
        to: targetSquare,
        promotion: promotion
      });

      if (move === null) {
        return false;
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ FEN —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const newFen = game.fen();
      
      // –•–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–π - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setFen(newFen);
      setMoveHistory(prev => [...prev, {
        move: `${sourceSquare}${targetSquare}${promotion || ''}`,
        san: move.san,
        player: '–ß–µ–ª–æ–≤–µ–∫',
        side: playerSide,
        timestamp: Date.now()
      }]);
      setLastMove({ from: sourceSquare, to: targetSquare });
      setSelectedSquare(null);
      setPossibleMoves([]);
      setError(null);

      console.log('‚úÖ –ò–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª —Ö–æ–¥:', move.san, '–ù–æ–≤–æ–µ FEN:', newFen);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—à–∫–∏
      if (promotion) {
        console.log('üîÑ –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—à–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤:', promotion.toUpperCase());
      }
      
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–æ–¥–µ –∏–≥—Ä–æ–∫–∞:', error);
      return false;
    }
  }, [game, playerSide]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∏–≥—É—Ä—ã –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
  const handlePromotionSelect = useCallback((promotionPiece) => {
    if (pendingPromotion) {
      console.log('üéØ –ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤:', promotionPiece.toUpperCase());
      
      const success = executeMove(
        pendingPromotion.from,
        pendingPromotion.to,
        promotionPiece
      );
      
      if (success) {
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
        setPendingPromotion(null);
        setShowPromotionModal(false);
        console.log('‚úÖ –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—à–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—à–∫–∏');
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–∏ –ø–µ—à–∫–∏');
      }
    }
  }, [pendingPromotion, executeMove]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
  const handlePromotionCancel = useCallback(() => {
    setPendingPromotion(null);
    setShowPromotionModal(false);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Ñ–∏–≥—É—Ä
  const onPieceDrop = useCallback((sourceSquare, targetSquare, piece) => {
    if (isAiThinking || !apiKey || game.isGameOver() || !isPlayerTurn() || showPromotionModal) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ–º –ø–µ—à–∫–∏
    const movingPiece = game.get(sourceSquare);
    const isPromotion = movingPiece && 
                       movingPiece.type === 'p' && 
                       ((movingPiece.color === 'w' && targetSquare[1] === '8') || 
                        (movingPiece.color === 'b' && targetSquare[1] === '1'));

    if (isPromotion) {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
      if (!showPromotionModal && !pendingPromotion) {
        setPendingPromotion({ from: sourceSquare, to: targetSquare });
        setShowPromotionModal(true);
        console.log('üîÑ –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—à–∫–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ');
      }
      return false; // –•–æ–¥ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –∂–¥–µ–º –≤—ã–±–æ—Ä–∞ —Ñ–∏–≥—É—Ä—ã
    }

    // –û–±—ã—á–Ω—ã–π —Ö–æ–¥ (–Ω–µ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ)
    return executeMove(sourceSquare, targetSquare);
  }, [game, isAiThinking, apiKey, isPlayerTurn, executeMove, showPromotionModal, pendingPromotion]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ
  const onSquareClick = useCallback((square) => {
    if (isAiThinking || !apiKey || game.isGameOver() || !isPlayerTurn() || showPromotionModal) {
      return;
    }

    // –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–ª–µ—Ç–∫–∞ –∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –¥—Ä—É–≥—É—é - –ø—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
    if (selectedSquare && selectedSquare !== square) {
      const piece = game.get(selectedSquare);
      if (piece) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—à–∫–∏ –¥–ª—è –∫–ª–∏–∫–∞ (–∫–∞–∫ –≤ onPieceDrop)
        const isPromotion = piece && 
                           piece.type === 'p' && 
                           ((piece.color === 'w' && square[1] === '8') || 
                            (piece.color === 'b' && square[1] === '1'));

        if (isPromotion) {
          // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—â–µ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–æ
          if (!showPromotionModal && !pendingPromotion) {
            setPendingPromotion({ from: selectedSquare, to: square });
            setShowPromotionModal(true);
            setSelectedSquare(null);
            setPossibleMoves([]);
          }
          return;
        }

        // –û–±—ã—á–Ω—ã–π —Ö–æ–¥
        const moveSuccess = executeMove(selectedSquare, square);
        if (moveSuccess) {
          return; // –•–æ–¥ —Å–¥–µ–ª–∞–Ω
        }
      }
    }

    // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –∫–ª–µ—Ç–∫—É –∏–ª–∏ —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    if (square === selectedSquare) {
      setSelectedSquare(null);
      setPossibleMoves([]);
    } else {
      const piece = game.get(square);
      if (piece && piece.color === game.turn()) {
        setSelectedSquare(square);
        const moves = game.moves({ square, verbose: true });
        setPossibleMoves(moves.map(move => move.to));
      } else {
        setSelectedSquare(null);
        setPossibleMoves([]);
      }
    }
  }, [selectedSquare, game, isAiThinking, apiKey, isPlayerTurn, showPromotionModal, pendingPromotion, executeMove]);

  // –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —Å—Ç–æ—Ä–æ–Ω
  const switchSides = useCallback(() => {
    if (isAiThinking || game.history().length > 0) return; // –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Å—Ç–æ—Ä–æ–Ω—ã –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã

    const newPlayerSide = playerSide === 'white' ? 'black' : 'white';
    const newAiSide = aiSide === 'white' ? 'black' : 'white';
    
    setPlayerSide(newPlayerSide);
    setAiSide(newAiSide);
    
    console.log(`–°—Ç–æ—Ä–æ–Ω—ã –ø–æ–º–µ–Ω—è–ª–∏—Å—å: –ò–≥—Ä–æ–∫ - ${newPlayerSide}, AI - ${newAiSide}`);
  }, [playerSide, aiSide, isAiThinking, game]);

  // –§—É–Ω–∫—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  const startNewGame = useCallback(() => {
    game.reset();
    setFen(game.fen());
    setMoveHistory([]);
    setSelectedSquare(null);
    setPossibleMoves([]);
    setLastMove(null);
    setError(null);
    setIsAiThinking(false);
    setAiStrategy('–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Ç–∏—é —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ñ–∏–≥—É—Ä –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–Ω—Ç—Ä–∞. –ü–ª–∞–Ω: –±—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ–ª—è, –∑–∞—Ç–µ–º —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.');
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—à–∫–∏
    setPendingPromotion(null);
    setShowPromotionModal(false);
  }, [game]);

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã —Ö–æ–¥–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç–æ—Ä–æ–Ω
  const undoMove = useCallback(() => {
    if (isAiThinking || moveHistory.length === 0) return;
    
    const lastMoveInfo = moveHistory[moveHistory.length - 1];
    
    // –û—Ç–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    game.undo();
    
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥ –±—ã–ª —Ö–æ–¥–æ–º AI –∏ –µ—Å—Ç—å –µ—â–µ —Ö–æ–¥—ã, –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–∫–∂–µ —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
    if (lastMoveInfo.player === 'AI' && moveHistory.length >= 2) {
      game.undo();
      setMoveHistory(prev => prev.slice(0, -2)); // –£–±–∏—Ä–∞–µ–º 2 —Ö–æ–¥–∞
    } else {
      setMoveHistory(prev => prev.slice(0, -1)); // –£–±–∏—Ä–∞–µ–º 1 —Ö–æ–¥
    }
    
    setFen(game.fen());
    setSelectedSquare(null);
    setPossibleMoves([]);
    setLastMove(null);
    setError(null);
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—à–∫–∏
    setPendingPromotion(null);
    setShowPromotionModal(false);
    
    console.log('‚úÖ –•–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:', game.turn() === 'w' ? '–±–µ–ª—ã–µ' : '—á–µ—Ä–Ω—ã–µ');
  }, [game, isAiThinking, moveHistory]);

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
  const clearError = useCallback(() => {
    setError(null);
  }, []);

  // ================ –í–û–ó–í–†–ê–©–ê–ï–ú–´–ô –û–ë–™–ï–ö–¢ ================
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    fen,
    gameStatus,
    isAiThinking,
    error,
    moveHistory,
    aiStrategy,
    
    // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    selectedSquare,
    possibleMoves,
    lastMove,
    
    // –°—Ç–æ—Ä–æ–Ω—ã
    playerSide,
    aiSide,
    
    // –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—à–∫–∏
    pendingPromotion,
    showPromotionModal,
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    onPieceDrop,
    onSquareClick,
    
    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
    startNewGame,
    undoMove,
    switchSides,
    clearError,
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
    handlePromotionSelect,
    handlePromotionCancel,
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    isPlayerTurn: isPlayerTurn(),
    isAiTurn: isAiTurn(),
    isGameOver: game.isGameOver(),
    canUndo: moveHistory.length > 0 && !isAiThinking,
    canSwitchSides: !isAiThinking && game.history().length === 0
  };
}

export default useChessGame; 