import { useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Play, Settings, Info, Gamepad2 } from 'lucide-react';

// –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –∏ —Ö—É–∫–∏
import { useGameContext } from '../context/GameContext';
import { useSettings } from '../context/SettingsContext';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import LoadingSpinner from '../components/common/LoadingSpinner';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
import { GAME_CONFIG, GAME_TYPES } from '../utils/constants';

/**
 * –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function HomePage() {
  const { 
    supportedGames, 
    loadSupportedGames, 
    isLoading, 
    error,
    activeSessions 
  } = useGameContext();
  
  const { apiKey, isFirstLaunch } = useSettings();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (supportedGames.length === 0) {
      loadSupportedGames();
    }
  }, [supportedGames.length, loadSupportedGames]);

  // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–∫ fallback)
  const gamesToShow = supportedGames.length > 0 
    ? supportedGames.map(gameType => ({
        id: gameType,
        ...GAME_CONFIG[gameType]
      })).filter(game => game.name) // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∏–≥—Ä—ã
    : Object.values(GAME_CONFIG);

  return (
    <div className="min-h-screen p-4">
      <div className="max-w-6xl mx-auto">
        
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <header className="text-center mb-12">
          <div className="mb-6">
            <Gamepad2 className="w-20 h-20 text-white mx-auto mb-4" />
            <h1 className="text-5xl md:text-6xl font-bold text-white mb-4">
              üéÆ –ò–≥—Ä—ã —Å AI
            </h1>
            <p className="text-xl text-blue-100 max-w-2xl mx-auto">
              –°—Ä–∞–∑–∏—Ç–µ—Å—å —Å —É–º–Ω—ã–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–≥—Ä–∞—Ö
            </p>
          </div>

          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ */}
          {isFirstLaunch && (
            <div className="bg-blue-600/30 backdrop-blur-sm rounded-xl p-6 mb-8 border border-blue-400/30">
              <h2 className="text-2xl font-semibold text-white mb-2">
                üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
              </h2>
              <p className="text-blue-100">
                –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏ –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á Google Gemini –¥–ª—è –Ω–∞—á–∞–ª–∞
              </p>
            </div>
          )}
        </header>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π */}
        {activeSessions.size > 0 && (
          <div className="bg-green-600/20 backdrop-blur-sm rounded-xl p-4 mb-8 border border-green-400/30">
            <div className="flex items-center justify-center gap-3">
              <Play className="w-5 h-5 text-green-300" />
              <span className="text-green-100">
                –£ –≤–∞—Å {activeSessions.size} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
              </span>
            </div>
          </div>
        )}

        {/* –ó–∞–≥—Ä—É–∑–∫–∞ */}
        {isLoading && (
          <div className="text-center mb-8">
            <LoadingSpinner size="lg" text="–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä..." />
          </div>
        )}

        {/* –û—à–∏–±–∫–∞ */}
        {error && (
          <div className="bg-red-600/20 backdrop-blur-sm rounded-xl p-6 mb-8 border border-red-400/30 text-center">
            <p className="text-red-100">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä: {error}</p>
            <button
              onClick={loadSupportedGames}
              className="mt-3 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        )}

        {/* –°–µ—Ç–∫–∞ –∏–≥—Ä */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
          {gamesToShow.map((game) => {
            const hasActiveSession = Array.from(activeSessions.values())
              .some(session => session.gameType === game.id);

            return (
              <GameCard 
                key={game.id}
                game={game}
                hasActiveSession={hasActiveSession}
                hasApiKey={!!apiKey}
              />
            );
          })}
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ */}
        <div className="flex flex-wrap justify-center gap-4">
          <InfoCard
            icon={<Settings className="w-6 h-6" />}
            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
            description="–ù–∞—Å—Ç—Ä–æ–π—Ç–µ AI –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"
            href="/settings"
          />
          <InfoCard
            icon={<Info className="w-6 h-6" />}
            title="–û –ø—Ä–æ–µ–∫—Ç–µ"
            description="–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
            href="/about"
            disabled={true} // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
          />
        </div>

        {/* Footer */}
        <footer className="text-center mt-16 pb-8">
          <p className="text-blue-200 text-sm">
            –°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π AI
          </p>
        </footer>
      </div>
    </div>
  );
}

/**
 * –ö–∞—Ä—Ç–æ—á–∫–∞ –∏–≥—Ä—ã
 */
function GameCard({ game, hasActiveSession, hasApiKey }) {
  return (
    <div className="group">
      <Link
        to={game.route}
        className="block bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20 hover:bg-white/20 hover:border-white/40 transition-all duration-300 hover:scale-105 hover:shadow-2xl"
      >
        {/* –ò–∫–æ–Ω–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å */}
        <div className="flex items-center justify-between mb-4">
          <div className="text-4xl">{game.icon}</div>
          <div className="flex flex-col items-end gap-1">
            {hasActiveSession && (
              <span className="bg-green-500 text-white text-xs px-2 py-1 rounded-full">
                –ê–∫—Ç–∏–≤–Ω–∞
              </span>
            )}
            {!hasApiKey && (
              <span className="bg-yellow-500 text-white text-xs px-2 py-1 rounded-full">
                –ù—É–∂–µ–Ω –∫–ª—é—á
              </span>
            )}
          </div>
        </div>

        {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
        <h3 className="text-xl font-bold text-white mb-2 group-hover:text-blue-200 transition-colors">
          {game.name}
        </h3>
        <p className="text-blue-100 text-sm mb-4 leading-relaxed">
          {game.description}
        </p>

        {/* –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã */}
        {game.features && (
          <div className="flex flex-wrap gap-1 mb-4">
            {game.features.slice(0, 2).map((feature) => (
              <span
                key={feature}
                className="bg-blue-600/30 text-blue-200 text-xs px-2 py-1 rounded-full"
              >
                {getFeatureName(feature)}
              </span>
            ))}
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ */}
        <div className="flex items-center justify-between">
          <span className="text-blue-200 text-sm">
            –ò–≥—Ä–æ–∫–æ–≤: {game.minPlayers}-{game.maxPlayers}
          </span>
          <div className="flex items-center gap-2 text-blue-200 group-hover:text-white transition-colors">
            <Play className="w-4 h-4" />
            <span className="text-sm font-medium">–ò–≥—Ä–∞—Ç—å</span>
          </div>
        </div>
      </Link>
    </div>
  );
}

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
 */
function InfoCard({ icon, title, description, href, disabled = false }) {
  const className = `
    flex items-center gap-4 bg-white/5 backdrop-blur-sm rounded-xl p-4 border border-white/10
    ${disabled 
      ? 'opacity-50 cursor-not-allowed' 
      : 'hover:bg-white/10 hover:border-white/20 transition-all duration-300'
    }
  `;

  const content = (
    <>
      <div className="text-blue-200">{icon}</div>
      <div>
        <h4 className="text-white font-medium">{title}</h4>
        <p className="text-blue-200 text-sm">{description}</p>
      </div>
    </>
  );

  if (disabled) {
    return <div className={className}>{content}</div>;
  }

  return (
    <Link to={href} className={className}>
      {content}
    </Link>
  );
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
 */
function getFeatureName(feature) {
  const featureNames = {
    'drag-drop': '–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ',
    'promotion': '–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ',
    'castling': '–†–æ–∫–∏—Ä–æ–≤–∫–∞',
    'en-passant': '–í–∑—è—Ç–∏–µ –Ω–∞ –ø—Ä–æ—Ö–æ–¥–µ',
    'click-to-move': '–ö–ª–∏–∫ –¥–ª—è —Ö–æ–¥–∞'
  };
  
  return featureNames[feature] || feature;
}

export default HomePage; 