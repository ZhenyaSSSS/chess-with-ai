import axios from 'axios';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const api = axios.create({
  baseURL: '/api', // Vite –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç —ç—Ç–æ –Ω–∞ localhost:3001
  timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–ø—Ä–æ—Å (AI –º–æ–∂–µ—Ç –¥—É–º–∞—Ç—å –¥–æ–ª–≥–æ)
  headers: {
    'Content-Type': 'application/json'
  }
});

// –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ dev —Ä–µ–∂–∏–º–µ
if (import.meta.env.DEV) {
  api.interceptors.request.use(
    (config) => {
      console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`, {
        data: config.data ? { ...config.data, apiKey: '[HIDDEN]' } : undefined
      });
      return config;
    },
    (error) => {
      console.error('‚ùå API Request Error:', error);
      return Promise.reject(error);
    }
  );

  api.interceptors.response.use(
    (response) => {
      console.log(`‚úÖ API Response: ${response.status}`, response.data);
      return response;
    },
    (error) => {
      console.error('‚ùå API Response Error:', error.response?.data || error.message);
      return Promise.reject(error);
    }
  );
}

class GameService {
  constructor() {
    // Vite –∏—Å–ø–æ–ª—å–∑—É–µ—Ç import.meta.env.DEV –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    this.baseUrl = import.meta.env.DEV
      ? 'http://localhost:3001'
      : '';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ö–æ–¥ –æ—Ç AI
   * @param {Object} gameData - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
   * @param {string} apiKey - API –∫–ª—é—á Gemini
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ö–æ–¥–æ–º AI
   */
  async getAIMove(gameData, apiKey) {
    try {
      const response = await api.post('/get-ai-move', {
        ...gameData,
        apiKey
      });

      return {
        move: response.data.move,
        newStrategy: response.data.newStrategy,
        attempts: response.data.attempts || 1,
        model: response.data.model
      };

    } catch (error) {
      console.error('API Error:', error);
      
      if (error.response) {
        const { status, data } = error.response;
        
        switch (status) {
          case 400:
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏.');
          case 401:
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
          case 429:
            throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini API. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.');
          case 500:
            throw new Error(data?.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö–æ–¥–∞ AI.');
          default:
            throw new Error(data?.error || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (${status})`);
        }
      } else if (error.request) {
        throw new Error('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Gemini
   * @param {string} apiKey - API –∫–ª—é—á Gemini
   * @param {string} apiVersion - –í–µ—Ä—Å–∏—è API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
   */
  async getAvailableModels(apiKey, apiVersion = 'v1beta') {
    try {
      const response = await fetch(`${this.baseUrl}/api/get-models`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ apiKey, apiVersion })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      return data.models || [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
   * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
   */
  async healthCheck() {
    try {
      const response = await api.get('/health');
      return response.data;
    } catch (error) {
      console.error('Health check failed:', error);
      throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  }

  async setApiVersion(version) {
    try {
      const response = await fetch('/api/set-api-version', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ version })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –≤–µ—Ä—Å–∏–∏ API:', error);
      throw error;
    }
  }

  // === –û–¢–õ–ê–î–ö–ê AI ===

  async toggleDebugMode(enabled) {
    try {
      const response = await fetch('/api/debug/toggle', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ enabled })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
      throw error;
    }
  }

  async getDebugLogs() {
    try {
      const response = await fetch('/api/debug/logs');

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      return data.logs || [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –æ—Ç–ª–∞–¥–∫–∏:', error);
      throw error;
    }
  }

  async clearDebugLogs() {
    try {
      const response = await fetch('/api/debug/logs', {
        method: 'DELETE'
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –æ—Ç–ª–∞–¥–∫–∏:', error);
      throw error;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const gameService = new GameService();

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ backend —Å–µ—Ä–≤–µ—Ä–∞
 * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
 */
export async function checkServerHealth() {
  try {
    const response = await api.get('/health');
    return response.data;
  } catch (error) {
    throw new Error(`–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ö–æ–¥ –æ—Ç AI (legacy —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 * @param {Object} gameData - –î–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ
 * @returns {Promise<Object>} –•–æ–¥ AI –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
 */
export async function getAiMove(gameData) {
  return gameService.getAIMove(gameData, gameData.apiKey);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ (–æ—Ç–ø—Ä–∞–≤–ª—è—è —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å)
 * @param {string} apiKey - API –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {Promise<boolean>} true –µ—Å–ª–∏ –∫–ª—é—á –≤–∞–ª–∏–¥–Ω—ã–π
 */
export async function validateApiKey(apiKey) {
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
    await getAiMove({
      fen: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',
      history: '',
      strategy: 'Test strategy',
      apiKey: apiKey
    });
    
    return true;
  } catch (error) {
    if (error.message.includes('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á')) {
      return false;
    }
    // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é –∫–ª—é—á–∞
    throw error;
  }
}

export default gameService; 