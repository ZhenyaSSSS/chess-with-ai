import axios from 'axios';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const api = axios.create({
  baseURL: '/api',
  timeout: 180000, // 3 –º–∏–Ω—É—Ç—ã –¥–ª—è thinking –º–æ–¥–µ–ª–µ–π
  headers: {
    'Content-Type': 'application/json'
  }
});

// –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ dev —Ä–µ–∂–∏–º–µ
if (import.meta.env.DEV) {
  api.interceptors.request.use(
    (config) => {
      console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`, {
        data: config.data ? { ...config.data, apiKey: '[HIDDEN]' } : undefined
      });
      return config;
    },
    (error) => {
      console.error('‚ùå API Request Error:', error);
      return Promise.reject(error);
    }
  );

  api.interceptors.response.use(
    (response) => {
      console.log(`‚úÖ API Response: ${response.status}`, response.data);
      return response;
    },
    (error) => {
      console.error('‚ùå API Response Error:', error.response?.data || error.message);
      return Promise.reject(error);
    }
  );
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π API —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä
 */
class UniversalGameAPI {
  
  // ================ –ù–û–í–´–ï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ================
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –∏–≥—Ä
   */
  async getSupportedGames() {
    try {
      const response = await api.get('/games');
      return response.data.games || [];
    } catch (error) {
      console.error('Error getting supported games:', error);
      throw this.handleError(error);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
   * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã ('chess', 'tictactoe')
   * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã
   * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
   */
  async createGameSession(gameType, config = {}) {
    try {
      const response = await api.post(`/games/${gameType}/sessions`, {
        playerConfig: config.playerConfig || { side: 'white' },
        aiConfig: config.aiConfig || { 
          side: 'black',
          difficulty: 'medium',
          strategy: 'balanced'
        }
      });

      return {
        sessionId: response.data.sessionId,
        gameState: response.data.gameState,
        gameType: response.data.gameType
      };
    } catch (error) {
      console.error('Error creating game session:', error);
      throw this.handleError(error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
   * @param {string} sessionId - ID —Å–µ—Å—Å–∏–∏
   * @returns {Promise<Object>} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   */
  async getGameSession(sessionId) {
    try {
      const response = await api.get(`/sessions/${sessionId}`);
      return response.data;
    } catch (error) {
      console.error('Error getting game session:', error);
      throw this.handleError(error);
    }
  }

  /**
   * –°–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
   * @param {string} sessionId - ID —Å–µ—Å—Å–∏–∏
   * @param {Object} move - –•–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ–¥–∞
   */
  async makePlayerMove(sessionId, move) {
    try {
      const response = await api.post(`/sessions/${sessionId}/moves`, {
        move
      });

      return {
        gameState: response.data.gameState,
        gameEnd: response.data.gameEnd,
        moveHistory: response.data.moveHistory
      };
    } catch (error) {
      console.error('Error making player move:', error);
      throw this.handleError(error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ö–æ–¥ –æ—Ç AI
   * @param {string} sessionId - ID —Å–µ—Å—Å–∏–∏
   * @param {Object} aiConfig - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI
   * @returns {Promise<Object>} –•–æ–¥ AI
   */
  async getAIMove(sessionId, aiConfig) {
    try {
      const response = await api.post(`/sessions/${sessionId}/ai-move`, {
        apiKey: aiConfig.apiKey,
        model: aiConfig.model || 'gemini-2.5-pro-preview-05-06',
        difficulty: aiConfig.difficulty || 'medium'
      });

      return {
        move: response.data.move,
        reasoning: response.data.reasoning,
        newStrategy: response.data.newStrategy,
        availableMoves: response.data.availableMoves,
        aiSide: response.data.aiSide
      };
    } catch (error) {
      console.error('Error getting AI move:', error);
      throw this.handleError(error);
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
   * @param {string} sessionId - ID —Å–µ—Å—Å–∏–∏
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteGameSession(sessionId) {
    try {
      await api.delete(`/sessions/${sessionId}`);
      return true;
    } catch (error) {
      console.error('Error deleting game session:', error);
      throw this.handleError(error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏–≥—Ä—ã
   * @param {string} sessionId - ID —Å–µ—Å—Å–∏–∏
   * @returns {Promise<Object>} –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–≥—Ä—ã
   */
  async getGameAnalysis(sessionId) {
    try {
      const response = await api.get(`/sessions/${sessionId}/analysis`);
      return response.data.analysis;
    } catch (error) {
      console.error('Error getting game analysis:', error);
      throw this.handleError(error);
    }
  }

  // ================ LEGACY –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ö–æ–¥ –æ—Ç AI (legacy –º–µ—Ç–æ–¥ –¥–ª—è —à–∞—Ö–º–∞—Ç)
   * @param {Object} gameData - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã (FEN, –∏—Å—Ç–æ—Ä–∏—è –∏ —Ç.–¥.)
   * @param {string} apiKey - API –∫–ª—é—á
   * @returns {Promise<Object>} –•–æ–¥ AI
   */
  async getAiMove(gameData) {
    try {
      const response = await api.post('/get-ai-move', {
        fen: gameData.fen,
        apiKey: gameData.apiKey,
        strategy: gameData.strategy,
        model: gameData.model,
        aiSide: gameData.aiSide
      });

      return {
        move: response.data.move,
        newStrategy: response.data.newStrategy,
        attempts: response.data.attempts || 1,
        model: response.data.model
      };
    } catch (error) {
      console.error('Legacy AI move error:', error);
      throw this.handleError(error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini (legacy)
   * @param {string} apiKey - API –∫–ª—é—á
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
   */
  async getAvailableModels(apiKey) {
    try {
      const response = await api.post('/get-models', { apiKey });
      return response.data.models || [];
    } catch (error) {
      console.error('Models API Error:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return [
        {
          id: 'gemini-2.5-pro-preview-05-06',
          name: 'Gemini 2.5 Pro Preview 05-06',
          description: '–õ—É—á—à–∞—è –≤–µ—Ä—Å–∏—è 2.5 Pro (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è)',
          available: true
        },
        {
          id: 'gemini-2.5-pro-preview-06-05',
          name: 'Gemini 2.5 Pro Preview 06-05',
          description: '–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è (–º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)',
          available: true
        },
        {
          id: 'gemini-2.5-flash-preview-05-20',
          name: 'Gemini 2.5 Flash Preview',
          description: '–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å Gemini 2.5',
          available: true
        },
        {
          id: 'gemini-1.5-pro',
          name: 'Gemini 1.5 Pro (Legacy)',
          description: '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è',
          available: true
        }
      ];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è backend —Å–µ—Ä–≤–µ—Ä–∞
   * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
   */
  async healthCheck() {
    try {
      const response = await api.get('/health');
      return response.data;
    } catch (error) {
      console.error('Health check failed:', error);
      throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  }

  // ================ –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ================

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
   * @param {Error} error - –û—à–∏–±–∫–∞ –æ—Ç axios
   * @returns {Error} –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
   */
  handleError(error) {
    if (error.response) {
      const { status, data } = error.response;
      
      switch (status) {
        case 400:
          return new Error(data?.error || '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞');
        case 401:
          return new Error('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        case 404:
          return new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞');
        case 429:
          return new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.');
        case 500:
          return new Error(data?.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        default:
          return new Error(data?.error || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (${status})`);
      }
    } else if (error.request) {
      return new Error('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');
    } else {
      return new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const gameAPI = new UniversalGameAPI();

// ================ LEGACY –≠–ö–°–ü–û–†–¢–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ================

export const gameService = gameAPI;
export const getAiMove = (gameData) => gameAPI.getAiMove(gameData);
export const checkServerHealth = () => gameAPI.healthCheck();
export const validateApiKey = async (apiKey) => {
  try {
    await getAiMove({
      fen: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',
      strategy: 'Test strategy',
      apiKey: apiKey
    });
    return true;
  } catch (error) {
    if (error.message.includes('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á')) {
      return false;
    }
    throw error;
  }
};

export default gameAPI; 