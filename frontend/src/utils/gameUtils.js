import { GAME_TYPES, GAME_CONFIG, VALIDATION_REGEX, LIMITS } from './constants';

// ================ –ò–ì–†–û–í–´–ï –£–¢–ò–õ–ò–¢–´ ================

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –∏–≥—Ä—ã
 * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
 * @returns {boolean} true –µ—Å–ª–∏ –∏–≥—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
 */
export function isGameTypeSupported(gameType) {
  return Object.values(GAME_TYPES).includes(gameType);
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–≥—Ä—ã
 * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
 * @returns {Object|null} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã –∏–ª–∏ null
 */
export function getGameConfig(gameType) {
  return GAME_CONFIG[gameType] || null;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∏–≥—Ä—ã
 * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
 * @returns {string} –ò–º—è –∏–≥—Ä—ã
 */
export function getGameName(gameType) {
  const config = getGameConfig(gameType);
  return config?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞';
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –∏–≥—Ä—ã
 * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
 * @returns {string} –ò–∫–æ–Ω–∫–∞ –∏–≥—Ä—ã
 */
export function getGameIcon(gameType) {
  const config = getGameConfig(gameType);
  return config?.icon || 'üéÆ';
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏–≥—Ä—ã
 * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
 * @returns {string} –ü—É—Ç—å –∫ –∏–≥—Ä–µ
 */
export function getGameRoute(gameType) {
  const config = getGameConfig(gameType);
  return config?.route || '/';
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
 * @param {string} side - –¢–µ–∫—É—â–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ ('white', 'black', 'X', 'O')
 * @returns {string} –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
 */
export function getOppositeSide(side) {
  const opposites = {
    'white': 'black',
    'black': 'white',
    'X': 'O',
    'O': 'X'
  };
  return opposites[side] || side;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–æ—Ä–æ–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–æ–π –∏–≥—Ä–æ–∫–∞
 * @param {string} side - –°—Ç–æ—Ä–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {string} playerSide - –°—Ç–æ—Ä–æ–Ω–∞ –∏–≥—Ä–æ–∫–∞
 * @returns {boolean} true –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç–æ—Ä–æ–Ω–∞ –∏–≥—Ä–æ–∫–∞
 */
export function isPlayerSide(side, playerSide) {
  return side === playerSide;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥
 * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
 * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
 * @returns {string} –°—Ç–æ—Ä–æ–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ —Ö–æ–¥–∏—Ç—å
 */
export function getCurrentTurn(gameState, gameType) {
  if (gameType === GAME_TYPES.CHESS) {
    // –í —à–∞—Ö–º–∞—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è FEN notation
    return gameState.fen ? (gameState.fen.split(' ')[1] === 'w' ? 'white' : 'black') : 'white';
  } else if (gameType === GAME_TYPES.TICTACTOE) {
    // –í –∫—Ä–µ—Å—Ç–∏–∫–∞—Ö-–Ω–æ–ª–∏–∫–∞—Ö —á–µ—Ä–µ–¥—É—é—Ç—Å—è —Ö–æ–¥—ã
    const moveCount = gameState.moveHistory?.length || 0;
    return moveCount % 2 === 0 ? 'X' : 'O';
  }
  return null;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
 * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
 * @returns {boolean} true –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
 */
export function isGameOver(gameState) {
  return gameState.gameEnd?.isGameOver || false;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
 * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã
 */
export function getGameResult(gameState) {
  if (!isGameOver(gameState)) {
    return { isGameOver: false };
  }

  const gameEnd = gameState.gameEnd;
  return {
    isGameOver: true,
    winner: gameEnd.winner,
    reason: gameEnd.reason,
    isDraw: gameEnd.isDraw || false,
    isCheckmate: gameEnd.isCheckmate || false,
    isStalemate: gameEnd.isStalemate || false
  };
}

// ================ –í–ê–õ–ò–î–ê–¶–ò–Ø ================

/**
 * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å API –∫–ª—é—á
 * @param {string} apiKey - API –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export function validateApiKey(apiKey) {
  if (!apiKey || typeof apiKey !== 'string') {
    return { isValid: false, error: 'API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω' };
  }

  if (apiKey.length < LIMITS.API_KEY_MIN_LENGTH) {
    return { isValid: false, error: `API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º ${LIMITS.API_KEY_MIN_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)` };
  }

  if (apiKey.length > LIMITS.API_KEY_MAX_LENGTH) {
    return { isValid: false, error: `API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º ${LIMITS.API_KEY_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)` };
  }

  if (!VALIDATION_REGEX.API_KEY.test(apiKey)) {
    return { isValid: false, error: 'API –∫–ª—é—á —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã' };
  }

  return { isValid: true };
}

/**
 * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å ID —Å–µ—Å—Å–∏–∏
 * @param {string} sessionId - ID —Å–µ—Å—Å–∏–∏
 * @returns {boolean} true –µ—Å–ª–∏ ID –≤–∞–ª–∏–¥–Ω—ã–π
 */
export function validateSessionId(sessionId) {
  return sessionId && VALIDATION_REGEX.SESSION_ID.test(sessionId);
}

/**
 * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —à–∞—Ö–º–∞—Ç–Ω—ã–π —Ö–æ–¥
 * @param {string} move - –•–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ a2a4
 * @returns {boolean} true –µ—Å–ª–∏ —Ö–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–π
 */
export function validateChessMove(move) {
  return move && VALIDATION_REGEX.CHESS_MOVE.test(move);
}

/**
 * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å FEN —Å—Ç—Ä–æ–∫—É
 * @param {string} fen - FEN —Å—Ç—Ä–æ–∫–∞
 * @returns {boolean} true –µ—Å–ª–∏ FEN –≤–∞–ª–∏–¥–Ω–∞—è
 */
export function validateChessFen(fen) {
  return fen && VALIDATION_REGEX.CHESS_FEN.test(fen);
}

// ================ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï ================

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 * @param {number} timestamp - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
 */
export function formatTime(timestamp) {
  if (!timestamp) return '';
  
  const date = new Date(timestamp);
  return date.toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É
 * @param {number} timestamp - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
 */
export function formatDate(timestamp) {
  if (!timestamp) return '';
  
  const date = new Date(timestamp);
  return date.toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 * @param {number} milliseconds - –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */
export function formatDuration(milliseconds) {
  if (!milliseconds || milliseconds < 0) return '0 —Å–µ–∫';

  const seconds = Math.floor(milliseconds / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);

  if (hours > 0) {
    return `${hours} —á ${minutes % 60} –º–∏–Ω`;
  } else if (minutes > 0) {
    return `${minutes} –º–∏–Ω ${seconds % 60} —Å–µ–∫`;
  } else {
    return `${seconds} —Å–µ–∫`;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥")
 * @param {number} timestamp - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
 * @returns {string} –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
 */
export function getRelativeTime(timestamp) {
  if (!timestamp) return '';

  const now = Date.now();
  const diff = now - timestamp;

  if (diff < 60000) { // –ú–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã
    return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
  } else if (diff < 3600000) { // –ú–µ–Ω—å—à–µ —á–∞—Å–∞
    const minutes = Math.floor(diff / 60000);
    return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
  } else if (diff < 86400000) { // –ú–µ–Ω—å—à–µ –¥–Ω—è
    const hours = Math.floor(diff / 3600000);
    return `${hours} —á –Ω–∞–∑–∞–¥`;
  } else {
    return formatDate(timestamp);
  }
}

// ================ –°–¢–ê–¢–ò–°–¢–ò–ö–ê ================

/**
 * –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö–æ–¥–æ–≤
 * @param {Array} moveHistory - –ò—Å—Ç–æ—Ä–∏—è —Ö–æ–¥–æ–≤
 * @param {string} playerSide - –°—Ç–æ—Ä–æ–Ω–∞ –∏–≥—Ä–æ–∫–∞
 * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö–æ–¥–æ–≤
 */
export function calculateMoveStats(moveHistory, playerSide) {
  if (!moveHistory || !Array.isArray(moveHistory)) {
    return { playerMoves: 0, aiMoves: 0, totalMoves: 0 };
  }

  const playerMoves = moveHistory.filter(move => 
    move.player === 'human' || move.side === playerSide
  ).length;

  const aiMoves = moveHistory.filter(move => 
    move.player === 'AI' || move.side !== playerSide
  ).length;

  return {
    playerMoves,
    aiMoves,
    totalMoves: moveHistory.length
  };
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
 * @param {Array} moveHistory - –ò—Å—Ç–æ—Ä–∏—è —Ö–æ–¥–æ–≤
 * @returns {Object|null} –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥ –∏–ª–∏ null
 */
export function getLastMove(moveHistory) {
  if (!moveHistory || !Array.isArray(moveHistory) || moveHistory.length === 0) {
    return null;
  }
  return moveHistory[moveHistory.length - 1];
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Ö–æ–¥
 * @param {Array} moveHistory - –ò—Å—Ç–æ—Ä–∏—è —Ö–æ–¥–æ–≤
 * @param {boolean} isAiThinking - –î—É–º–∞–µ—Ç –ª–∏ AI
 * @returns {boolean} true –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ö–æ–¥
 */
export function canUndoMove(moveHistory, isAiThinking = false) {
  return !isAiThinking && moveHistory && moveHistory.length > 0;
}

// ================ –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –°–ï–°–°–ò–ô ================

/**
 * –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
 * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
 */
export function generateSessionId() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
 * @param {Object} session - –û–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
 * @param {number} timeoutMs - –¢–∞–π–º-–∞—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {boolean} true –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
 */
export function isSessionActive(session, timeoutMs = LIMITS.SESSION_TIMEOUT) {
  if (!session || !session.lastActivity) return false;
  
  const now = Date.now();
  return (now - session.lastActivity) < timeoutMs;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {Object} session - –û–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
 * @returns {number} –í–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–∏
 */
export function getSessionAge(session) {
  if (!session || !session.createdAt) return 0;
  return Date.now() - session.createdAt;
}

// ================ –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ================

/**
 * –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param {string} code - –ö–æ–¥ –æ—à–∏–±–∫–∏
 * @param {Object} details - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
 * @returns {Object} –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
 */
export function createError(message, code = 'UNKNOWN_ERROR', details = {}) {
  return {
    message,
    code,
    details,
    timestamp: Date.now()
  };
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param {Error|Object} error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
 * @returns {string} –î—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export function getFriendlyErrorMessage(error) {
  if (!error) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  
  const message = error.message || error.toString();
  
  // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
  if (message.includes('API key') || message.includes('API –∫–ª—é—á')) {
    return '–ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.';
  }
  
  if (message.includes('network') || message.includes('—Å–µ—Ç–∏')) {
    return '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.';
  }
  
  if (message.includes('timeout') || message.includes('–≤—Ä–µ–º—è')) {
    return '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
  }
  
  if (message.includes('session') || message.includes('—Å–µ—Å—Å–∏—è')) {
    return '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.';
  }
  
  return message;
}

// ================ –≠–ö–°–ü–û–†–¢ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ ================

export default {
  // –ò–≥—Ä–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã
  isGameTypeSupported,
  getGameConfig,
  getGameName,
  getGameIcon,
  getGameRoute,
  getOppositeSide,
  isPlayerSide,
  getCurrentTurn,
  isGameOver,
  getGameResult,
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  validateApiKey,
  validateSessionId,
  validateChessMove,
  validateChessFen,
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  formatTime,
  formatDate,
  formatDuration,
  getRelativeTime,
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  calculateMoveStats,
  getLastMove,
  canUndoMove,
  
  // –°–µ—Å—Å–∏–∏
  generateSessionId,
  isSessionActive,
  getSessionAge,
  
  // –û—à–∏–±–∫–∏
  createError,
  getFriendlyErrorMessage
};