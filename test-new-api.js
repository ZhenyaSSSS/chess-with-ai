// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–≥–æ API
const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3001';

async function testNewAPI() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π API...');

    // 1. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    console.log('\n1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏...');
    const sessionResponse = await fetch(`${BASE_URL}/api/games/chess/sessions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        players: ['human', 'ai']
      })
    });

    if (!sessionResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${sessionResponse.status} ${sessionResponse.statusText}`);
    }

    const sessionData = await sessionResponse.json();
    console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', sessionData);

    const sessionId = sessionData.sessionId;

    // 2. –ü–æ–ª—É—á–∞–µ–º —Ö–æ–¥ AI (–±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –±–µ–∑ API –∫–ª—é—á–∞, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
    console.log('\n2. –ó–∞–ø—Ä–æ—Å —Ö–æ–¥–∞ AI...');
    const aiMoveResponse = await fetch(`${BASE_URL}/api/sessions/${sessionId}/ai-move`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        apiKey: 'test-key',
        model: 'gemini-2.5-pro-preview-05-06',
        strategy: '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è',
        aiSide: 'black'
      })
    });

    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ AI:', aiMoveResponse.status);
    const aiMoveData = await aiMoveResponse.json();
    console.log('–û—Ç–≤–µ—Ç AI:', aiMoveData);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

if (require.main === module) {
  testNewAPI();
}

module.exports = testNewAPI; 